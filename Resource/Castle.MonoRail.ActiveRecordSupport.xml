<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.MonoRail.ActiveRecordSupport</name>
    </assembly>
    <members>
        <member name="T:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableCriteria">
            <summary>
            A paginable criteria.
            Mimics the <see cref="M:Castle.ActiveRecord.ActiveRecordMediator.FindAll(System.Type)"/> interface.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery">
            <summary>
            Base class for all paginable queries, including custom ones.
            </summary>
            <remarks>
            Extenders should override the <see cref="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.BuildHQL"/>.
            Optionally, the methods <see cref="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.SetQueryParameters(NHibernate.IQuery)"/>
            and <see cref="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.ExecuteQuery(NHibernate.IQuery)"/> can also be overriden.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.Execute(NHibernate.ISession)">
            <summary>
            The implementation of the <see cref="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.Execute(NHibernate.ISession)"/> method,
            as required by <see cref="T:Castle.ActiveRecord.ActiveRecordBaseQuery"/>.
            Should not be overriden.
            </summary>
            <param name="session">The NHibernate Session</param>
            <returns>The query results.</returns>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.PrepareQueryForPagination(NHibernate.IQuery)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.BuildHQL">
            <summary>
            Should be overriden to return the custom HQL to be ran.
            </summary>
            <returns>The custom HQL to be ran</returns>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.SetQueryParameters(NHibernate.IQuery)">
            <summary>
            May be overriden, in order to set custom query parameters.
            </summary>
            <param name="q">The query</param>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.ExecuteQuery(NHibernate.IQuery)">
            <summary>
            Override to provide a custom query execution.
            The default behaviour is to just call <see cref="M:NHibernate.IQuery.List"/>.
            </summary>
            <param name="q"></param>
            <returns>The query results.</returns>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.Paginate(System.Int32,System.Int32)">
            <summary>
            Returns the page items.
            Actually, the implementation just sets the protected fields
            <see cref="F:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.pageSize"/> and <see cref="F:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.currentPage"/>,
            gets an <see cref="T:NHibernate.ISession"/> from <c>SessionFactoryHolder</c>
            and calls <see cref="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableQuery.InternalExecute(NHibernate.ISession,System.Boolean)"/> in order to execute
            the custom query and fetch only the page items.
            </summary>
            <param name="pageSize">The page size</param>
            <param name="currentPage">The current page</param>
            <returns>The page items</returns>
        </member>
        <member name="T:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableSimpleQuery">
            <summary>
            Performs a simple query and paginate the results.
            </summary>
            <remarks>
            There's no need to supply a <c>returnType</c>, like in
            <see cref="T:Castle.ActiveRecord.Queries.SimpleQuery"/>, as we do not perform the
            conversion of the query results to an array.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPager.Paginate(System.Int32,System.Type,System.String,System.Object[])">
            <summary>
            Paginates using an <see cref="T:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableSimpleQuery"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPager.Paginate(System.Int32,System.Type,NHibernate.Expression.Order[])">
            <summary>
            Paginates using an <see cref="T:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableCriteria"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPager.Paginate(System.Int32,System.Type,NHibernate.Expression.Order[],NHibernate.Expression.ICriterion[])">
            <summary>
            Paginates using an <see cref="T:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPaginableCriteria"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.Pagination.ARPager.Paginate(System.Int32,Castle.MonoRail.ActiveRecordSupport.Pagination.IARPaginable)">
            <summary>
            Paginates using the specified <see cref="T:Castle.MonoRail.ActiveRecordSupport.Pagination.IARPaginable"/>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.ActiveRecordSupport.ARDataBindAttribute">
            <summary>
            Extends DataBindAttribute with ActiveRecord specific functionallity
            </summary>
        </member>
        <member name="P:Castle.MonoRail.ActiveRecordSupport.ARDataBindAttribute.Validate">
            <summary>
            When true performs automatic validation of any class
            that inherit from <see cref="T:Castle.ActiveRecord.ActiveRecordValidationBase"/>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.ActiveRecordSupport.ARDataBindAttribute.AutoPersist">
            <summary>
            When true automatically saves any record
            that inherit from <see cref="T:Castle.ActiveRecord.ActiveRecordBase"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.ActiveRecordSupport.ARDataBinder">
            <summary>
            Extends DataBinder class with some ActiveRecord specific functionallity
            for example by specifying an "autoload" attribute to your form params
            this class will automatically load the database record before binding
            any properties values.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute">
            <summary>
            This attribute tells <see cref="T:Castle.MonoRail.ActiveRecordSupport.ARSmartDispatcherController"/>
            to fetches the ActiveRecord based on its Primary Key.
            </summary>
            <remarks>
            The <see cref="T:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute"/> only loads an instance
            based on the primary key value obtained from <see cref="P:Castle.MonoRail.Framework.IRailsEngineContext.Params"/>
            <para>For example:</para>
            <code>
            public class CustomerController : ARSmartDispatcherController
            {
                public void UpdateCustomerLocation([ARFetch("customer.id")] Customer customer, [ARFetch("location.id")] Location location)
                {
                  customer.Location = location;
                  customer.Save();
                  
                  RedirectToAction("index");
                }
            }
            </code>
            The code above assumes that you have the fields 
            <c>customer.id</c> and <c>location.id</c> on the form being
            submitted. 
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs an <see cref="T:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute"/> 
            specifying the parameter name and the create and require behavior
            </summary>
            <param name="requestParameterName">The parameter name to be read from the request</param>
            <param name="create"><c>true</c> if you want an instance even when the record is not found</param>
            <param name="required"><c>true</c> if you want an exception if the record is not found</param>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute.#ctor">
            <summary>
            Constructs an <see cref="T:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute"/> using the
            parameter name as the <see cref="P:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute.RequestParameterName"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute.#ctor(System.String)">
            <summary>
            Constructs an <see cref="T:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute"/> specifing the
            parameter name
            <seealso cref="P:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute.RequestParameterName"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructs an <see cref="T:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute"/> using the
            parameter name as the <see cref="P:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute.RequestParameterName"/>
            and the create and require behavior
            </summary>
            <param name="create"><c>true</c> if you want an instance even when the record is not found</param>
            <param name="require"><c>true</c> if you want an exception if the record is not found</param>
        </member>
        <member name="P:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute.RequestParameterName">
            <summary>
            The parameter name to be read from the request. The parameter value will 
            be used as the primary key value to load the target object instance.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute.Create">
            <summary>
            When set to <c>true</c> an instance of
            the target type will be created if the record 
            is not found
            </summary>
        </member>
        <member name="P:Castle.MonoRail.ActiveRecordSupport.ARFetchAttribute.Required">
            <summary>
            When set to <c>true</c> the record must be found
            or an exception will be thrown
            </summary>
        </member>
        <member name="T:Castle.MonoRail.ActiveRecordSupport.ARSmartDispatcherController">
            <summary>
            Extends the <see cref="T:Castle.MonoRail.Framework.SmartDispatcherController"/> 
            with ActiveRecord specific functionality
            </summary>
        </member>
        <member name="M:Castle.MonoRail.ActiveRecordSupport.ARSmartDispatcherController.BuildMethodArguments(System.Reflection.ParameterInfo[],Castle.MonoRail.Framework.IRequest)">
            <summary>
            Check if any method argument is associated with an ARDataBinderAttribute
            that has the Validate property set to true,
            and perform automatic validation for it (as long it inherit from ActiveRecordValidationBase)
            </summary>
        </member>
    </members>
</doc>

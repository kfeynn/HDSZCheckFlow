// 
// Generated by ActiveRecord Generator
// 
//
namespace HDSZCheckFlow.Entiy
{
    using Castle.ActiveRecord;
	using Castle.ActiveRecord.Queries;
    
    
    [ActiveRecord("ApplySheet_Annex")]
    public class ApplySheetAnnex : ActiveRecordBase
    {
        
        private int _applySheetAnnexPk;
        
        private int _applySheetHeadPk;

		private int _finallyCheckPk;
        
        private string _fileName;
        
        [PrimaryKey(PrimaryKeyType.Native, "ApplySheet_Annex_pk")]
        public int ApplySheetAnnexPk
        {
            get
            {
                return this._applySheetAnnexPk;
            }
            set
            {
                this._applySheetAnnexPk = value;
            }
        }
        
        [Property(Column="ApplySheetHead_Pk")]
        public int ApplySheetHeadPk
        {
            get
            {
                return this._applySheetHeadPk;
            }
            set
            {
                this._applySheetHeadPk = value;
            }
        }

		[Property(Column="FinallyCheck_Pk")]
		public int FinallyCheckPk
		{
			get
			{
				return this._finallyCheckPk;
			}
			set
			{
				this._finallyCheckPk = value;
			}
		}
        
        [Property()]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                this._fileName = value;
            }
        }
        
        public static void DeleteAll()
        {
            ActiveRecordBase.DeleteAll(typeof(ApplySheetAnnex));
        }
        
        public static ApplySheetAnnex[] FindAll()
        {
            return ((ApplySheetAnnex[])(ActiveRecordBase.FindAll(typeof(ApplySheetAnnex))));
        }
        
        public static ApplySheetAnnex Find(int ApplySheetAnnexPk)
        {
            return ((ApplySheetAnnex)(ActiveRecordBase.FindByPrimaryKey(typeof(ApplySheetAnnex), ApplySheetAnnexPk,false)));
        }

		public static ApplySheetAnnex FindByApplyHeadPkAndFileName(int applyHeadPk,string FileName)
		{
			SimpleQuery query =new SimpleQuery(typeof(ApplySheetAnnex),@"from ApplySheetAnnex o where o.ApplySheetHeadPk=? and o.FileName=?",applyHeadPk,FileName);
			ApplySheetAnnex[] applySheetAnnexs =(ApplySheetAnnex[]) ExecuteQuery(query);
			if(applySheetAnnexs!=null && applySheetAnnexs.Length>0)
			{
				return applySheetAnnexs[0];
			}
			else
			{
				return null;
			}
		}

		public static ApplySheetAnnex FindByApplyHeadPkAndFileNameForFinallyCheck(int FinallyCheckId,string FileName)
		{
			SimpleQuery query =new SimpleQuery(typeof(ApplySheetAnnex),@"from ApplySheetAnnex o where o.FinallyCheckPk=? and o.FileName=?",FinallyCheckId,FileName);
			ApplySheetAnnex[] applySheetAnnexs =(ApplySheetAnnex[]) ExecuteQuery(query);
			if(applySheetAnnexs!=null && applySheetAnnexs.Length>0)
			{
				return applySheetAnnexs[0];
			}
			else
			{
				return null;
			}
		}

		public static ApplySheetAnnex[] FindByApplyHeadPk(int applyHeadPk)
		{
			SimpleQuery query =new SimpleQuery(typeof(ApplySheetAnnex),@"from ApplySheetAnnex o where o.ApplySheetHeadPk=? ",applyHeadPk);
			ApplySheetAnnex[] applySheetAnnexs =(ApplySheetAnnex[]) ExecuteQuery(query);
			return applySheetAnnexs;
		}

		public static ApplySheetAnnex[] FindByFinallyCheckId(int FinallyCheckId)
		{
			SimpleQuery query =new SimpleQuery(typeof(ApplySheetAnnex),@"from ApplySheetAnnex o where o.FinallyCheckPk=? ",FinallyCheckId);
			ApplySheetAnnex[] applySheetAnnexs =(ApplySheetAnnex[]) ExecuteQuery(query);
			return applySheetAnnexs;
		}

    }
}

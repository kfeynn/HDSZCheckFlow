// 
// Generated by ActiveRecord Generator
// 
//
namespace HDSZCheckFlow.Entiy
{
    using Castle.ActiveRecord;
	using Castle.ActiveRecord.Queries;
    
    
    [ActiveRecord("Base_AccountSubject")]
    public class BaseAccountSubject : ActiveRecordBase
    {
        
        private string _accountSubjectPk;
        
        private string _subjectCode;
        
        private string _subjectName;
        
        private string _subjectLevel;
        
        private string _isEnd;
        
        private string _sealFlag;
        
        private System.Decimal _dR;
        
        private string _dispname;
        
        [PrimaryKey(PrimaryKeyType.Native, "AccountSubject_pk")]
        public string AccountSubjectPk
        {
            get
            {
                return this._accountSubjectPk;
            }
            set
            {
                this._accountSubjectPk = value;
            }
        }
        
        [Property()]
        public string SubjectCode
        {
            get
            {
                return this._subjectCode;
            }
            set
            {
                this._subjectCode = value;
            }
        }
        
        [Property()]
        public string SubjectName
        {
            get
            {
                return this._subjectName;
            }
            set
            {
                this._subjectName = value;
            }
        }
        
        [Property()]
        public string SubjectLevel
        {
            get
            {
                return this._subjectLevel;
            }
            set
            {
                this._subjectLevel = value;
            }
        }
        
        [Property()]
        public string IsEnd
        {
            get
            {
                return this._isEnd;
            }
            set
            {
                this._isEnd = value;
            }
        }
        
        [Property()]
        public string SealFlag
        {
            get
            {
                return this._sealFlag;
            }
            set
            {
                this._sealFlag = value;
            }
        }
        
        [Property()]
        public System.Decimal DR
        {
            get
            {
                return this._dR;
            }
            set
            {
                this._dR = value;
            }
        }
        
        [Property()]
        public string Dispname
        {
            get
            {
                return this._dispname;
            }
            set
            {
                this._dispname = value;
            }
        }
        
        public static void DeleteAll()
        {
            ActiveRecordBase.DeleteAll(typeof(BaseAccountSubject));
        }
        
        public static BaseAccountSubject[] FindAll()
        {
            return ((BaseAccountSubject[])(ActiveRecordBase.FindAll(typeof(BaseAccountSubject))));
        }
        
        public static BaseAccountSubject Find(string AccountSubjectPk)
        {
            return ((BaseAccountSubject)(ActiveRecordBase.FindByPrimaryKey(typeof(BaseAccountSubject), AccountSubjectPk,false)));
        }

		public static BaseAccountSubject FindByCode(string subjectCode)
		{
			SimpleQuery query = new SimpleQuery(typeof(BaseAccountSubject),@"from BaseAccountSubject o where o.SubjectCode=?",subjectCode);
			BaseAccountSubject[] baseAccountSubject = (BaseAccountSubject[])ExecuteQuery(query);
			if(baseAccountSubject!=null && baseAccountSubject.Length>0)
			{
				return baseAccountSubject[0];
			}
			else
			{
				return null;
			}
		}
    }
}

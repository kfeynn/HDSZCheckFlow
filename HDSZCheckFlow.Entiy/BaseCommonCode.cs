// 
// Generated by ActiveRecord Generator
// 
//
namespace HDSZCheckFlow.Entiy
{
    using Castle.ActiveRecord;
	using Castle.ActiveRecord.Queries;
    
    
    [ActiveRecord("Base_CommonCode")]
    public class BaseCommonCode : ActiveRecordBase
    {
        
        private int _iD;
        
        private string _codeType;
        
        private string _code;
        
        private string _codeName;
        
        private string _codeTypeMemo;
        
        private int _showOrder;
        
        [PrimaryKey(PrimaryKeyType.Native)]
        public int ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                this._iD = value;
            }
        }
        
        [Property()]
        public string CodeType
        {
            get
            {
                return this._codeType;
            }
            set
            {
                this._codeType = value;
            }
        }
        
        [Property()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                this._code = value;
            }
        }
        
        [Property()]
        public string CodeName
        {
            get
            {
                return this._codeName;
            }
            set
            {
                this._codeName = value;
            }
        }
        
        [Property()]
        public string CodeTypeMemo
        {
            get
            {
                return this._codeTypeMemo;
            }
            set
            {
                this._codeTypeMemo = value;
            }
        }
        
        [Property()]
        public int ShowOrder
        {
            get
            {
                return this._showOrder;
            }
            set
            {
                this._showOrder = value;
            }
        }
        
        public static void DeleteAll()
        {
            ActiveRecordBase.DeleteAll(typeof(BaseCommonCode));
        }
        
        public static BaseCommonCode[] FindAll()
        {
            return ((BaseCommonCode[])(ActiveRecordBase.FindAll(typeof(BaseCommonCode))));
        }
        
        public static BaseCommonCode Find(int ID)
        {
            return ((BaseCommonCode)(ActiveRecordBase.FindByPrimaryKey(typeof(BaseCommonCode), ID,false)));
        }

		public static BaseCommonCode FindByCodeType(string codeType)
		{
			SimpleQuery query=new SimpleQuery(typeof(BaseCommonCode),@"from BaseCommonCode o where o.CodeType = ? ",codeType);
			BaseCommonCode[] baseCommonCode=(BaseCommonCode[])ExecuteQuery(query);
			if(baseCommonCode!=null && baseCommonCode.Length>0)
			{
				return baseCommonCode[0];
			}
			else
			{
				return null;
			}
		}
    }
}

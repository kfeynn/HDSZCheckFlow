// 
// Generated by ActiveRecord Generator
// 
//
namespace HDSZCheckFlow.Entiy
{
    using Castle.ActiveRecord;
	using Castle.ActiveRecord.Queries;
    
    
	[ActiveRecord("Base_inventory")]
	public class Baseinventory : ActiveRecordBase
	{
    
		private string _invPk;
    
		private string _invClassPk;
    
		private string _invCode;
    
		private string _invName;
    
		private string _iNVSPEC;
    
		private string _iNVTYPE;
    
		private string _mEASNAME;
    
		private System.Decimal _planPrice;
    
		private string _currTypeCode;
    
		private System.Decimal _originalcurPrice;
    
		private System.DateTime _orderDate;
    
		[PrimaryKey(PrimaryKeyType.Native, "inv_pk")]
		public string InvPk
		{
			get
			{
				return this._invPk;
			}
			set
			{
				this._invPk = value;
			}
		}
    
		[Property(Column="InvClass_pk")]
		public string InvClassPk
		{
			get
			{
				return this._invClassPk;
			}
			set
			{
				this._invClassPk = value;
			}
		}
    
		[Property()]
		public string InvCode
		{
			get
			{
				return this._invCode;
			}
			set
			{
				this._invCode = value;
			}
		}
    
		[Property()]
		public string InvName
		{
			get
			{
				return this._invName;
			}
			set
			{
				this._invName = value;
			}
		}
    
		[Property()]
		public string INVSPEC
		{
			get
			{
				return this._iNVSPEC;
			}
			set
			{
				this._iNVSPEC = value;
			}
		}
    
		[Property()]
		public string INVTYPE
		{
			get
			{
				return this._iNVTYPE;
			}
			set
			{
				this._iNVTYPE = value;
			}
		}
    
		[Property()]
		public string MEASNAME
		{
			get
			{
				return this._mEASNAME;
			}
			set
			{
				this._mEASNAME = value;
			}
		}
    
		[Property()]
		public System.Decimal PlanPrice
		{
			get
			{
				return this._planPrice;
			}
			set
			{
				this._planPrice = value;
			}
		}
    
		[Property()]
		public string CurrTypeCode
		{
			get
			{
				return this._currTypeCode;
			}
			set
			{
				this._currTypeCode = value;
			}
		}
    
		[Property()]
		public System.Decimal OriginalcurPrice
		{
			get
			{
				return this._originalcurPrice;
			}
			set
			{
				this._originalcurPrice = value;
			}
		}
    
		[Property()]
		public System.DateTime OrderDate
		{
			get
			{
				return this._orderDate;
			}
			set
			{
				this._orderDate = value;
			}
		}
    
		public static void DeleteAll()
		{
			ActiveRecordBase.DeleteAll(typeof(Baseinventory));
		}
    
		public static Baseinventory[] FindAll()
		{
			return ((Baseinventory[])(ActiveRecordBase.FindAll(typeof(Baseinventory))));
		}
    
		public static Baseinventory Find(string InvPk)
		{
			return ((Baseinventory)(ActiveRecordBase.FindByPrimaryKey(typeof(Baseinventory), InvPk)));
		}

		public static Baseinventory FindByCode(string invCode)
		{
			SimpleQuery query=new SimpleQuery(typeof(Baseinventory),@"from Baseinventory o where o.InvCode=?",invCode);
			Baseinventory[] baseinventorys = (Baseinventory[])ExecuteQuery(query);
			if(baseinventorys != null && baseinventorys.Length>0)
			{
				return baseinventorys[0];
			}
			else
			{
				return null;
			}
		}
	}

}

// 
// Generated by ActiveRecord Generator
// 
//
namespace HDSZCheckFlow.Entiy
{
    using Castle.ActiveRecord;
	using Castle.ActiveRecord.Queries;
    
    
    [ActiveRecord("CheckFlowInCompany_head")]
    public class CheckFlowInCompanyhead : ActiveRecordBase
    {
        
        private int _checkFlowInCompanyHeadPk;
        
        private string _flowName;
        
        private string _flowDsc;
        
        private int _isStop;
        
        private int _isValid;
        
        private string _flowCode;
        
        [PrimaryKey(PrimaryKeyType.Native, "CheckFlowInCompany_Head_pk")]
        public int CheckFlowInCompanyHeadPk
        {
            get
            {
                return this._checkFlowInCompanyHeadPk;
            }
            set
            {
                this._checkFlowInCompanyHeadPk = value;
            }
        }
        
        [Property()]
        public string FlowName
        {
            get
            {
                return this._flowName;
            }
            set
            {
                this._flowName = value;
            }
        }
        
        [Property()]
        public string FlowDsc
        {
            get
            {
                return this._flowDsc;
            }
            set
            {
                this._flowDsc = value;
            }
        }
        
        [Property()]
        public int IsStop
        {
            get
            {
                return this._isStop;
            }
            set
            {
                this._isStop = value;
            }
        }
        
        [Property()]
        public int IsValid
        {
            get
            {
                return this._isValid;
            }
            set
            {
                this._isValid = value;
            }
        }
        
        [Property()]
        public string FlowCode
        {
            get
            {
                return this._flowCode;
            }
            set
            {
                this._flowCode = value;
            }
        }
        
        public static void DeleteAll()
        {
            ActiveRecordBase.DeleteAll(typeof(CheckFlowInCompanyhead));
        }
        
        public static CheckFlowInCompanyhead[] FindAll()
        {
            return ((CheckFlowInCompanyhead[])(ActiveRecordBase.FindAll(typeof(CheckFlowInCompanyhead))));
        }
        
        public static CheckFlowInCompanyhead Find(int CheckFlowInCompanyHeadPk)
        {
            return ((CheckFlowInCompanyhead)(ActiveRecordBase.FindByPrimaryKey(typeof(CheckFlowInCompanyhead), CheckFlowInCompanyHeadPk,false)));
        }

		public static CheckFlowInCompanyhead FindByFlowCode(string FlowCode)
		{
			SimpleQuery query=new SimpleQuery(typeof(CheckFlowInCompanyhead),@"from CheckFlowInCompanyhead o where o.FlowCode=? ",FlowCode);
			CheckFlowInCompanyhead[] Values=(CheckFlowInCompanyhead[]) ExecuteQuery(query);
			if(Values!=null && Values.Length>0)
			{
				return Values[0];
			}
			else
			{
				return null;
			}
		}
    }
}

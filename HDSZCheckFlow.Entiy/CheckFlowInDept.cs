// 
// Generated by ActiveRecord Generator
// 
//
namespace HDSZCheckFlow.Entiy
{
    using Castle.ActiveRecord;
	using Castle.ActiveRecord.Queries;
    
    
    [ActiveRecord("CheckFlowInDept")]
    public class CheckFlowInDept : ActiveRecordBase
    {
        
        private int _checkFlowInDeptPk;
        
        private string _deptCode;
        
        private string _deptClassCode;
        
        private int _checkSetp;
        
        private int _isLastStep;
        
        private string _checkRoleCode;
        
        private string _checkPersonCode;
        
        private string _checkPersonName;
        
        [PrimaryKey(PrimaryKeyType.Native, "CheckFlowInDept_pk")]
        public int CheckFlowInDeptPk
        {
            get
            {
                return this._checkFlowInDeptPk;
            }
            set
            {
                this._checkFlowInDeptPk = value;
            }
        }
        
        [Property()]
        public string DeptCode
        {
            get
            {
                return this._deptCode;
            }
            set
            {
                this._deptCode = value;
            }
        }
        
        [Property()]
        public string DeptClassCode
        {
            get
            {
                return this._deptClassCode;
            }
            set
            {
                this._deptClassCode = value;
            }
        }
        
        [Property()]
        public int CheckSetp
        {
            get
            {
                return this._checkSetp;
            }
            set
            {
                this._checkSetp = value;
            }
        }
        
        [Property()]
        public int IsLastStep
        {
            get
            {
                return this._isLastStep;
            }
            set
            {
                this._isLastStep = value;
            }
        }
        
        [Property()]
        public string CheckRoleCode
        {
            get
            {
                return this._checkRoleCode;
            }
            set
            {
                this._checkRoleCode = value;
            }
        }
        
        [Property()]
        public string CheckPersonCode
        {
            get
            {
                return this._checkPersonCode;
            }
            set
            {
                this._checkPersonCode = value;
            }
        }
        
        [Property()]
        public string CheckPersonName
        {
            get
            {
                return this._checkPersonName;
            }
            set
            {
                this._checkPersonName = value;
            }
        }
        
        public static void DeleteAll()
        {
            ActiveRecordBase.DeleteAll(typeof(CheckFlowInDept));
        }
        
        public static CheckFlowInDept[] FindAll()
        {
            return ((CheckFlowInDept[])(ActiveRecordBase.FindAll(typeof(CheckFlowInDept))));
        }
        
        public static CheckFlowInDept Find(int CheckFlowInDeptPk)
        {
            return ((CheckFlowInDept)(ActiveRecordBase.FindByPrimaryKey(typeof(CheckFlowInDept), CheckFlowInDeptPk,false)));
        }

		public static CheckFlowInDept FindStep(string  deptCode, int checkStep)
		{
			SimpleQuery query=new SimpleQuery(typeof(CheckFlowInDept) ,@"from CheckFlowInDept o where o.DeptCode=? and o.CheckSetp=? order by CheckSetp asc ",deptCode,checkStep);
			CheckFlowInDept[] CheckFlowInDepts=(CheckFlowInDept[])ExecuteQuery(query);
			if(CheckFlowInDepts!=null && CheckFlowInDepts.Length>0)
			{
				return CheckFlowInDepts[0];
			}
			else
			{
				return null;
			}
		}

		public static CheckFlowInDept FindNextStep(string  deptCode, int checkStep)
		{
			SimpleQuery query=new SimpleQuery(typeof(CheckFlowInDept) ,@"from CheckFlowInDept o where o.DeptCode=? and o.CheckSetp>? order by CheckSetp asc ",deptCode,checkStep);
			CheckFlowInDept[] NextSteps=(CheckFlowInDept[])ExecuteQuery(query);
			if(NextSteps!=null && NextSteps.Length>0)
			{
				return NextSteps[0];
			}
			else
			{
				return null;
			}
		}

		public static CheckFlowInDept[] FindCheckFlowInDeptByUserCode(string UserCode)
		{
			//根据用户Code查找 此用户的部门角色
			SimpleQuery query=new SimpleQuery(typeof(CheckFlowInDept),@"from CheckFlowInDept o where o.CheckPersonCode=?",UserCode);
			CheckFlowInDept[] checkFlowInDept=(CheckFlowInDept[])ExecuteQuery(query);
			return checkFlowInDept;
		}

		public static CheckFlowInDept[] Find(string  deptCode)
		{
			SimpleQuery query = new SimpleQuery(typeof(CheckFlowInDept),@"from CheckFlowInDept o where o.DeptCode=?  order by CheckSetp asc ",deptCode);
			CheckFlowInDept[] checkFlowInDept=(CheckFlowInDept[])ExecuteQuery(query);
			return checkFlowInDept;
		}

    }
}

// 
// Generated by ActiveRecord Generator
// 
//
namespace HDSZCheckFlow.Entiy
{
    using Castle.ActiveRecord;
	using Castle.ActiveRecord.Queries;
    
    
    [ActiveRecord("CheckFlowInCompany_Body")]
    public class CheckFlowInCompanyBody : ActiveRecordBase
    {
        
        private int _checkFlowInCompanyBodyPk;
        
        private int _checkFlowInCompanyHeadPk;
        
        private int _checkStep;
        
        private int _isLastStep;
        
        private string _checkRoleCode;
        
        [PrimaryKey(PrimaryKeyType.Native, "CheckFlowInCompany_Body_pk")]
        public int CheckFlowInCompanyBodyPk
        {
            get
            {
                return this._checkFlowInCompanyBodyPk;
            }
            set
            {
                this._checkFlowInCompanyBodyPk = value;
            }
        }
        
        [Property(Column="CheckFlowInCompany_Head_pk")]
        public int CheckFlowInCompanyHeadPk
        {
            get
            {
                return this._checkFlowInCompanyHeadPk;
            }
            set
            {
                this._checkFlowInCompanyHeadPk = value;
            }
        }
        
        [Property()]
        public int CheckStep
        {
            get
            {
                return this._checkStep;
            }
            set
            {
                this._checkStep = value;
            }
        }
        
        [Property()]
        public int IsLastStep
        {
            get
            {
                return this._isLastStep;
            }
            set
            {
                this._isLastStep = value;
            }
        }
        
        [Property()]
        public string CheckRoleCode
        {
            get
            {
                return this._checkRoleCode;
            }
            set
            {
                this._checkRoleCode = value;
            }
        }
        
        public static void DeleteAll()
        {
            ActiveRecordBase.DeleteAll(typeof(CheckFlowInCompanyBody));
        }
        
        public static CheckFlowInCompanyBody[] FindAll()
        {
            return ((CheckFlowInCompanyBody[])(ActiveRecordBase.FindAll(typeof(CheckFlowInCompanyBody))));
        }
        
        public static CheckFlowInCompanyBody Find(int CheckFlowInCompanyBodyPk)
        {
            return ((CheckFlowInCompanyBody)(ActiveRecordBase.FindByPrimaryKey(typeof(CheckFlowInCompanyBody), CheckFlowInCompanyBodyPk,false)));
        }

		public static CheckFlowInCompanyBody FindStep(int FlowSheetHeadPk,int CheckStep)
		{
			SimpleQuery query =new SimpleQuery(typeof(CheckFlowInCompanyBody),@"from CheckFlowInCompanyBody o where o.CheckFlowInCompanyHeadPk=? and o.CheckStep=? order by CheckStep asc ",FlowSheetHeadPk,CheckStep);
			CheckFlowInCompanyBody[] checkFlowInCompanyBodys=(CheckFlowInCompanyBody[])ExecuteQuery(query);
			if(checkFlowInCompanyBodys!=null && checkFlowInCompanyBodys.Length>0)
			{
				return checkFlowInCompanyBodys[0];
			}
			else
			{
				return null;
			}
		}

		public static CheckFlowInCompanyBody FindNextStep(int FlowSheetHeadPk,int CheckStep)
		{
			SimpleQuery query =new SimpleQuery(typeof(CheckFlowInCompanyBody),@"from CheckFlowInCompanyBody o where o.CheckFlowInCompanyHeadPk=? and o.CheckStep>? order by CheckStep asc ",FlowSheetHeadPk,CheckStep);
			CheckFlowInCompanyBody[] checkFlowInCompanyBodys=(CheckFlowInCompanyBody[])ExecuteQuery(query);
			if(checkFlowInCompanyBodys!=null && checkFlowInCompanyBodys.Length>0)
			{
				return checkFlowInCompanyBodys[0];
			}
			else
			{
				return null;
			}
		}

		public static CheckFlowInCompanyBody[] FindByFlowHeadPk(int FlowSheetHeadPk)
		{
			SimpleQuery query=new SimpleQuery(typeof(CheckFlowInCompanyBody),@"from CheckFlowInCompanyBody o where o.CheckFlowInCompanyHeadPk=? order by CheckStep asc ",FlowSheetHeadPk);
			CheckFlowInCompanyBody[] checkFlowInCompanyBodys=(CheckFlowInCompanyBody[])ExecuteQuery(query);
			return checkFlowInCompanyBodys;
		}

    }
}

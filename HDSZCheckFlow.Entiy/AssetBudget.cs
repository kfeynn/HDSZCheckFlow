// 
// Generated by ActiveRecord Generator
// 
//
namespace HDSZCheckFlow.Entiy
{
	using Castle.ActiveRecord;
	using Castle.ActiveRecord.Queries;
    
    
    [ActiveRecord("Asset_Budget")]
    public class AssetBudget : ActiveRecordBase
    {
        
        private int _id;
        
        private int _iyear;
        
        private string _deptCode;
        
        private string _itemName;
        
        private string _subjectName;
        
        private int _isNewAdd;
        
        private int _number;
        
        private System.Decimal _unitPrice;
        
        private System.Decimal _budgetMoney;
        
        private string _baseDecisionDeptCode;
        
        private System.Decimal _checkMoney;
        
        private System.Decimal _readyPay;
        
        private System.Decimal _totalAllowOutMoney;
        
        private string _reMark;
        
        [PrimaryKey(PrimaryKeyType.Native)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [Property()]
        public int Iyear
        {
            get
            {
                return this._iyear;
            }
            set
            {
                this._iyear = value;
            }
        }
        
        [Property()]
        public string DeptCode
        {
            get
            {
                return this._deptCode;
            }
            set
            {
                this._deptCode = value;
            }
        }
        
        [Property()]
        public string ItemName
        {
            get
            {
                return this._itemName;
            }
            set
            {
                this._itemName = value;
            }
        }
        
        [Property()]
        public string SubjectName
        {
            get
            {
                return this._subjectName;
            }
            set
            {
                this._subjectName = value;
            }
        }
        
        [Property()]
        public int IsNewAdd
        {
            get
            {
                return this._isNewAdd;
            }
            set
            {
                this._isNewAdd = value;
            }
        }
        
        [Property()]
        public int Number
        {
            get
            {
                return this._number;
            }
            set
            {
                this._number = value;
            }
        }
        
        [Property()]
        public System.Decimal UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                this._unitPrice = value;
            }
        }
        
        [Property()]
        public System.Decimal BudgetMoney
        {
            get
            {
                return this._budgetMoney;
            }
            set
            {
                this._budgetMoney = value;
            }
        }
        
        [Property(Column="Base_decisionDept_code")]
        public string BaseDecisionDeptCode
        {
            get
            {
                return this._baseDecisionDeptCode;
            }
            set
            {
                this._baseDecisionDeptCode = value;
            }
        }
        
        [Property()]
        public System.Decimal CheckMoney
        {
            get
            {
                return this._checkMoney;
            }
            set
            {
                this._checkMoney = value;
            }
        }
        
        [Property()]
        public System.Decimal ReadyPay
        {
            get
            {
                return this._readyPay;
            }
            set
            {
                this._readyPay = value;
            }
        }
        
        [Property()]
        public System.Decimal TotalAllowOutMoney
        {
            get
            {
                return this._totalAllowOutMoney;
            }
            set
            {
                this._totalAllowOutMoney = value;
            }
        }
        
        [Property()]
        public string ReMark
        {
            get
            {
                return this._reMark;
            }
            set
            {
                this._reMark = value;
            }
        }
        
        public static void DeleteAll()
        {
            ActiveRecordBase.DeleteAll(typeof(AssetBudget));
        }
        
        public static AssetBudget[] FindAll()
        {
            return ((AssetBudget[])(ActiveRecordBase.FindAll(typeof(AssetBudget))));
        }
        
        public static AssetBudget Find(int Id)
        {
            return ((AssetBudget)(ActiveRecordBase.FindByPrimaryKey(typeof(AssetBudget), Id,false)));
        }

		//根据 年份，部门，项目，具体内容 找对应预算。
		public static AssetBudget FindByYearAndItem(int iYear,string Item,string deptCode,string subjectName)
		{
			SimpleQuery query=new SimpleQuery(typeof(AssetBudget),@"from AssetBudget o where o.Iyear= ? and o.ItemName= ? and o.DeptCode= ? and o.SubjectName=? ",iYear,Item,deptCode,subjectName);
			AssetBudget []budGet = (AssetBudget[])ExecuteQuery(query); 
			if(budGet!=null && budGet.Length>0)
			{
				return budGet[0];
			}
			else
			{
				return null;
			}
		}

		//根据 年份，预算部门，项目找对应预算。
		public static AssetBudget FindByYearAndItem(int iYear,string ItemName,string BudgetDept)
		{
			SimpleQuery query=new SimpleQuery(typeof(AssetBudget),@"from AssetBudget o where o.Iyear= ? and o.ItemName= ? and o.DeptCode= ? ",iYear,ItemName,BudgetDept);
			AssetBudget []budGet = (AssetBudget[])ExecuteQuery(query); 

			if(budGet!=null && budGet.Length>0)
			{
				return budGet[0];
			}
			else
			{
				return null;
			}
		}

		//根据 年份，预算部门，项目找对应预算。
		public static AssetBudget[] FindByYearBudgetDeptAndItem(int iYear,string ItemName,string BudgetDept)
		{
			SimpleQuery query=new SimpleQuery(typeof(AssetBudget),@"from AssetBudget o where o.Iyear= ? and o.ItemName= ? and o.DeptCode= ? ",iYear,ItemName,BudgetDept);
			return (AssetBudget[])ExecuteQuery(query); 
		}

		//根据 项目找对应预算。(2011-12-05 liyang)
		public static AssetBudget[] FindByItemName(string itemName)
		{
			SimpleQuery query=new SimpleQuery(typeof(AssetBudget),@"from AssetBudget o where  o.ItemName= ? ",itemName);
			return (AssetBudget[])ExecuteQuery(query); 
		}

		//根据 部门找对应预算。(2011-12-05 liyang)
		public static AssetBudget[] FindByDept(string deptCode)
		{
			SimpleQuery query=new SimpleQuery(typeof(AssetBudget),@"from AssetBudget o where  o.DeptCode in (?) ",deptCode);
			return (AssetBudget[])ExecuteQuery(query); 
		}
 

    }
}

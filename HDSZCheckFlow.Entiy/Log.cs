// 
// Generated by ActiveRecord Generator
// 
//
namespace HDSZCheckFlow.Entiy
{
    using Castle.ActiveRecord;
    
    
    [ActiveRecord("Log")]
    public class Log : ActiveRecordBase
    {
        
        private int _id;
        
        private System.DateTime _date;
        
        private string _thread;
        
        private string _level;
        
        private string _logger;
        
        private string _message;
        
        private string _exception;
        
        private string _context;
        
        [PrimaryKey(PrimaryKeyType.Native)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [Property()]
        public System.DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                this._date = value;
            }
        }
        
        [Property()]
        public string Thread
        {
            get
            {
                return this._thread;
            }
            set
            {
                this._thread = value;
            }
        }
        
        [Property()]
        public string Level
        {
            get
            {
                return this._level;
            }
            set
            {
                this._level = value;
            }
        }
        
        [Property()]
        public string Logger
        {
            get
            {
                return this._logger;
            }
            set
            {
                this._logger = value;
            }
        }
        
        [Property()]
        public string Message
        {
            get
            {
                return this._message;
            }
            set
            {
                this._message = value;
            }
        }
        
        [Property()]
        public string Exception
        {
            get
            {
                return this._exception;
            }
            set
            {
                this._exception = value;
            }
        }
        
        [Property()]
        public string Context
        {
            get
            {
                return this._context;
            }
            set
            {
                this._context = value;
            }
        }
        
        public static void DeleteAll()
        {
            ActiveRecordBase.DeleteAll(typeof(Log));
        }
        
        public static Log[] FindAll()
        {
            return ((Log[])(ActiveRecordBase.FindAll(typeof(Log))));
        }
        
        public static Log Find(int Id)
        {
            return ((Log)(ActiveRecordBase.FindByPrimaryKey(typeof(Log), Id,false)));
        }
    }
}

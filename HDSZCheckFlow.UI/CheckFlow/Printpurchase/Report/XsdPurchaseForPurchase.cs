//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2443
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HDSZCheckFlow.UI.CheckFlow.Printpurchase.Report {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class XsdPurchaseForPurchase : DataSet {
        
        private BaseApplyPurchaseDataTable tableBaseApplyPurchase;
        
        private ApplyCheckRecordDataTable tableApplyCheckRecord;
        
        private ApplyBudgetInfoDataTable tableApplyBudgetInfo;
        
        public XsdPurchaseForPurchase() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected XsdPurchaseForPurchase(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BaseApplyPurchase"] != null)) {
                    this.Tables.Add(new BaseApplyPurchaseDataTable(ds.Tables["BaseApplyPurchase"]));
                }
                if ((ds.Tables["ApplyCheckRecord"] != null)) {
                    this.Tables.Add(new ApplyCheckRecordDataTable(ds.Tables["ApplyCheckRecord"]));
                }
                if ((ds.Tables["ApplyBudgetInfo"] != null)) {
                    this.Tables.Add(new ApplyBudgetInfoDataTable(ds.Tables["ApplyBudgetInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseApplyPurchaseDataTable BaseApplyPurchase {
            get {
                return this.tableBaseApplyPurchase;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyCheckRecordDataTable ApplyCheckRecord {
            get {
                return this.tableApplyCheckRecord;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyBudgetInfoDataTable ApplyBudgetInfo {
            get {
                return this.tableApplyBudgetInfo;
            }
        }
        
        public override DataSet Clone() {
            XsdPurchaseForPurchase cln = ((XsdPurchaseForPurchase)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["BaseApplyPurchase"] != null)) {
                this.Tables.Add(new BaseApplyPurchaseDataTable(ds.Tables["BaseApplyPurchase"]));
            }
            if ((ds.Tables["ApplyCheckRecord"] != null)) {
                this.Tables.Add(new ApplyCheckRecordDataTable(ds.Tables["ApplyCheckRecord"]));
            }
            if ((ds.Tables["ApplyBudgetInfo"] != null)) {
                this.Tables.Add(new ApplyBudgetInfoDataTable(ds.Tables["ApplyBudgetInfo"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableBaseApplyPurchase = ((BaseApplyPurchaseDataTable)(this.Tables["BaseApplyPurchase"]));
            if ((this.tableBaseApplyPurchase != null)) {
                this.tableBaseApplyPurchase.InitVars();
            }
            this.tableApplyCheckRecord = ((ApplyCheckRecordDataTable)(this.Tables["ApplyCheckRecord"]));
            if ((this.tableApplyCheckRecord != null)) {
                this.tableApplyCheckRecord.InitVars();
            }
            this.tableApplyBudgetInfo = ((ApplyBudgetInfoDataTable)(this.Tables["ApplyBudgetInfo"]));
            if ((this.tableApplyBudgetInfo != null)) {
                this.tableApplyBudgetInfo.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "XsdPurchaseForPurchase";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/XsdPurchaseForPurchase.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableBaseApplyPurchase = new BaseApplyPurchaseDataTable();
            this.Tables.Add(this.tableBaseApplyPurchase);
            this.tableApplyCheckRecord = new ApplyCheckRecordDataTable();
            this.Tables.Add(this.tableApplyCheckRecord);
            this.tableApplyBudgetInfo = new ApplyBudgetInfoDataTable();
            this.Tables.Add(this.tableApplyBudgetInfo);
        }
        
        private bool ShouldSerializeBaseApplyPurchase() {
            return false;
        }
        
        private bool ShouldSerializeApplyCheckRecord() {
            return false;
        }
        
        private bool ShouldSerializeApplyBudgetInfo() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void BaseApplyPurchaseRowChangeEventHandler(object sender, BaseApplyPurchaseRowChangeEvent e);
        
        public delegate void ApplyCheckRecordRowChangeEventHandler(object sender, ApplyCheckRecordRowChangeEvent e);
        
        public delegate void ApplyBudgetInfoRowChangeEventHandler(object sender, ApplyBudgetInfoRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseApplyPurchaseDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnApplySheetNo;
            
            private DataColumn columnInventoryCode;
            
            private DataColumn columninvName;
            
            private DataColumn columnName;
            
            private DataColumn columnDeptName;
            
            private DataColumn columnApplyDate;
            
            private DataColumn columnMEASNAME;
            
            private DataColumn columnINVTYPE;
            
            private DataColumn columnApplySheetHead_Pk;
            
            private DataColumn columnNumber;
            
            private DataColumn columnMoney;
            
            private DataColumn columnRMBPrice;
            
            private DataColumn columnsubjectCode;
            
            private DataColumn columnDispname;
            
            private DataColumn columnDeliveryDate;
            
            private DataColumn columnMemo;
            
            internal BaseApplyPurchaseDataTable() : 
                    base("BaseApplyPurchase") {
                this.InitClass();
            }
            
            internal BaseApplyPurchaseDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ApplySheetNoColumn {
                get {
                    return this.columnApplySheetNo;
                }
            }
            
            internal DataColumn InventoryCodeColumn {
                get {
                    return this.columnInventoryCode;
                }
            }
            
            internal DataColumn invNameColumn {
                get {
                    return this.columninvName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DeptNameColumn {
                get {
                    return this.columnDeptName;
                }
            }
            
            internal DataColumn ApplyDateColumn {
                get {
                    return this.columnApplyDate;
                }
            }
            
            internal DataColumn MEASNAMEColumn {
                get {
                    return this.columnMEASNAME;
                }
            }
            
            internal DataColumn INVTYPEColumn {
                get {
                    return this.columnINVTYPE;
                }
            }
            
            internal DataColumn ApplySheetHead_PkColumn {
                get {
                    return this.columnApplySheetHead_Pk;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn MoneyColumn {
                get {
                    return this.columnMoney;
                }
            }
            
            internal DataColumn RMBPriceColumn {
                get {
                    return this.columnRMBPrice;
                }
            }
            
            internal DataColumn subjectCodeColumn {
                get {
                    return this.columnsubjectCode;
                }
            }
            
            internal DataColumn DispnameColumn {
                get {
                    return this.columnDispname;
                }
            }
            
            internal DataColumn DeliveryDateColumn {
                get {
                    return this.columnDeliveryDate;
                }
            }
            
            internal DataColumn MemoColumn {
                get {
                    return this.columnMemo;
                }
            }
            
            public BaseApplyPurchaseRow this[int index] {
                get {
                    return ((BaseApplyPurchaseRow)(this.Rows[index]));
                }
            }
            
            public event BaseApplyPurchaseRowChangeEventHandler BaseApplyPurchaseRowChanged;
            
            public event BaseApplyPurchaseRowChangeEventHandler BaseApplyPurchaseRowChanging;
            
            public event BaseApplyPurchaseRowChangeEventHandler BaseApplyPurchaseRowDeleted;
            
            public event BaseApplyPurchaseRowChangeEventHandler BaseApplyPurchaseRowDeleting;
            
            public void AddBaseApplyPurchaseRow(BaseApplyPurchaseRow row) {
                this.Rows.Add(row);
            }
            
            public BaseApplyPurchaseRow AddBaseApplyPurchaseRow(string ApplySheetNo, string InventoryCode, string invName, string Name, string DeptName, System.DateTime ApplyDate, string MEASNAME, string INVTYPE, System.Decimal Number, System.Decimal Money, System.Decimal RMBPrice, string subjectCode, string Dispname, System.DateTime DeliveryDate, string Memo) {
                BaseApplyPurchaseRow rowBaseApplyPurchaseRow = ((BaseApplyPurchaseRow)(this.NewRow()));
                rowBaseApplyPurchaseRow.ItemArray = new object[] {
                        ApplySheetNo,
                        InventoryCode,
                        invName,
                        Name,
                        DeptName,
                        ApplyDate,
                        MEASNAME,
                        INVTYPE,
                        null,
                        Number,
                        Money,
                        RMBPrice,
                        subjectCode,
                        Dispname,
                        DeliveryDate,
                        Memo};
                this.Rows.Add(rowBaseApplyPurchaseRow);
                return rowBaseApplyPurchaseRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BaseApplyPurchaseDataTable cln = ((BaseApplyPurchaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BaseApplyPurchaseDataTable();
            }
            
            internal void InitVars() {
                this.columnApplySheetNo = this.Columns["ApplySheetNo"];
                this.columnInventoryCode = this.Columns["InventoryCode"];
                this.columninvName = this.Columns["invName"];
                this.columnName = this.Columns["Name"];
                this.columnDeptName = this.Columns["DeptName"];
                this.columnApplyDate = this.Columns["ApplyDate"];
                this.columnMEASNAME = this.Columns["MEASNAME"];
                this.columnINVTYPE = this.Columns["INVTYPE"];
                this.columnApplySheetHead_Pk = this.Columns["ApplySheetHead_Pk"];
                this.columnNumber = this.Columns["Number"];
                this.columnMoney = this.Columns["Money"];
                this.columnRMBPrice = this.Columns["RMBPrice"];
                this.columnsubjectCode = this.Columns["subjectCode"];
                this.columnDispname = this.Columns["Dispname"];
                this.columnDeliveryDate = this.Columns["DeliveryDate"];
                this.columnMemo = this.Columns["Memo"];
            }
            
            private void InitClass() {
                this.columnApplySheetNo = new DataColumn("ApplySheetNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetNo);
                this.columnInventoryCode = new DataColumn("InventoryCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInventoryCode);
                this.columninvName = new DataColumn("invName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninvName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDeptName = new DataColumn("DeptName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeptName);
                this.columnApplyDate = new DataColumn("ApplyDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyDate);
                this.columnMEASNAME = new DataColumn("MEASNAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMEASNAME);
                this.columnINVTYPE = new DataColumn("INVTYPE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnINVTYPE);
                this.columnApplySheetHead_Pk = new DataColumn("ApplySheetHead_Pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_Pk);
                this.columnNumber = new DataColumn("Number", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnMoney = new DataColumn("Money", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMoney);
                this.columnRMBPrice = new DataColumn("RMBPrice", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRMBPrice);
                this.columnsubjectCode = new DataColumn("subjectCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsubjectCode);
                this.columnDispname = new DataColumn("Dispname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDispname);
                this.columnDeliveryDate = new DataColumn("DeliveryDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeliveryDate);
                this.columnMemo = new DataColumn("Memo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMemo);
                this.columnApplySheetHead_Pk.AutoIncrement = true;
                this.columnApplySheetHead_Pk.AllowDBNull = false;
                this.columnApplySheetHead_Pk.ReadOnly = true;
            }
            
            public BaseApplyPurchaseRow NewBaseApplyPurchaseRow() {
                return ((BaseApplyPurchaseRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BaseApplyPurchaseRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BaseApplyPurchaseRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseApplyPurchaseRowChanged != null)) {
                    this.BaseApplyPurchaseRowChanged(this, new BaseApplyPurchaseRowChangeEvent(((BaseApplyPurchaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseApplyPurchaseRowChanging != null)) {
                    this.BaseApplyPurchaseRowChanging(this, new BaseApplyPurchaseRowChangeEvent(((BaseApplyPurchaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseApplyPurchaseRowDeleted != null)) {
                    this.BaseApplyPurchaseRowDeleted(this, new BaseApplyPurchaseRowChangeEvent(((BaseApplyPurchaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseApplyPurchaseRowDeleting != null)) {
                    this.BaseApplyPurchaseRowDeleting(this, new BaseApplyPurchaseRowChangeEvent(((BaseApplyPurchaseRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBaseApplyPurchaseRow(BaseApplyPurchaseRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseApplyPurchaseRow : DataRow {
            
            private BaseApplyPurchaseDataTable tableBaseApplyPurchase;
            
            internal BaseApplyPurchaseRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseApplyPurchase = ((BaseApplyPurchaseDataTable)(this.Table));
            }
            
            public string ApplySheetNo {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyPurchase.ApplySheetNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.ApplySheetNoColumn] = value;
                }
            }
            
            public string InventoryCode {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyPurchase.InventoryCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.InventoryCodeColumn] = value;
                }
            }
            
            public string invName {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyPurchase.invNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.invNameColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyPurchase.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.NameColumn] = value;
                }
            }
            
            public string DeptName {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyPurchase.DeptNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.DeptNameColumn] = value;
                }
            }
            
            public System.DateTime ApplyDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBaseApplyPurchase.ApplyDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.ApplyDateColumn] = value;
                }
            }
            
            public string MEASNAME {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyPurchase.MEASNAMEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.MEASNAMEColumn] = value;
                }
            }
            
            public string INVTYPE {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyPurchase.INVTYPEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.INVTYPEColumn] = value;
                }
            }
            
            public int ApplySheetHead_Pk {
                get {
                    return ((int)(this[this.tableBaseApplyPurchase.ApplySheetHead_PkColumn]));
                }
                set {
                    this[this.tableBaseApplyPurchase.ApplySheetHead_PkColumn] = value;
                }
            }
            
            public System.Decimal Number {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableBaseApplyPurchase.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.NumberColumn] = value;
                }
            }
            
            public System.Decimal Money {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableBaseApplyPurchase.MoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.MoneyColumn] = value;
                }
            }
            
            public System.Decimal RMBPrice {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableBaseApplyPurchase.RMBPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.RMBPriceColumn] = value;
                }
            }
            
            public string subjectCode {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyPurchase.subjectCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.subjectCodeColumn] = value;
                }
            }
            
            public string Dispname {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyPurchase.DispnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.DispnameColumn] = value;
                }
            }
            
            public System.DateTime DeliveryDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBaseApplyPurchase.DeliveryDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.DeliveryDateColumn] = value;
                }
            }
            
            public string Memo {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyPurchase.MemoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyPurchase.MemoColumn] = value;
                }
            }
            
            public bool IsApplySheetNoNull() {
                return this.IsNull(this.tableBaseApplyPurchase.ApplySheetNoColumn);
            }
            
            public void SetApplySheetNoNull() {
                this[this.tableBaseApplyPurchase.ApplySheetNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsInventoryCodeNull() {
                return this.IsNull(this.tableBaseApplyPurchase.InventoryCodeColumn);
            }
            
            public void SetInventoryCodeNull() {
                this[this.tableBaseApplyPurchase.InventoryCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsinvNameNull() {
                return this.IsNull(this.tableBaseApplyPurchase.invNameColumn);
            }
            
            public void SetinvNameNull() {
                this[this.tableBaseApplyPurchase.invNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableBaseApplyPurchase.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableBaseApplyPurchase.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeptNameNull() {
                return this.IsNull(this.tableBaseApplyPurchase.DeptNameColumn);
            }
            
            public void SetDeptNameNull() {
                this[this.tableBaseApplyPurchase.DeptNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyDateNull() {
                return this.IsNull(this.tableBaseApplyPurchase.ApplyDateColumn);
            }
            
            public void SetApplyDateNull() {
                this[this.tableBaseApplyPurchase.ApplyDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsMEASNAMENull() {
                return this.IsNull(this.tableBaseApplyPurchase.MEASNAMEColumn);
            }
            
            public void SetMEASNAMENull() {
                this[this.tableBaseApplyPurchase.MEASNAMEColumn] = System.Convert.DBNull;
            }
            
            public bool IsINVTYPENull() {
                return this.IsNull(this.tableBaseApplyPurchase.INVTYPEColumn);
            }
            
            public void SetINVTYPENull() {
                this[this.tableBaseApplyPurchase.INVTYPEColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableBaseApplyPurchase.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableBaseApplyPurchase.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsMoneyNull() {
                return this.IsNull(this.tableBaseApplyPurchase.MoneyColumn);
            }
            
            public void SetMoneyNull() {
                this[this.tableBaseApplyPurchase.MoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsRMBPriceNull() {
                return this.IsNull(this.tableBaseApplyPurchase.RMBPriceColumn);
            }
            
            public void SetRMBPriceNull() {
                this[this.tableBaseApplyPurchase.RMBPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IssubjectCodeNull() {
                return this.IsNull(this.tableBaseApplyPurchase.subjectCodeColumn);
            }
            
            public void SetsubjectCodeNull() {
                this[this.tableBaseApplyPurchase.subjectCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDispnameNull() {
                return this.IsNull(this.tableBaseApplyPurchase.DispnameColumn);
            }
            
            public void SetDispnameNull() {
                this[this.tableBaseApplyPurchase.DispnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeliveryDateNull() {
                return this.IsNull(this.tableBaseApplyPurchase.DeliveryDateColumn);
            }
            
            public void SetDeliveryDateNull() {
                this[this.tableBaseApplyPurchase.DeliveryDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsMemoNull() {
                return this.IsNull(this.tableBaseApplyPurchase.MemoColumn);
            }
            
            public void SetMemoNull() {
                this[this.tableBaseApplyPurchase.MemoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseApplyPurchaseRowChangeEvent : EventArgs {
            
            private BaseApplyPurchaseRow eventRow;
            
            private DataRowAction eventAction;
            
            public BaseApplyPurchaseRowChangeEvent(BaseApplyPurchaseRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BaseApplyPurchaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyCheckRecordDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCheckComment;
            
            private DataColumn columnIsPass;
            
            private DataColumn columnApplySheetNo;
            
            private DataColumn columnApplyDate;
            
            private DataColumn columnApplySheetHead_Pk;
            
            private DataColumn columnpersonCode;
            
            private DataColumn columnCheckName;
            
            private DataColumn columnIsDisplays;
            
            private DataColumn columnDisplaysPersonCode;
            
            private DataColumn columndisplayName;
            
            private DataColumn columnCheckdate;
            
            private DataColumn columnFullCheckName;
            
            private DataColumn columnCheckRole;
            
            private DataColumn columnCheckRoleName;
            
            internal ApplyCheckRecordDataTable() : 
                    base("ApplyCheckRecord") {
                this.InitClass();
            }
            
            internal ApplyCheckRecordDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CheckCommentColumn {
                get {
                    return this.columnCheckComment;
                }
            }
            
            internal DataColumn IsPassColumn {
                get {
                    return this.columnIsPass;
                }
            }
            
            internal DataColumn ApplySheetNoColumn {
                get {
                    return this.columnApplySheetNo;
                }
            }
            
            internal DataColumn ApplyDateColumn {
                get {
                    return this.columnApplyDate;
                }
            }
            
            internal DataColumn ApplySheetHead_PkColumn {
                get {
                    return this.columnApplySheetHead_Pk;
                }
            }
            
            internal DataColumn personCodeColumn {
                get {
                    return this.columnpersonCode;
                }
            }
            
            internal DataColumn CheckNameColumn {
                get {
                    return this.columnCheckName;
                }
            }
            
            internal DataColumn IsDisplaysColumn {
                get {
                    return this.columnIsDisplays;
                }
            }
            
            internal DataColumn DisplaysPersonCodeColumn {
                get {
                    return this.columnDisplaysPersonCode;
                }
            }
            
            internal DataColumn displayNameColumn {
                get {
                    return this.columndisplayName;
                }
            }
            
            internal DataColumn CheckdateColumn {
                get {
                    return this.columnCheckdate;
                }
            }
            
            internal DataColumn FullCheckNameColumn {
                get {
                    return this.columnFullCheckName;
                }
            }
            
            internal DataColumn CheckRoleColumn {
                get {
                    return this.columnCheckRole;
                }
            }
            
            internal DataColumn CheckRoleNameColumn {
                get {
                    return this.columnCheckRoleName;
                }
            }
            
            public ApplyCheckRecordRow this[int index] {
                get {
                    return ((ApplyCheckRecordRow)(this.Rows[index]));
                }
            }
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowChanged;
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowChanging;
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowDeleted;
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowDeleting;
            
            public void AddApplyCheckRecordRow(ApplyCheckRecordRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyCheckRecordRow AddApplyCheckRecordRow(string CheckComment, string IsPass, string ApplySheetNo, System.DateTime ApplyDate, string personCode, string CheckName, int IsDisplays, string DisplaysPersonCode, string displayName, System.DateTime Checkdate, string FullCheckName, string CheckRole, string CheckRoleName) {
                ApplyCheckRecordRow rowApplyCheckRecordRow = ((ApplyCheckRecordRow)(this.NewRow()));
                rowApplyCheckRecordRow.ItemArray = new object[] {
                        CheckComment,
                        IsPass,
                        ApplySheetNo,
                        ApplyDate,
                        null,
                        personCode,
                        CheckName,
                        IsDisplays,
                        DisplaysPersonCode,
                        displayName,
                        Checkdate,
                        FullCheckName,
                        CheckRole,
                        CheckRoleName};
                this.Rows.Add(rowApplyCheckRecordRow);
                return rowApplyCheckRecordRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyCheckRecordDataTable cln = ((ApplyCheckRecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyCheckRecordDataTable();
            }
            
            internal void InitVars() {
                this.columnCheckComment = this.Columns["CheckComment"];
                this.columnIsPass = this.Columns["IsPass"];
                this.columnApplySheetNo = this.Columns["ApplySheetNo"];
                this.columnApplyDate = this.Columns["ApplyDate"];
                this.columnApplySheetHead_Pk = this.Columns["ApplySheetHead_Pk"];
                this.columnpersonCode = this.Columns["personCode"];
                this.columnCheckName = this.Columns["CheckName"];
                this.columnIsDisplays = this.Columns["IsDisplays"];
                this.columnDisplaysPersonCode = this.Columns["DisplaysPersonCode"];
                this.columndisplayName = this.Columns["displayName"];
                this.columnCheckdate = this.Columns["Checkdate"];
                this.columnFullCheckName = this.Columns["FullCheckName"];
                this.columnCheckRole = this.Columns["CheckRole"];
                this.columnCheckRoleName = this.Columns["CheckRoleName"];
            }
            
            private void InitClass() {
                this.columnCheckComment = new DataColumn("CheckComment", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckComment);
                this.columnIsPass = new DataColumn("IsPass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsPass);
                this.columnApplySheetNo = new DataColumn("ApplySheetNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetNo);
                this.columnApplyDate = new DataColumn("ApplyDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyDate);
                this.columnApplySheetHead_Pk = new DataColumn("ApplySheetHead_Pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_Pk);
                this.columnpersonCode = new DataColumn("personCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpersonCode);
                this.columnCheckName = new DataColumn("CheckName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckName);
                this.columnIsDisplays = new DataColumn("IsDisplays", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDisplays);
                this.columnDisplaysPersonCode = new DataColumn("DisplaysPersonCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDisplaysPersonCode);
                this.columndisplayName = new DataColumn("displayName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndisplayName);
                this.columnCheckdate = new DataColumn("Checkdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckdate);
                this.columnFullCheckName = new DataColumn("FullCheckName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFullCheckName);
                this.columnCheckRole = new DataColumn("CheckRole", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckRole);
                this.columnCheckRoleName = new DataColumn("CheckRoleName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckRoleName);
                this.columnApplySheetHead_Pk.AutoIncrement = true;
                this.columnApplySheetHead_Pk.ReadOnly = true;
                this.columnFullCheckName.ReadOnly = true;
            }
            
            public ApplyCheckRecordRow NewApplyCheckRecordRow() {
                return ((ApplyCheckRecordRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyCheckRecordRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyCheckRecordRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyCheckRecordRowChanged != null)) {
                    this.ApplyCheckRecordRowChanged(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyCheckRecordRowChanging != null)) {
                    this.ApplyCheckRecordRowChanging(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyCheckRecordRowDeleted != null)) {
                    this.ApplyCheckRecordRowDeleted(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyCheckRecordRowDeleting != null)) {
                    this.ApplyCheckRecordRowDeleting(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyCheckRecordRow(ApplyCheckRecordRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyCheckRecordRow : DataRow {
            
            private ApplyCheckRecordDataTable tableApplyCheckRecord;
            
            internal ApplyCheckRecordRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyCheckRecord = ((ApplyCheckRecordDataTable)(this.Table));
            }
            
            public string CheckComment {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckCommentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckCommentColumn] = value;
                }
            }
            
            public string IsPass {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.IsPassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.IsPassColumn] = value;
                }
            }
            
            public string ApplySheetNo {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.ApplySheetNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.ApplySheetNoColumn] = value;
                }
            }
            
            public System.DateTime ApplyDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableApplyCheckRecord.ApplyDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.ApplyDateColumn] = value;
                }
            }
            
            public int ApplySheetHead_Pk {
                get {
                    try {
                        return ((int)(this[this.tableApplyCheckRecord.ApplySheetHead_PkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.ApplySheetHead_PkColumn] = value;
                }
            }
            
            public string personCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.personCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.personCodeColumn] = value;
                }
            }
            
            public string CheckName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckNameColumn] = value;
                }
            }
            
            public int IsDisplays {
                get {
                    try {
                        return ((int)(this[this.tableApplyCheckRecord.IsDisplaysColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.IsDisplaysColumn] = value;
                }
            }
            
            public string DisplaysPersonCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.DisplaysPersonCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.DisplaysPersonCodeColumn] = value;
                }
            }
            
            public string displayName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.displayNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.displayNameColumn] = value;
                }
            }
            
            public System.DateTime Checkdate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableApplyCheckRecord.CheckdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckdateColumn] = value;
                }
            }
            
            public string FullCheckName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.FullCheckNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.FullCheckNameColumn] = value;
                }
            }
            
            public string CheckRole {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckRoleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckRoleColumn] = value;
                }
            }
            
            public string CheckRoleName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckRoleNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckRoleNameColumn] = value;
                }
            }
            
            public bool IsCheckCommentNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckCommentColumn);
            }
            
            public void SetCheckCommentNull() {
                this[this.tableApplyCheckRecord.CheckCommentColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsPassNull() {
                return this.IsNull(this.tableApplyCheckRecord.IsPassColumn);
            }
            
            public void SetIsPassNull() {
                this[this.tableApplyCheckRecord.IsPassColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetNoNull() {
                return this.IsNull(this.tableApplyCheckRecord.ApplySheetNoColumn);
            }
            
            public void SetApplySheetNoNull() {
                this[this.tableApplyCheckRecord.ApplySheetNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyDateNull() {
                return this.IsNull(this.tableApplyCheckRecord.ApplyDateColumn);
            }
            
            public void SetApplyDateNull() {
                this[this.tableApplyCheckRecord.ApplyDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetHead_PkNull() {
                return this.IsNull(this.tableApplyCheckRecord.ApplySheetHead_PkColumn);
            }
            
            public void SetApplySheetHead_PkNull() {
                this[this.tableApplyCheckRecord.ApplySheetHead_PkColumn] = System.Convert.DBNull;
            }
            
            public bool IspersonCodeNull() {
                return this.IsNull(this.tableApplyCheckRecord.personCodeColumn);
            }
            
            public void SetpersonCodeNull() {
                this[this.tableApplyCheckRecord.personCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckNameColumn);
            }
            
            public void SetCheckNameNull() {
                this[this.tableApplyCheckRecord.CheckNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsDisplaysNull() {
                return this.IsNull(this.tableApplyCheckRecord.IsDisplaysColumn);
            }
            
            public void SetIsDisplaysNull() {
                this[this.tableApplyCheckRecord.IsDisplaysColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisplaysPersonCodeNull() {
                return this.IsNull(this.tableApplyCheckRecord.DisplaysPersonCodeColumn);
            }
            
            public void SetDisplaysPersonCodeNull() {
                this[this.tableApplyCheckRecord.DisplaysPersonCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsdisplayNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.displayNameColumn);
            }
            
            public void SetdisplayNameNull() {
                this[this.tableApplyCheckRecord.displayNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckdateNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckdateColumn);
            }
            
            public void SetCheckdateNull() {
                this[this.tableApplyCheckRecord.CheckdateColumn] = System.Convert.DBNull;
            }
            
            public bool IsFullCheckNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.FullCheckNameColumn);
            }
            
            public void SetFullCheckNameNull() {
                this[this.tableApplyCheckRecord.FullCheckNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckRoleNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckRoleColumn);
            }
            
            public void SetCheckRoleNull() {
                this[this.tableApplyCheckRecord.CheckRoleColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckRoleNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckRoleNameColumn);
            }
            
            public void SetCheckRoleNameNull() {
                this[this.tableApplyCheckRecord.CheckRoleNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyCheckRecordRowChangeEvent : EventArgs {
            
            private ApplyCheckRecordRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyCheckRecordRowChangeEvent(ApplyCheckRecordRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyCheckRecordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnApplySheetHead_Pk;
            
            private DataColumn columnBudgetType;
            
            private DataColumn columnBudgetMoney;
            
            private DataColumn columnPlanMoney;
            
            private DataColumn columnChangeMoney;
            
            private DataColumn columnUsedMoney;
            
            private DataColumn columnThisMoey;
            
            private DataColumn columnLeaveMoney;
            
            private DataColumn columnReadyPayMoney;
            
            private DataColumn columnAllowOutMoney;
            
            internal ApplyBudgetInfoDataTable() : 
                    base("ApplyBudgetInfo") {
                this.InitClass();
            }
            
            internal ApplyBudgetInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ApplySheetHead_PkColumn {
                get {
                    return this.columnApplySheetHead_Pk;
                }
            }
            
            internal DataColumn BudgetTypeColumn {
                get {
                    return this.columnBudgetType;
                }
            }
            
            internal DataColumn BudgetMoneyColumn {
                get {
                    return this.columnBudgetMoney;
                }
            }
            
            internal DataColumn PlanMoneyColumn {
                get {
                    return this.columnPlanMoney;
                }
            }
            
            internal DataColumn ChangeMoneyColumn {
                get {
                    return this.columnChangeMoney;
                }
            }
            
            internal DataColumn UsedMoneyColumn {
                get {
                    return this.columnUsedMoney;
                }
            }
            
            internal DataColumn ThisMoeyColumn {
                get {
                    return this.columnThisMoey;
                }
            }
            
            internal DataColumn LeaveMoneyColumn {
                get {
                    return this.columnLeaveMoney;
                }
            }
            
            internal DataColumn ReadyPayMoneyColumn {
                get {
                    return this.columnReadyPayMoney;
                }
            }
            
            internal DataColumn AllowOutMoneyColumn {
                get {
                    return this.columnAllowOutMoney;
                }
            }
            
            public ApplyBudgetInfoRow this[int index] {
                get {
                    return ((ApplyBudgetInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowChanged;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowChanging;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowDeleted;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowDeleting;
            
            public void AddApplyBudgetInfoRow(ApplyBudgetInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyBudgetInfoRow AddApplyBudgetInfoRow(string BudgetType, System.Decimal BudgetMoney, System.Decimal PlanMoney, System.Decimal ChangeMoney, System.Decimal UsedMoney, System.Decimal ThisMoey, System.Decimal LeaveMoney, System.Decimal ReadyPayMoney, System.Decimal AllowOutMoney) {
                ApplyBudgetInfoRow rowApplyBudgetInfoRow = ((ApplyBudgetInfoRow)(this.NewRow()));
                rowApplyBudgetInfoRow.ItemArray = new object[] {
                        null,
                        BudgetType,
                        BudgetMoney,
                        PlanMoney,
                        ChangeMoney,
                        UsedMoney,
                        ThisMoey,
                        LeaveMoney,
                        ReadyPayMoney,
                        AllowOutMoney};
                this.Rows.Add(rowApplyBudgetInfoRow);
                return rowApplyBudgetInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyBudgetInfoDataTable cln = ((ApplyBudgetInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyBudgetInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnApplySheetHead_Pk = this.Columns["ApplySheetHead_Pk"];
                this.columnBudgetType = this.Columns["BudgetType"];
                this.columnBudgetMoney = this.Columns["BudgetMoney"];
                this.columnPlanMoney = this.Columns["PlanMoney"];
                this.columnChangeMoney = this.Columns["ChangeMoney"];
                this.columnUsedMoney = this.Columns["UsedMoney"];
                this.columnThisMoey = this.Columns["ThisMoey"];
                this.columnLeaveMoney = this.Columns["LeaveMoney"];
                this.columnReadyPayMoney = this.Columns["ReadyPayMoney"];
                this.columnAllowOutMoney = this.Columns["AllowOutMoney"];
            }
            
            private void InitClass() {
                this.columnApplySheetHead_Pk = new DataColumn("ApplySheetHead_Pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_Pk);
                this.columnBudgetType = new DataColumn("BudgetType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBudgetType);
                this.columnBudgetMoney = new DataColumn("BudgetMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBudgetMoney);
                this.columnPlanMoney = new DataColumn("PlanMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlanMoney);
                this.columnChangeMoney = new DataColumn("ChangeMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeMoney);
                this.columnUsedMoney = new DataColumn("UsedMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUsedMoney);
                this.columnThisMoey = new DataColumn("ThisMoey", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThisMoey);
                this.columnLeaveMoney = new DataColumn("LeaveMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLeaveMoney);
                this.columnReadyPayMoney = new DataColumn("ReadyPayMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReadyPayMoney);
                this.columnAllowOutMoney = new DataColumn("AllowOutMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAllowOutMoney);
                this.columnApplySheetHead_Pk.AutoIncrement = true;
                this.columnApplySheetHead_Pk.ReadOnly = true;
            }
            
            public ApplyBudgetInfoRow NewApplyBudgetInfoRow() {
                return ((ApplyBudgetInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyBudgetInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyBudgetInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyBudgetInfoRowChanged != null)) {
                    this.ApplyBudgetInfoRowChanged(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyBudgetInfoRowChanging != null)) {
                    this.ApplyBudgetInfoRowChanging(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyBudgetInfoRowDeleted != null)) {
                    this.ApplyBudgetInfoRowDeleted(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyBudgetInfoRowDeleting != null)) {
                    this.ApplyBudgetInfoRowDeleting(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyBudgetInfoRow(ApplyBudgetInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoRow : DataRow {
            
            private ApplyBudgetInfoDataTable tableApplyBudgetInfo;
            
            internal ApplyBudgetInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyBudgetInfo = ((ApplyBudgetInfoDataTable)(this.Table));
            }
            
            public int ApplySheetHead_Pk {
                get {
                    try {
                        return ((int)(this[this.tableApplyBudgetInfo.ApplySheetHead_PkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ApplySheetHead_PkColumn] = value;
                }
            }
            
            public string BudgetType {
                get {
                    try {
                        return ((string)(this[this.tableApplyBudgetInfo.BudgetTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.BudgetTypeColumn] = value;
                }
            }
            
            public System.Decimal BudgetMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.BudgetMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.BudgetMoneyColumn] = value;
                }
            }
            
            public System.Decimal PlanMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.PlanMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.PlanMoneyColumn] = value;
                }
            }
            
            public System.Decimal ChangeMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ChangeMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ChangeMoneyColumn] = value;
                }
            }
            
            public System.Decimal UsedMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.UsedMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.UsedMoneyColumn] = value;
                }
            }
            
            public System.Decimal ThisMoey {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ThisMoeyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ThisMoeyColumn] = value;
                }
            }
            
            public System.Decimal LeaveMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.LeaveMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.LeaveMoneyColumn] = value;
                }
            }
            
            public System.Decimal ReadyPayMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ReadyPayMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ReadyPayMoneyColumn] = value;
                }
            }
            
            public System.Decimal AllowOutMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.AllowOutMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.AllowOutMoneyColumn] = value;
                }
            }
            
            public bool IsApplySheetHead_PkNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ApplySheetHead_PkColumn);
            }
            
            public void SetApplySheetHead_PkNull() {
                this[this.tableApplyBudgetInfo.ApplySheetHead_PkColumn] = System.Convert.DBNull;
            }
            
            public bool IsBudgetTypeNull() {
                return this.IsNull(this.tableApplyBudgetInfo.BudgetTypeColumn);
            }
            
            public void SetBudgetTypeNull() {
                this[this.tableApplyBudgetInfo.BudgetTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsBudgetMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.BudgetMoneyColumn);
            }
            
            public void SetBudgetMoneyNull() {
                this[this.tableApplyBudgetInfo.BudgetMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsPlanMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.PlanMoneyColumn);
            }
            
            public void SetPlanMoneyNull() {
                this[this.tableApplyBudgetInfo.PlanMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsChangeMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ChangeMoneyColumn);
            }
            
            public void SetChangeMoneyNull() {
                this[this.tableApplyBudgetInfo.ChangeMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsUsedMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.UsedMoneyColumn);
            }
            
            public void SetUsedMoneyNull() {
                this[this.tableApplyBudgetInfo.UsedMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsThisMoeyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ThisMoeyColumn);
            }
            
            public void SetThisMoeyNull() {
                this[this.tableApplyBudgetInfo.ThisMoeyColumn] = System.Convert.DBNull;
            }
            
            public bool IsLeaveMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.LeaveMoneyColumn);
            }
            
            public void SetLeaveMoneyNull() {
                this[this.tableApplyBudgetInfo.LeaveMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsReadyPayMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ReadyPayMoneyColumn);
            }
            
            public void SetReadyPayMoneyNull() {
                this[this.tableApplyBudgetInfo.ReadyPayMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsAllowOutMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.AllowOutMoneyColumn);
            }
            
            public void SetAllowOutMoneyNull() {
                this[this.tableApplyBudgetInfo.AllowOutMoneyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoRowChangeEvent : EventArgs {
            
            private ApplyBudgetInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyBudgetInfoRowChangeEvent(ApplyBudgetInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyBudgetInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2443
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HDSZCheckFlow.UI.CheckFlow.Printpurchase.Report {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class XsdBanquetForPurchase : DataSet {
        
        private BaseApplyBanquetDataTable tableBaseApplyBanquet;
        
        private ApplyBudgetInfoDataTable tableApplyBudgetInfo;
        
        private ApplyCheckRecordDataTable tableApplyCheckRecord;
        
        public XsdBanquetForPurchase() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected XsdBanquetForPurchase(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BaseApplyBanquet"] != null)) {
                    this.Tables.Add(new BaseApplyBanquetDataTable(ds.Tables["BaseApplyBanquet"]));
                }
                if ((ds.Tables["ApplyBudgetInfo"] != null)) {
                    this.Tables.Add(new ApplyBudgetInfoDataTable(ds.Tables["ApplyBudgetInfo"]));
                }
                if ((ds.Tables["ApplyCheckRecord"] != null)) {
                    this.Tables.Add(new ApplyCheckRecordDataTable(ds.Tables["ApplyCheckRecord"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseApplyBanquetDataTable BaseApplyBanquet {
            get {
                return this.tableBaseApplyBanquet;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyBudgetInfoDataTable ApplyBudgetInfo {
            get {
                return this.tableApplyBudgetInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyCheckRecordDataTable ApplyCheckRecord {
            get {
                return this.tableApplyCheckRecord;
            }
        }
        
        public override DataSet Clone() {
            XsdBanquetForPurchase cln = ((XsdBanquetForPurchase)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["BaseApplyBanquet"] != null)) {
                this.Tables.Add(new BaseApplyBanquetDataTable(ds.Tables["BaseApplyBanquet"]));
            }
            if ((ds.Tables["ApplyBudgetInfo"] != null)) {
                this.Tables.Add(new ApplyBudgetInfoDataTable(ds.Tables["ApplyBudgetInfo"]));
            }
            if ((ds.Tables["ApplyCheckRecord"] != null)) {
                this.Tables.Add(new ApplyCheckRecordDataTable(ds.Tables["ApplyCheckRecord"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableBaseApplyBanquet = ((BaseApplyBanquetDataTable)(this.Tables["BaseApplyBanquet"]));
            if ((this.tableBaseApplyBanquet != null)) {
                this.tableBaseApplyBanquet.InitVars();
            }
            this.tableApplyBudgetInfo = ((ApplyBudgetInfoDataTable)(this.Tables["ApplyBudgetInfo"]));
            if ((this.tableApplyBudgetInfo != null)) {
                this.tableApplyBudgetInfo.InitVars();
            }
            this.tableApplyCheckRecord = ((ApplyCheckRecordDataTable)(this.Tables["ApplyCheckRecord"]));
            if ((this.tableApplyCheckRecord != null)) {
                this.tableApplyCheckRecord.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "XsdBanquetForPurchase";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/XsdBanquetForPurchase.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableBaseApplyBanquet = new BaseApplyBanquetDataTable();
            this.Tables.Add(this.tableBaseApplyBanquet);
            this.tableApplyBudgetInfo = new ApplyBudgetInfoDataTable();
            this.Tables.Add(this.tableApplyBudgetInfo);
            this.tableApplyCheckRecord = new ApplyCheckRecordDataTable();
            this.Tables.Add(this.tableApplyCheckRecord);
        }
        
        private bool ShouldSerializeBaseApplyBanquet() {
            return false;
        }
        
        private bool ShouldSerializeApplyBudgetInfo() {
            return false;
        }
        
        private bool ShouldSerializeApplyCheckRecord() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void BaseApplyBanquetRowChangeEventHandler(object sender, BaseApplyBanquetRowChangeEvent e);
        
        public delegate void ApplyBudgetInfoRowChangeEventHandler(object sender, ApplyBudgetInfoRowChangeEvent e);
        
        public delegate void ApplyCheckRecordRowChangeEventHandler(object sender, ApplyCheckRecordRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseApplyBanquetDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnApplySheetNo;
            
            private DataColumn columnName;
            
            private DataColumn columnDeptName;
            
            private DataColumn columnApplyDate;
            
            private DataColumn columnApplySheetHead_Pk;
            
            private DataColumn columnsubjectCode;
            
            private DataColumn columnDispname;
            
            private DataColumn columnDeliveryDate;
            
            private DataColumn columnDateFrom;
            
            private DataColumn columnDateTo;
            
            private DataColumn columnCallinCompany;
            
            private DataColumn columnCallinPerson;
            
            private DataColumn columnCallinMemo;
            
            private DataColumn columninviteDept;
            
            private DataColumn columninvitePerson;
            
            private DataColumn columninvietDeptInfo;
            
            private DataColumn columnrelationDept;
            
            private DataColumn columntalkplace;
            
            private DataColumn columnneedTea;
            
            private DataColumn columnlookFactory;
            
            private DataColumn columnnumofvisit;
            
            private DataColumn columnlunch;
            
            private DataColumn columnother;
            
            private DataColumn columncarplan;
            
            private DataColumn columnespecialRequest;
            
            private DataColumn column_Item;
            
            private DataColumn columnMoney;
            
            private DataColumn columncurrTypeCode;
            
            private DataColumn columnExchangeRate;
            
            private DataColumn columnoriginalcurrPrice;
            
            private DataColumn columnApplyPersonCode;
            
            internal BaseApplyBanquetDataTable() : 
                    base("BaseApplyBanquet") {
                this.InitClass();
            }
            
            internal BaseApplyBanquetDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ApplySheetNoColumn {
                get {
                    return this.columnApplySheetNo;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DeptNameColumn {
                get {
                    return this.columnDeptName;
                }
            }
            
            internal DataColumn ApplyDateColumn {
                get {
                    return this.columnApplyDate;
                }
            }
            
            internal DataColumn ApplySheetHead_PkColumn {
                get {
                    return this.columnApplySheetHead_Pk;
                }
            }
            
            internal DataColumn subjectCodeColumn {
                get {
                    return this.columnsubjectCode;
                }
            }
            
            internal DataColumn DispnameColumn {
                get {
                    return this.columnDispname;
                }
            }
            
            internal DataColumn DeliveryDateColumn {
                get {
                    return this.columnDeliveryDate;
                }
            }
            
            internal DataColumn DateFromColumn {
                get {
                    return this.columnDateFrom;
                }
            }
            
            internal DataColumn DateToColumn {
                get {
                    return this.columnDateTo;
                }
            }
            
            internal DataColumn CallinCompanyColumn {
                get {
                    return this.columnCallinCompany;
                }
            }
            
            internal DataColumn CallinPersonColumn {
                get {
                    return this.columnCallinPerson;
                }
            }
            
            internal DataColumn CallinMemoColumn {
                get {
                    return this.columnCallinMemo;
                }
            }
            
            internal DataColumn inviteDeptColumn {
                get {
                    return this.columninviteDept;
                }
            }
            
            internal DataColumn invitePersonColumn {
                get {
                    return this.columninvitePerson;
                }
            }
            
            internal DataColumn invietDeptInfoColumn {
                get {
                    return this.columninvietDeptInfo;
                }
            }
            
            internal DataColumn relationDeptColumn {
                get {
                    return this.columnrelationDept;
                }
            }
            
            internal DataColumn talkplaceColumn {
                get {
                    return this.columntalkplace;
                }
            }
            
            internal DataColumn needTeaColumn {
                get {
                    return this.columnneedTea;
                }
            }
            
            internal DataColumn lookFactoryColumn {
                get {
                    return this.columnlookFactory;
                }
            }
            
            internal DataColumn numofvisitColumn {
                get {
                    return this.columnnumofvisit;
                }
            }
            
            internal DataColumn lunchColumn {
                get {
                    return this.columnlunch;
                }
            }
            
            internal DataColumn otherColumn {
                get {
                    return this.columnother;
                }
            }
            
            internal DataColumn carplanColumn {
                get {
                    return this.columncarplan;
                }
            }
            
            internal DataColumn especialRequestColumn {
                get {
                    return this.columnespecialRequest;
                }
            }
            
            internal DataColumn _ItemColumn {
                get {
                    return this.column_Item;
                }
            }
            
            internal DataColumn MoneyColumn {
                get {
                    return this.columnMoney;
                }
            }
            
            internal DataColumn currTypeCodeColumn {
                get {
                    return this.columncurrTypeCode;
                }
            }
            
            internal DataColumn ExchangeRateColumn {
                get {
                    return this.columnExchangeRate;
                }
            }
            
            internal DataColumn originalcurrPriceColumn {
                get {
                    return this.columnoriginalcurrPrice;
                }
            }
            
            internal DataColumn ApplyPersonCodeColumn {
                get {
                    return this.columnApplyPersonCode;
                }
            }
            
            public BaseApplyBanquetRow this[int index] {
                get {
                    return ((BaseApplyBanquetRow)(this.Rows[index]));
                }
            }
            
            public event BaseApplyBanquetRowChangeEventHandler BaseApplyBanquetRowChanged;
            
            public event BaseApplyBanquetRowChangeEventHandler BaseApplyBanquetRowChanging;
            
            public event BaseApplyBanquetRowChangeEventHandler BaseApplyBanquetRowDeleted;
            
            public event BaseApplyBanquetRowChangeEventHandler BaseApplyBanquetRowDeleting;
            
            public void AddBaseApplyBanquetRow(BaseApplyBanquetRow row) {
                this.Rows.Add(row);
            }
            
            public BaseApplyBanquetRow AddBaseApplyBanquetRow(
                        string ApplySheetNo, 
                        string Name, 
                        string DeptName, 
                        string ApplyDate, 
                        string ApplySheetHead_Pk, 
                        string subjectCode, 
                        string Dispname, 
                        string DeliveryDate, 
                        System.DateTime DateFrom, 
                        System.DateTime DateTo, 
                        string CallinCompany, 
                        string CallinPerson, 
                        string CallinMemo, 
                        string inviteDept, 
                        string invitePerson, 
                        string invietDeptInfo, 
                        string relationDept, 
                        string talkplace, 
                        string needTea, 
                        string lookFactory, 
                        int numofvisit, 
                        string lunch, 
                        string other, 
                        string carplan, 
                        string especialRequest, 
                        string _Item, 
                        System.Decimal Money, 
                        string currTypeCode, 
                        System.Decimal ExchangeRate, 
                        System.Decimal originalcurrPrice, 
                        string ApplyPersonCode) {
                BaseApplyBanquetRow rowBaseApplyBanquetRow = ((BaseApplyBanquetRow)(this.NewRow()));
                rowBaseApplyBanquetRow.ItemArray = new object[] {
                        ApplySheetNo,
                        Name,
                        DeptName,
                        ApplyDate,
                        ApplySheetHead_Pk,
                        subjectCode,
                        Dispname,
                        DeliveryDate,
                        DateFrom,
                        DateTo,
                        CallinCompany,
                        CallinPerson,
                        CallinMemo,
                        inviteDept,
                        invitePerson,
                        invietDeptInfo,
                        relationDept,
                        talkplace,
                        needTea,
                        lookFactory,
                        numofvisit,
                        lunch,
                        other,
                        carplan,
                        especialRequest,
                        _Item,
                        Money,
                        currTypeCode,
                        ExchangeRate,
                        originalcurrPrice,
                        ApplyPersonCode};
                this.Rows.Add(rowBaseApplyBanquetRow);
                return rowBaseApplyBanquetRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BaseApplyBanquetDataTable cln = ((BaseApplyBanquetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BaseApplyBanquetDataTable();
            }
            
            internal void InitVars() {
                this.columnApplySheetNo = this.Columns["ApplySheetNo"];
                this.columnName = this.Columns["Name"];
                this.columnDeptName = this.Columns["DeptName"];
                this.columnApplyDate = this.Columns["ApplyDate"];
                this.columnApplySheetHead_Pk = this.Columns["ApplySheetHead_Pk"];
                this.columnsubjectCode = this.Columns["subjectCode"];
                this.columnDispname = this.Columns["Dispname"];
                this.columnDeliveryDate = this.Columns["DeliveryDate"];
                this.columnDateFrom = this.Columns["DateFrom"];
                this.columnDateTo = this.Columns["DateTo"];
                this.columnCallinCompany = this.Columns["CallinCompany"];
                this.columnCallinPerson = this.Columns["CallinPerson"];
                this.columnCallinMemo = this.Columns["CallinMemo"];
                this.columninviteDept = this.Columns["inviteDept"];
                this.columninvitePerson = this.Columns["invitePerson"];
                this.columninvietDeptInfo = this.Columns["invietDeptInfo"];
                this.columnrelationDept = this.Columns["relationDept"];
                this.columntalkplace = this.Columns["talkplace"];
                this.columnneedTea = this.Columns["needTea"];
                this.columnlookFactory = this.Columns["lookFactory"];
                this.columnnumofvisit = this.Columns["numofvisit"];
                this.columnlunch = this.Columns["lunch"];
                this.columnother = this.Columns["other"];
                this.columncarplan = this.Columns["carplan"];
                this.columnespecialRequest = this.Columns["especialRequest"];
                this.column_Item = this.Columns["Item"];
                this.columnMoney = this.Columns["Money"];
                this.columncurrTypeCode = this.Columns["currTypeCode"];
                this.columnExchangeRate = this.Columns["ExchangeRate"];
                this.columnoriginalcurrPrice = this.Columns["originalcurrPrice"];
                this.columnApplyPersonCode = this.Columns["ApplyPersonCode"];
            }
            
            private void InitClass() {
                this.columnApplySheetNo = new DataColumn("ApplySheetNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetNo);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDeptName = new DataColumn("DeptName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeptName);
                this.columnApplyDate = new DataColumn("ApplyDate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyDate);
                this.columnApplySheetHead_Pk = new DataColumn("ApplySheetHead_Pk", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_Pk);
                this.columnsubjectCode = new DataColumn("subjectCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsubjectCode);
                this.columnDispname = new DataColumn("Dispname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDispname);
                this.columnDeliveryDate = new DataColumn("DeliveryDate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeliveryDate);
                this.columnDateFrom = new DataColumn("DateFrom", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateFrom);
                this.columnDateTo = new DataColumn("DateTo", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateTo);
                this.columnCallinCompany = new DataColumn("CallinCompany", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCallinCompany);
                this.columnCallinPerson = new DataColumn("CallinPerson", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCallinPerson);
                this.columnCallinMemo = new DataColumn("CallinMemo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCallinMemo);
                this.columninviteDept = new DataColumn("inviteDept", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninviteDept);
                this.columninvitePerson = new DataColumn("invitePerson", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninvitePerson);
                this.columninvietDeptInfo = new DataColumn("invietDeptInfo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninvietDeptInfo);
                this.columnrelationDept = new DataColumn("relationDept", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrelationDept);
                this.columntalkplace = new DataColumn("talkplace", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntalkplace);
                this.columnneedTea = new DataColumn("needTea", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnneedTea);
                this.columnlookFactory = new DataColumn("lookFactory", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlookFactory);
                this.columnnumofvisit = new DataColumn("numofvisit", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnumofvisit);
                this.columnlunch = new DataColumn("lunch", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlunch);
                this.columnother = new DataColumn("other", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnother);
                this.columncarplan = new DataColumn("carplan", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncarplan);
                this.columnespecialRequest = new DataColumn("especialRequest", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnespecialRequest);
                this.column_Item = new DataColumn("Item", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column_Item);
                this.columnMoney = new DataColumn("Money", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMoney);
                this.columncurrTypeCode = new DataColumn("currTypeCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncurrTypeCode);
                this.columnExchangeRate = new DataColumn("ExchangeRate", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExchangeRate);
                this.columnoriginalcurrPrice = new DataColumn("originalcurrPrice", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnoriginalcurrPrice);
                this.columnApplyPersonCode = new DataColumn("ApplyPersonCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyPersonCode);
            }
            
            public BaseApplyBanquetRow NewBaseApplyBanquetRow() {
                return ((BaseApplyBanquetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BaseApplyBanquetRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BaseApplyBanquetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseApplyBanquetRowChanged != null)) {
                    this.BaseApplyBanquetRowChanged(this, new BaseApplyBanquetRowChangeEvent(((BaseApplyBanquetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseApplyBanquetRowChanging != null)) {
                    this.BaseApplyBanquetRowChanging(this, new BaseApplyBanquetRowChangeEvent(((BaseApplyBanquetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseApplyBanquetRowDeleted != null)) {
                    this.BaseApplyBanquetRowDeleted(this, new BaseApplyBanquetRowChangeEvent(((BaseApplyBanquetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseApplyBanquetRowDeleting != null)) {
                    this.BaseApplyBanquetRowDeleting(this, new BaseApplyBanquetRowChangeEvent(((BaseApplyBanquetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBaseApplyBanquetRow(BaseApplyBanquetRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseApplyBanquetRow : DataRow {
            
            private BaseApplyBanquetDataTable tableBaseApplyBanquet;
            
            internal BaseApplyBanquetRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseApplyBanquet = ((BaseApplyBanquetDataTable)(this.Table));
            }
            
            public string ApplySheetNo {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.ApplySheetNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.ApplySheetNoColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.NameColumn] = value;
                }
            }
            
            public string DeptName {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.DeptNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.DeptNameColumn] = value;
                }
            }
            
            public string ApplyDate {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.ApplyDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.ApplyDateColumn] = value;
                }
            }
            
            public string ApplySheetHead_Pk {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.ApplySheetHead_PkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.ApplySheetHead_PkColumn] = value;
                }
            }
            
            public string subjectCode {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.subjectCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.subjectCodeColumn] = value;
                }
            }
            
            public string Dispname {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.DispnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.DispnameColumn] = value;
                }
            }
            
            public string DeliveryDate {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.DeliveryDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.DeliveryDateColumn] = value;
                }
            }
            
            public System.DateTime DateFrom {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBaseApplyBanquet.DateFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.DateFromColumn] = value;
                }
            }
            
            public System.DateTime DateTo {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBaseApplyBanquet.DateToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.DateToColumn] = value;
                }
            }
            
            public string CallinCompany {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.CallinCompanyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.CallinCompanyColumn] = value;
                }
            }
            
            public string CallinPerson {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.CallinPersonColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.CallinPersonColumn] = value;
                }
            }
            
            public string CallinMemo {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.CallinMemoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.CallinMemoColumn] = value;
                }
            }
            
            public string inviteDept {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.inviteDeptColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.inviteDeptColumn] = value;
                }
            }
            
            public string invitePerson {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.invitePersonColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.invitePersonColumn] = value;
                }
            }
            
            public string invietDeptInfo {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.invietDeptInfoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.invietDeptInfoColumn] = value;
                }
            }
            
            public string relationDept {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.relationDeptColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.relationDeptColumn] = value;
                }
            }
            
            public string talkplace {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.talkplaceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.talkplaceColumn] = value;
                }
            }
            
            public string needTea {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.needTeaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.needTeaColumn] = value;
                }
            }
            
            public string lookFactory {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.lookFactoryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.lookFactoryColumn] = value;
                }
            }
            
            public int numofvisit {
                get {
                    try {
                        return ((int)(this[this.tableBaseApplyBanquet.numofvisitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.numofvisitColumn] = value;
                }
            }
            
            public string lunch {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.lunchColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.lunchColumn] = value;
                }
            }
            
            public string other {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.otherColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.otherColumn] = value;
                }
            }
            
            public string carplan {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.carplanColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.carplanColumn] = value;
                }
            }
            
            public string especialRequest {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.especialRequestColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.especialRequestColumn] = value;
                }
            }
            
            public string _Item {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet._ItemColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet._ItemColumn] = value;
                }
            }
            
            public System.Decimal Money {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableBaseApplyBanquet.MoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.MoneyColumn] = value;
                }
            }
            
            public string currTypeCode {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.currTypeCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.currTypeCodeColumn] = value;
                }
            }
            
            public System.Decimal ExchangeRate {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableBaseApplyBanquet.ExchangeRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.ExchangeRateColumn] = value;
                }
            }
            
            public System.Decimal originalcurrPrice {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableBaseApplyBanquet.originalcurrPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.originalcurrPriceColumn] = value;
                }
            }
            
            public string ApplyPersonCode {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyBanquet.ApplyPersonCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyBanquet.ApplyPersonCodeColumn] = value;
                }
            }
            
            public bool IsApplySheetNoNull() {
                return this.IsNull(this.tableBaseApplyBanquet.ApplySheetNoColumn);
            }
            
            public void SetApplySheetNoNull() {
                this[this.tableBaseApplyBanquet.ApplySheetNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableBaseApplyBanquet.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableBaseApplyBanquet.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeptNameNull() {
                return this.IsNull(this.tableBaseApplyBanquet.DeptNameColumn);
            }
            
            public void SetDeptNameNull() {
                this[this.tableBaseApplyBanquet.DeptNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyDateNull() {
                return this.IsNull(this.tableBaseApplyBanquet.ApplyDateColumn);
            }
            
            public void SetApplyDateNull() {
                this[this.tableBaseApplyBanquet.ApplyDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetHead_PkNull() {
                return this.IsNull(this.tableBaseApplyBanquet.ApplySheetHead_PkColumn);
            }
            
            public void SetApplySheetHead_PkNull() {
                this[this.tableBaseApplyBanquet.ApplySheetHead_PkColumn] = System.Convert.DBNull;
            }
            
            public bool IssubjectCodeNull() {
                return this.IsNull(this.tableBaseApplyBanquet.subjectCodeColumn);
            }
            
            public void SetsubjectCodeNull() {
                this[this.tableBaseApplyBanquet.subjectCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDispnameNull() {
                return this.IsNull(this.tableBaseApplyBanquet.DispnameColumn);
            }
            
            public void SetDispnameNull() {
                this[this.tableBaseApplyBanquet.DispnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeliveryDateNull() {
                return this.IsNull(this.tableBaseApplyBanquet.DeliveryDateColumn);
            }
            
            public void SetDeliveryDateNull() {
                this[this.tableBaseApplyBanquet.DeliveryDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsDateFromNull() {
                return this.IsNull(this.tableBaseApplyBanquet.DateFromColumn);
            }
            
            public void SetDateFromNull() {
                this[this.tableBaseApplyBanquet.DateFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsDateToNull() {
                return this.IsNull(this.tableBaseApplyBanquet.DateToColumn);
            }
            
            public void SetDateToNull() {
                this[this.tableBaseApplyBanquet.DateToColumn] = System.Convert.DBNull;
            }
            
            public bool IsCallinCompanyNull() {
                return this.IsNull(this.tableBaseApplyBanquet.CallinCompanyColumn);
            }
            
            public void SetCallinCompanyNull() {
                this[this.tableBaseApplyBanquet.CallinCompanyColumn] = System.Convert.DBNull;
            }
            
            public bool IsCallinPersonNull() {
                return this.IsNull(this.tableBaseApplyBanquet.CallinPersonColumn);
            }
            
            public void SetCallinPersonNull() {
                this[this.tableBaseApplyBanquet.CallinPersonColumn] = System.Convert.DBNull;
            }
            
            public bool IsCallinMemoNull() {
                return this.IsNull(this.tableBaseApplyBanquet.CallinMemoColumn);
            }
            
            public void SetCallinMemoNull() {
                this[this.tableBaseApplyBanquet.CallinMemoColumn] = System.Convert.DBNull;
            }
            
            public bool IsinviteDeptNull() {
                return this.IsNull(this.tableBaseApplyBanquet.inviteDeptColumn);
            }
            
            public void SetinviteDeptNull() {
                this[this.tableBaseApplyBanquet.inviteDeptColumn] = System.Convert.DBNull;
            }
            
            public bool IsinvitePersonNull() {
                return this.IsNull(this.tableBaseApplyBanquet.invitePersonColumn);
            }
            
            public void SetinvitePersonNull() {
                this[this.tableBaseApplyBanquet.invitePersonColumn] = System.Convert.DBNull;
            }
            
            public bool IsinvietDeptInfoNull() {
                return this.IsNull(this.tableBaseApplyBanquet.invietDeptInfoColumn);
            }
            
            public void SetinvietDeptInfoNull() {
                this[this.tableBaseApplyBanquet.invietDeptInfoColumn] = System.Convert.DBNull;
            }
            
            public bool IsrelationDeptNull() {
                return this.IsNull(this.tableBaseApplyBanquet.relationDeptColumn);
            }
            
            public void SetrelationDeptNull() {
                this[this.tableBaseApplyBanquet.relationDeptColumn] = System.Convert.DBNull;
            }
            
            public bool IstalkplaceNull() {
                return this.IsNull(this.tableBaseApplyBanquet.talkplaceColumn);
            }
            
            public void SettalkplaceNull() {
                this[this.tableBaseApplyBanquet.talkplaceColumn] = System.Convert.DBNull;
            }
            
            public bool IsneedTeaNull() {
                return this.IsNull(this.tableBaseApplyBanquet.needTeaColumn);
            }
            
            public void SetneedTeaNull() {
                this[this.tableBaseApplyBanquet.needTeaColumn] = System.Convert.DBNull;
            }
            
            public bool IslookFactoryNull() {
                return this.IsNull(this.tableBaseApplyBanquet.lookFactoryColumn);
            }
            
            public void SetlookFactoryNull() {
                this[this.tableBaseApplyBanquet.lookFactoryColumn] = System.Convert.DBNull;
            }
            
            public bool IsnumofvisitNull() {
                return this.IsNull(this.tableBaseApplyBanquet.numofvisitColumn);
            }
            
            public void SetnumofvisitNull() {
                this[this.tableBaseApplyBanquet.numofvisitColumn] = System.Convert.DBNull;
            }
            
            public bool IslunchNull() {
                return this.IsNull(this.tableBaseApplyBanquet.lunchColumn);
            }
            
            public void SetlunchNull() {
                this[this.tableBaseApplyBanquet.lunchColumn] = System.Convert.DBNull;
            }
            
            public bool IsotherNull() {
                return this.IsNull(this.tableBaseApplyBanquet.otherColumn);
            }
            
            public void SetotherNull() {
                this[this.tableBaseApplyBanquet.otherColumn] = System.Convert.DBNull;
            }
            
            public bool IscarplanNull() {
                return this.IsNull(this.tableBaseApplyBanquet.carplanColumn);
            }
            
            public void SetcarplanNull() {
                this[this.tableBaseApplyBanquet.carplanColumn] = System.Convert.DBNull;
            }
            
            public bool IsespecialRequestNull() {
                return this.IsNull(this.tableBaseApplyBanquet.especialRequestColumn);
            }
            
            public void SetespecialRequestNull() {
                this[this.tableBaseApplyBanquet.especialRequestColumn] = System.Convert.DBNull;
            }
            
            public bool Is_ItemNull() {
                return this.IsNull(this.tableBaseApplyBanquet._ItemColumn);
            }
            
            public void Set_ItemNull() {
                this[this.tableBaseApplyBanquet._ItemColumn] = System.Convert.DBNull;
            }
            
            public bool IsMoneyNull() {
                return this.IsNull(this.tableBaseApplyBanquet.MoneyColumn);
            }
            
            public void SetMoneyNull() {
                this[this.tableBaseApplyBanquet.MoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IscurrTypeCodeNull() {
                return this.IsNull(this.tableBaseApplyBanquet.currTypeCodeColumn);
            }
            
            public void SetcurrTypeCodeNull() {
                this[this.tableBaseApplyBanquet.currTypeCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsExchangeRateNull() {
                return this.IsNull(this.tableBaseApplyBanquet.ExchangeRateColumn);
            }
            
            public void SetExchangeRateNull() {
                this[this.tableBaseApplyBanquet.ExchangeRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsoriginalcurrPriceNull() {
                return this.IsNull(this.tableBaseApplyBanquet.originalcurrPriceColumn);
            }
            
            public void SetoriginalcurrPriceNull() {
                this[this.tableBaseApplyBanquet.originalcurrPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyPersonCodeNull() {
                return this.IsNull(this.tableBaseApplyBanquet.ApplyPersonCodeColumn);
            }
            
            public void SetApplyPersonCodeNull() {
                this[this.tableBaseApplyBanquet.ApplyPersonCodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseApplyBanquetRowChangeEvent : EventArgs {
            
            private BaseApplyBanquetRow eventRow;
            
            private DataRowAction eventAction;
            
            public BaseApplyBanquetRowChangeEvent(BaseApplyBanquetRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BaseApplyBanquetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnApplySheetHead_Pk;
            
            private DataColumn columnBudgetType;
            
            private DataColumn columnBudgetMoney;
            
            private DataColumn columnPlanMoney;
            
            private DataColumn columnChangeMoney;
            
            private DataColumn columnUsedMoney;
            
            private DataColumn columnThisMoey;
            
            private DataColumn columnLeaveMoney;
            
            private DataColumn columnReadyPayMoney;
            
            private DataColumn columnAllowOutMoney;
            
            internal ApplyBudgetInfoDataTable() : 
                    base("ApplyBudgetInfo") {
                this.InitClass();
            }
            
            internal ApplyBudgetInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ApplySheetHead_PkColumn {
                get {
                    return this.columnApplySheetHead_Pk;
                }
            }
            
            internal DataColumn BudgetTypeColumn {
                get {
                    return this.columnBudgetType;
                }
            }
            
            internal DataColumn BudgetMoneyColumn {
                get {
                    return this.columnBudgetMoney;
                }
            }
            
            internal DataColumn PlanMoneyColumn {
                get {
                    return this.columnPlanMoney;
                }
            }
            
            internal DataColumn ChangeMoneyColumn {
                get {
                    return this.columnChangeMoney;
                }
            }
            
            internal DataColumn UsedMoneyColumn {
                get {
                    return this.columnUsedMoney;
                }
            }
            
            internal DataColumn ThisMoeyColumn {
                get {
                    return this.columnThisMoey;
                }
            }
            
            internal DataColumn LeaveMoneyColumn {
                get {
                    return this.columnLeaveMoney;
                }
            }
            
            internal DataColumn ReadyPayMoneyColumn {
                get {
                    return this.columnReadyPayMoney;
                }
            }
            
            internal DataColumn AllowOutMoneyColumn {
                get {
                    return this.columnAllowOutMoney;
                }
            }
            
            public ApplyBudgetInfoRow this[int index] {
                get {
                    return ((ApplyBudgetInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowChanged;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowChanging;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowDeleted;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowDeleting;
            
            public void AddApplyBudgetInfoRow(ApplyBudgetInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyBudgetInfoRow AddApplyBudgetInfoRow(string BudgetType, System.Decimal BudgetMoney, System.Decimal PlanMoney, System.Decimal ChangeMoney, System.Decimal UsedMoney, System.Decimal ThisMoey, System.Decimal LeaveMoney, System.Decimal ReadyPayMoney, System.Decimal AllowOutMoney) {
                ApplyBudgetInfoRow rowApplyBudgetInfoRow = ((ApplyBudgetInfoRow)(this.NewRow()));
                rowApplyBudgetInfoRow.ItemArray = new object[] {
                        null,
                        BudgetType,
                        BudgetMoney,
                        PlanMoney,
                        ChangeMoney,
                        UsedMoney,
                        ThisMoey,
                        LeaveMoney,
                        ReadyPayMoney,
                        AllowOutMoney};
                this.Rows.Add(rowApplyBudgetInfoRow);
                return rowApplyBudgetInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyBudgetInfoDataTable cln = ((ApplyBudgetInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyBudgetInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnApplySheetHead_Pk = this.Columns["ApplySheetHead_Pk"];
                this.columnBudgetType = this.Columns["BudgetType"];
                this.columnBudgetMoney = this.Columns["BudgetMoney"];
                this.columnPlanMoney = this.Columns["PlanMoney"];
                this.columnChangeMoney = this.Columns["ChangeMoney"];
                this.columnUsedMoney = this.Columns["UsedMoney"];
                this.columnThisMoey = this.Columns["ThisMoey"];
                this.columnLeaveMoney = this.Columns["LeaveMoney"];
                this.columnReadyPayMoney = this.Columns["ReadyPayMoney"];
                this.columnAllowOutMoney = this.Columns["AllowOutMoney"];
            }
            
            private void InitClass() {
                this.columnApplySheetHead_Pk = new DataColumn("ApplySheetHead_Pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_Pk);
                this.columnBudgetType = new DataColumn("BudgetType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBudgetType);
                this.columnBudgetMoney = new DataColumn("BudgetMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBudgetMoney);
                this.columnPlanMoney = new DataColumn("PlanMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlanMoney);
                this.columnChangeMoney = new DataColumn("ChangeMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeMoney);
                this.columnUsedMoney = new DataColumn("UsedMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUsedMoney);
                this.columnThisMoey = new DataColumn("ThisMoey", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThisMoey);
                this.columnLeaveMoney = new DataColumn("LeaveMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLeaveMoney);
                this.columnReadyPayMoney = new DataColumn("ReadyPayMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReadyPayMoney);
                this.columnAllowOutMoney = new DataColumn("AllowOutMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAllowOutMoney);
                this.columnApplySheetHead_Pk.AutoIncrement = true;
                this.columnApplySheetHead_Pk.ReadOnly = true;
            }
            
            public ApplyBudgetInfoRow NewApplyBudgetInfoRow() {
                return ((ApplyBudgetInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyBudgetInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyBudgetInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyBudgetInfoRowChanged != null)) {
                    this.ApplyBudgetInfoRowChanged(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyBudgetInfoRowChanging != null)) {
                    this.ApplyBudgetInfoRowChanging(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyBudgetInfoRowDeleted != null)) {
                    this.ApplyBudgetInfoRowDeleted(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyBudgetInfoRowDeleting != null)) {
                    this.ApplyBudgetInfoRowDeleting(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyBudgetInfoRow(ApplyBudgetInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoRow : DataRow {
            
            private ApplyBudgetInfoDataTable tableApplyBudgetInfo;
            
            internal ApplyBudgetInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyBudgetInfo = ((ApplyBudgetInfoDataTable)(this.Table));
            }
            
            public int ApplySheetHead_Pk {
                get {
                    try {
                        return ((int)(this[this.tableApplyBudgetInfo.ApplySheetHead_PkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ApplySheetHead_PkColumn] = value;
                }
            }
            
            public string BudgetType {
                get {
                    try {
                        return ((string)(this[this.tableApplyBudgetInfo.BudgetTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.BudgetTypeColumn] = value;
                }
            }
            
            public System.Decimal BudgetMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.BudgetMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.BudgetMoneyColumn] = value;
                }
            }
            
            public System.Decimal PlanMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.PlanMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.PlanMoneyColumn] = value;
                }
            }
            
            public System.Decimal ChangeMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ChangeMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ChangeMoneyColumn] = value;
                }
            }
            
            public System.Decimal UsedMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.UsedMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.UsedMoneyColumn] = value;
                }
            }
            
            public System.Decimal ThisMoey {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ThisMoeyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ThisMoeyColumn] = value;
                }
            }
            
            public System.Decimal LeaveMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.LeaveMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.LeaveMoneyColumn] = value;
                }
            }
            
            public System.Decimal ReadyPayMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ReadyPayMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ReadyPayMoneyColumn] = value;
                }
            }
            
            public System.Decimal AllowOutMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.AllowOutMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.AllowOutMoneyColumn] = value;
                }
            }
            
            public bool IsApplySheetHead_PkNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ApplySheetHead_PkColumn);
            }
            
            public void SetApplySheetHead_PkNull() {
                this[this.tableApplyBudgetInfo.ApplySheetHead_PkColumn] = System.Convert.DBNull;
            }
            
            public bool IsBudgetTypeNull() {
                return this.IsNull(this.tableApplyBudgetInfo.BudgetTypeColumn);
            }
            
            public void SetBudgetTypeNull() {
                this[this.tableApplyBudgetInfo.BudgetTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsBudgetMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.BudgetMoneyColumn);
            }
            
            public void SetBudgetMoneyNull() {
                this[this.tableApplyBudgetInfo.BudgetMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsPlanMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.PlanMoneyColumn);
            }
            
            public void SetPlanMoneyNull() {
                this[this.tableApplyBudgetInfo.PlanMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsChangeMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ChangeMoneyColumn);
            }
            
            public void SetChangeMoneyNull() {
                this[this.tableApplyBudgetInfo.ChangeMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsUsedMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.UsedMoneyColumn);
            }
            
            public void SetUsedMoneyNull() {
                this[this.tableApplyBudgetInfo.UsedMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsThisMoeyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ThisMoeyColumn);
            }
            
            public void SetThisMoeyNull() {
                this[this.tableApplyBudgetInfo.ThisMoeyColumn] = System.Convert.DBNull;
            }
            
            public bool IsLeaveMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.LeaveMoneyColumn);
            }
            
            public void SetLeaveMoneyNull() {
                this[this.tableApplyBudgetInfo.LeaveMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsReadyPayMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ReadyPayMoneyColumn);
            }
            
            public void SetReadyPayMoneyNull() {
                this[this.tableApplyBudgetInfo.ReadyPayMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsAllowOutMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.AllowOutMoneyColumn);
            }
            
            public void SetAllowOutMoneyNull() {
                this[this.tableApplyBudgetInfo.AllowOutMoneyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoRowChangeEvent : EventArgs {
            
            private ApplyBudgetInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyBudgetInfoRowChangeEvent(ApplyBudgetInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyBudgetInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyCheckRecordDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCheckComment;
            
            private DataColumn columnIsPass;
            
            private DataColumn columnApplySheetNo;
            
            private DataColumn columnApplyDate;
            
            private DataColumn columnApplySheetHead_Pk;
            
            private DataColumn columnpersonCode;
            
            private DataColumn columnCheckName;
            
            private DataColumn columnIsDisplays;
            
            private DataColumn columnDisplaysPersonCode;
            
            private DataColumn columndisplayName;
            
            private DataColumn columnCheckdate;
            
            private DataColumn columnFullCheckName;
            
            private DataColumn columnCheckRole;
            
            private DataColumn columnCheckRoleName;
            
            internal ApplyCheckRecordDataTable() : 
                    base("ApplyCheckRecord") {
                this.InitClass();
            }
            
            internal ApplyCheckRecordDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CheckCommentColumn {
                get {
                    return this.columnCheckComment;
                }
            }
            
            internal DataColumn IsPassColumn {
                get {
                    return this.columnIsPass;
                }
            }
            
            internal DataColumn ApplySheetNoColumn {
                get {
                    return this.columnApplySheetNo;
                }
            }
            
            internal DataColumn ApplyDateColumn {
                get {
                    return this.columnApplyDate;
                }
            }
            
            internal DataColumn ApplySheetHead_PkColumn {
                get {
                    return this.columnApplySheetHead_Pk;
                }
            }
            
            internal DataColumn personCodeColumn {
                get {
                    return this.columnpersonCode;
                }
            }
            
            internal DataColumn CheckNameColumn {
                get {
                    return this.columnCheckName;
                }
            }
            
            internal DataColumn IsDisplaysColumn {
                get {
                    return this.columnIsDisplays;
                }
            }
            
            internal DataColumn DisplaysPersonCodeColumn {
                get {
                    return this.columnDisplaysPersonCode;
                }
            }
            
            internal DataColumn displayNameColumn {
                get {
                    return this.columndisplayName;
                }
            }
            
            internal DataColumn CheckdateColumn {
                get {
                    return this.columnCheckdate;
                }
            }
            
            internal DataColumn FullCheckNameColumn {
                get {
                    return this.columnFullCheckName;
                }
            }
            
            internal DataColumn CheckRoleColumn {
                get {
                    return this.columnCheckRole;
                }
            }
            
            internal DataColumn CheckRoleNameColumn {
                get {
                    return this.columnCheckRoleName;
                }
            }
            
            public ApplyCheckRecordRow this[int index] {
                get {
                    return ((ApplyCheckRecordRow)(this.Rows[index]));
                }
            }
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowChanged;
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowChanging;
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowDeleted;
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowDeleting;
            
            public void AddApplyCheckRecordRow(ApplyCheckRecordRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyCheckRecordRow AddApplyCheckRecordRow(string CheckComment, string IsPass, string ApplySheetNo, System.DateTime ApplyDate, string personCode, string CheckName, int IsDisplays, string DisplaysPersonCode, string displayName, System.DateTime Checkdate, string FullCheckName, string CheckRole, string CheckRoleName) {
                ApplyCheckRecordRow rowApplyCheckRecordRow = ((ApplyCheckRecordRow)(this.NewRow()));
                rowApplyCheckRecordRow.ItemArray = new object[] {
                        CheckComment,
                        IsPass,
                        ApplySheetNo,
                        ApplyDate,
                        null,
                        personCode,
                        CheckName,
                        IsDisplays,
                        DisplaysPersonCode,
                        displayName,
                        Checkdate,
                        FullCheckName,
                        CheckRole,
                        CheckRoleName};
                this.Rows.Add(rowApplyCheckRecordRow);
                return rowApplyCheckRecordRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyCheckRecordDataTable cln = ((ApplyCheckRecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyCheckRecordDataTable();
            }
            
            internal void InitVars() {
                this.columnCheckComment = this.Columns["CheckComment"];
                this.columnIsPass = this.Columns["IsPass"];
                this.columnApplySheetNo = this.Columns["ApplySheetNo"];
                this.columnApplyDate = this.Columns["ApplyDate"];
                this.columnApplySheetHead_Pk = this.Columns["ApplySheetHead_Pk"];
                this.columnpersonCode = this.Columns["personCode"];
                this.columnCheckName = this.Columns["CheckName"];
                this.columnIsDisplays = this.Columns["IsDisplays"];
                this.columnDisplaysPersonCode = this.Columns["DisplaysPersonCode"];
                this.columndisplayName = this.Columns["displayName"];
                this.columnCheckdate = this.Columns["Checkdate"];
                this.columnFullCheckName = this.Columns["FullCheckName"];
                this.columnCheckRole = this.Columns["CheckRole"];
                this.columnCheckRoleName = this.Columns["CheckRoleName"];
            }
            
            private void InitClass() {
                this.columnCheckComment = new DataColumn("CheckComment", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckComment);
                this.columnIsPass = new DataColumn("IsPass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsPass);
                this.columnApplySheetNo = new DataColumn("ApplySheetNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetNo);
                this.columnApplyDate = new DataColumn("ApplyDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyDate);
                this.columnApplySheetHead_Pk = new DataColumn("ApplySheetHead_Pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_Pk);
                this.columnpersonCode = new DataColumn("personCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpersonCode);
                this.columnCheckName = new DataColumn("CheckName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckName);
                this.columnIsDisplays = new DataColumn("IsDisplays", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDisplays);
                this.columnDisplaysPersonCode = new DataColumn("DisplaysPersonCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDisplaysPersonCode);
                this.columndisplayName = new DataColumn("displayName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndisplayName);
                this.columnCheckdate = new DataColumn("Checkdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckdate);
                this.columnFullCheckName = new DataColumn("FullCheckName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFullCheckName);
                this.columnCheckRole = new DataColumn("CheckRole", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckRole);
                this.columnCheckRoleName = new DataColumn("CheckRoleName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckRoleName);
                this.columnApplySheetHead_Pk.AutoIncrement = true;
                this.columnApplySheetHead_Pk.ReadOnly = true;
                this.columnFullCheckName.ReadOnly = true;
            }
            
            public ApplyCheckRecordRow NewApplyCheckRecordRow() {
                return ((ApplyCheckRecordRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyCheckRecordRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyCheckRecordRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyCheckRecordRowChanged != null)) {
                    this.ApplyCheckRecordRowChanged(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyCheckRecordRowChanging != null)) {
                    this.ApplyCheckRecordRowChanging(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyCheckRecordRowDeleted != null)) {
                    this.ApplyCheckRecordRowDeleted(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyCheckRecordRowDeleting != null)) {
                    this.ApplyCheckRecordRowDeleting(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyCheckRecordRow(ApplyCheckRecordRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyCheckRecordRow : DataRow {
            
            private ApplyCheckRecordDataTable tableApplyCheckRecord;
            
            internal ApplyCheckRecordRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyCheckRecord = ((ApplyCheckRecordDataTable)(this.Table));
            }
            
            public string CheckComment {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckCommentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckCommentColumn] = value;
                }
            }
            
            public string IsPass {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.IsPassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.IsPassColumn] = value;
                }
            }
            
            public string ApplySheetNo {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.ApplySheetNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.ApplySheetNoColumn] = value;
                }
            }
            
            public System.DateTime ApplyDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableApplyCheckRecord.ApplyDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.ApplyDateColumn] = value;
                }
            }
            
            public int ApplySheetHead_Pk {
                get {
                    try {
                        return ((int)(this[this.tableApplyCheckRecord.ApplySheetHead_PkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.ApplySheetHead_PkColumn] = value;
                }
            }
            
            public string personCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.personCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.personCodeColumn] = value;
                }
            }
            
            public string CheckName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckNameColumn] = value;
                }
            }
            
            public int IsDisplays {
                get {
                    try {
                        return ((int)(this[this.tableApplyCheckRecord.IsDisplaysColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.IsDisplaysColumn] = value;
                }
            }
            
            public string DisplaysPersonCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.DisplaysPersonCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.DisplaysPersonCodeColumn] = value;
                }
            }
            
            public string displayName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.displayNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.displayNameColumn] = value;
                }
            }
            
            public System.DateTime Checkdate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableApplyCheckRecord.CheckdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckdateColumn] = value;
                }
            }
            
            public string FullCheckName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.FullCheckNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.FullCheckNameColumn] = value;
                }
            }
            
            public string CheckRole {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckRoleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckRoleColumn] = value;
                }
            }
            
            public string CheckRoleName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckRoleNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckRoleNameColumn] = value;
                }
            }
            
            public bool IsCheckCommentNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckCommentColumn);
            }
            
            public void SetCheckCommentNull() {
                this[this.tableApplyCheckRecord.CheckCommentColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsPassNull() {
                return this.IsNull(this.tableApplyCheckRecord.IsPassColumn);
            }
            
            public void SetIsPassNull() {
                this[this.tableApplyCheckRecord.IsPassColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetNoNull() {
                return this.IsNull(this.tableApplyCheckRecord.ApplySheetNoColumn);
            }
            
            public void SetApplySheetNoNull() {
                this[this.tableApplyCheckRecord.ApplySheetNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyDateNull() {
                return this.IsNull(this.tableApplyCheckRecord.ApplyDateColumn);
            }
            
            public void SetApplyDateNull() {
                this[this.tableApplyCheckRecord.ApplyDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetHead_PkNull() {
                return this.IsNull(this.tableApplyCheckRecord.ApplySheetHead_PkColumn);
            }
            
            public void SetApplySheetHead_PkNull() {
                this[this.tableApplyCheckRecord.ApplySheetHead_PkColumn] = System.Convert.DBNull;
            }
            
            public bool IspersonCodeNull() {
                return this.IsNull(this.tableApplyCheckRecord.personCodeColumn);
            }
            
            public void SetpersonCodeNull() {
                this[this.tableApplyCheckRecord.personCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckNameColumn);
            }
            
            public void SetCheckNameNull() {
                this[this.tableApplyCheckRecord.CheckNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsDisplaysNull() {
                return this.IsNull(this.tableApplyCheckRecord.IsDisplaysColumn);
            }
            
            public void SetIsDisplaysNull() {
                this[this.tableApplyCheckRecord.IsDisplaysColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisplaysPersonCodeNull() {
                return this.IsNull(this.tableApplyCheckRecord.DisplaysPersonCodeColumn);
            }
            
            public void SetDisplaysPersonCodeNull() {
                this[this.tableApplyCheckRecord.DisplaysPersonCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsdisplayNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.displayNameColumn);
            }
            
            public void SetdisplayNameNull() {
                this[this.tableApplyCheckRecord.displayNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckdateNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckdateColumn);
            }
            
            public void SetCheckdateNull() {
                this[this.tableApplyCheckRecord.CheckdateColumn] = System.Convert.DBNull;
            }
            
            public bool IsFullCheckNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.FullCheckNameColumn);
            }
            
            public void SetFullCheckNameNull() {
                this[this.tableApplyCheckRecord.FullCheckNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckRoleNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckRoleColumn);
            }
            
            public void SetCheckRoleNull() {
                this[this.tableApplyCheckRecord.CheckRoleColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckRoleNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckRoleNameColumn);
            }
            
            public void SetCheckRoleNameNull() {
                this[this.tableApplyCheckRecord.CheckRoleNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyCheckRecordRowChangeEvent : EventArgs {
            
            private ApplyCheckRecordRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyCheckRecordRowChangeEvent(ApplyCheckRecordRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyCheckRecordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

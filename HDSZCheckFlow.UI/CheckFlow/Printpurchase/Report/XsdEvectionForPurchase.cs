//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2443
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HDSZCheckFlow.UI.CheckFlow.Printpurchase.Report {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class XsdEvectionForPurchase : DataSet {
        
        private BaseApplyEvectionDataTable tableBaseApplyEvection;
        
        private ApplyCheckRecordDataTable tableApplyCheckRecord;
        
        private ApplyBudgetInfoDataTable tableApplyBudgetInfo;
        
        private EvectionChargeDataTable tableEvectionCharge;
        
        public XsdEvectionForPurchase() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected XsdEvectionForPurchase(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BaseApplyEvection"] != null)) {
                    this.Tables.Add(new BaseApplyEvectionDataTable(ds.Tables["BaseApplyEvection"]));
                }
                if ((ds.Tables["ApplyCheckRecord"] != null)) {
                    this.Tables.Add(new ApplyCheckRecordDataTable(ds.Tables["ApplyCheckRecord"]));
                }
                if ((ds.Tables["ApplyBudgetInfo"] != null)) {
                    this.Tables.Add(new ApplyBudgetInfoDataTable(ds.Tables["ApplyBudgetInfo"]));
                }
                if ((ds.Tables["EvectionCharge"] != null)) {
                    this.Tables.Add(new EvectionChargeDataTable(ds.Tables["EvectionCharge"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseApplyEvectionDataTable BaseApplyEvection {
            get {
                return this.tableBaseApplyEvection;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyCheckRecordDataTable ApplyCheckRecord {
            get {
                return this.tableApplyCheckRecord;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyBudgetInfoDataTable ApplyBudgetInfo {
            get {
                return this.tableApplyBudgetInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EvectionChargeDataTable EvectionCharge {
            get {
                return this.tableEvectionCharge;
            }
        }
        
        public override DataSet Clone() {
            XsdEvectionForPurchase cln = ((XsdEvectionForPurchase)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["BaseApplyEvection"] != null)) {
                this.Tables.Add(new BaseApplyEvectionDataTable(ds.Tables["BaseApplyEvection"]));
            }
            if ((ds.Tables["ApplyCheckRecord"] != null)) {
                this.Tables.Add(new ApplyCheckRecordDataTable(ds.Tables["ApplyCheckRecord"]));
            }
            if ((ds.Tables["ApplyBudgetInfo"] != null)) {
                this.Tables.Add(new ApplyBudgetInfoDataTable(ds.Tables["ApplyBudgetInfo"]));
            }
            if ((ds.Tables["EvectionCharge"] != null)) {
                this.Tables.Add(new EvectionChargeDataTable(ds.Tables["EvectionCharge"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableBaseApplyEvection = ((BaseApplyEvectionDataTable)(this.Tables["BaseApplyEvection"]));
            if ((this.tableBaseApplyEvection != null)) {
                this.tableBaseApplyEvection.InitVars();
            }
            this.tableApplyCheckRecord = ((ApplyCheckRecordDataTable)(this.Tables["ApplyCheckRecord"]));
            if ((this.tableApplyCheckRecord != null)) {
                this.tableApplyCheckRecord.InitVars();
            }
            this.tableApplyBudgetInfo = ((ApplyBudgetInfoDataTable)(this.Tables["ApplyBudgetInfo"]));
            if ((this.tableApplyBudgetInfo != null)) {
                this.tableApplyBudgetInfo.InitVars();
            }
            this.tableEvectionCharge = ((EvectionChargeDataTable)(this.Tables["EvectionCharge"]));
            if ((this.tableEvectionCharge != null)) {
                this.tableEvectionCharge.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "XsdEvectionForPurchase";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/XsdEvectionForPurchase.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableBaseApplyEvection = new BaseApplyEvectionDataTable();
            this.Tables.Add(this.tableBaseApplyEvection);
            this.tableApplyCheckRecord = new ApplyCheckRecordDataTable();
            this.Tables.Add(this.tableApplyCheckRecord);
            this.tableApplyBudgetInfo = new ApplyBudgetInfoDataTable();
            this.Tables.Add(this.tableApplyBudgetInfo);
            this.tableEvectionCharge = new EvectionChargeDataTable();
            this.Tables.Add(this.tableEvectionCharge);
        }
        
        private bool ShouldSerializeBaseApplyEvection() {
            return false;
        }
        
        private bool ShouldSerializeApplyCheckRecord() {
            return false;
        }
        
        private bool ShouldSerializeApplyBudgetInfo() {
            return false;
        }
        
        private bool ShouldSerializeEvectionCharge() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void BaseApplyEvectionRowChangeEventHandler(object sender, BaseApplyEvectionRowChangeEvent e);
        
        public delegate void ApplyCheckRecordRowChangeEventHandler(object sender, ApplyCheckRecordRowChangeEvent e);
        
        public delegate void ApplyBudgetInfoRowChangeEventHandler(object sender, ApplyBudgetInfoRowChangeEvent e);
        
        public delegate void EvectionChargeRowChangeEventHandler(object sender, EvectionChargeRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseApplyEvectionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnApplySheetNo;
            
            private DataColumn columnName;
            
            private DataColumn columnDeptName;
            
            private DataColumn columnApplyDate;
            
            private DataColumn columnApplySheetHead_Pk;
            
            private DataColumn columnMoney;
            
            private DataColumn columnDispname;
            
            private DataColumn columnDateFrom;
            
            private DataColumn columnDateTo;
            
            private DataColumn columnGoCity;
            
            private DataColumn columnCodeName;
            
            private DataColumn columncurrcode;
            
            private DataColumn columnEvecionType;
            
            private DataColumn columnappClass;
            
            private DataColumn columnwithapps;
            
            private DataColumn columnwithwho;
            
            private DataColumn columnappduty;
            
            private DataColumn columnpreabroaddate;
            
            private DataColumn columnprebackdate;
            
            private DataColumn columnvisa;
            
            private DataColumn columnvisadate;
            
            private DataColumn columnpassport;
            
            private DataColumn columnpassportno;
            
            private DataColumn columnpassportdate;
            
            private DataColumn columnbacterin;
            
            private DataColumn columnbacterindate;
            
            private DataColumn columnmemo;
            
            private DataColumn columnlimitdartcle;
            
            private DataColumn columnlimittech;
            
            private DataColumn columncheckup;
            
            private DataColumn columnmeetcondition;
            
            private DataColumn columncheckupdate;
            
            private DataColumn columnExchangeRate;
            
            private DataColumn columnEvectionmemo;
            
            private DataColumn columnApplyPersonCode;
            
            internal BaseApplyEvectionDataTable() : 
                    base("BaseApplyEvection") {
                this.InitClass();
            }
            
            internal BaseApplyEvectionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ApplySheetNoColumn {
                get {
                    return this.columnApplySheetNo;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DeptNameColumn {
                get {
                    return this.columnDeptName;
                }
            }
            
            internal DataColumn ApplyDateColumn {
                get {
                    return this.columnApplyDate;
                }
            }
            
            internal DataColumn ApplySheetHead_PkColumn {
                get {
                    return this.columnApplySheetHead_Pk;
                }
            }
            
            internal DataColumn MoneyColumn {
                get {
                    return this.columnMoney;
                }
            }
            
            internal DataColumn DispnameColumn {
                get {
                    return this.columnDispname;
                }
            }
            
            internal DataColumn DateFromColumn {
                get {
                    return this.columnDateFrom;
                }
            }
            
            internal DataColumn DateToColumn {
                get {
                    return this.columnDateTo;
                }
            }
            
            internal DataColumn GoCityColumn {
                get {
                    return this.columnGoCity;
                }
            }
            
            internal DataColumn CodeNameColumn {
                get {
                    return this.columnCodeName;
                }
            }
            
            internal DataColumn currcodeColumn {
                get {
                    return this.columncurrcode;
                }
            }
            
            internal DataColumn EvecionTypeColumn {
                get {
                    return this.columnEvecionType;
                }
            }
            
            internal DataColumn appClassColumn {
                get {
                    return this.columnappClass;
                }
            }
            
            internal DataColumn withappsColumn {
                get {
                    return this.columnwithapps;
                }
            }
            
            internal DataColumn withwhoColumn {
                get {
                    return this.columnwithwho;
                }
            }
            
            internal DataColumn appdutyColumn {
                get {
                    return this.columnappduty;
                }
            }
            
            internal DataColumn preabroaddateColumn {
                get {
                    return this.columnpreabroaddate;
                }
            }
            
            internal DataColumn prebackdateColumn {
                get {
                    return this.columnprebackdate;
                }
            }
            
            internal DataColumn visaColumn {
                get {
                    return this.columnvisa;
                }
            }
            
            internal DataColumn visadateColumn {
                get {
                    return this.columnvisadate;
                }
            }
            
            internal DataColumn passportColumn {
                get {
                    return this.columnpassport;
                }
            }
            
            internal DataColumn passportnoColumn {
                get {
                    return this.columnpassportno;
                }
            }
            
            internal DataColumn passportdateColumn {
                get {
                    return this.columnpassportdate;
                }
            }
            
            internal DataColumn bacterinColumn {
                get {
                    return this.columnbacterin;
                }
            }
            
            internal DataColumn bacterindateColumn {
                get {
                    return this.columnbacterindate;
                }
            }
            
            internal DataColumn memoColumn {
                get {
                    return this.columnmemo;
                }
            }
            
            internal DataColumn limitdartcleColumn {
                get {
                    return this.columnlimitdartcle;
                }
            }
            
            internal DataColumn limittechColumn {
                get {
                    return this.columnlimittech;
                }
            }
            
            internal DataColumn checkupColumn {
                get {
                    return this.columncheckup;
                }
            }
            
            internal DataColumn meetconditionColumn {
                get {
                    return this.columnmeetcondition;
                }
            }
            
            internal DataColumn checkupdateColumn {
                get {
                    return this.columncheckupdate;
                }
            }
            
            internal DataColumn ExchangeRateColumn {
                get {
                    return this.columnExchangeRate;
                }
            }
            
            internal DataColumn EvectionmemoColumn {
                get {
                    return this.columnEvectionmemo;
                }
            }
            
            internal DataColumn ApplyPersonCodeColumn {
                get {
                    return this.columnApplyPersonCode;
                }
            }
            
            public BaseApplyEvectionRow this[int index] {
                get {
                    return ((BaseApplyEvectionRow)(this.Rows[index]));
                }
            }
            
            public event BaseApplyEvectionRowChangeEventHandler BaseApplyEvectionRowChanged;
            
            public event BaseApplyEvectionRowChangeEventHandler BaseApplyEvectionRowChanging;
            
            public event BaseApplyEvectionRowChangeEventHandler BaseApplyEvectionRowDeleted;
            
            public event BaseApplyEvectionRowChangeEventHandler BaseApplyEvectionRowDeleting;
            
            public void AddBaseApplyEvectionRow(BaseApplyEvectionRow row) {
                this.Rows.Add(row);
            }
            
            public BaseApplyEvectionRow AddBaseApplyEvectionRow(
                        string ApplySheetNo, 
                        string Name, 
                        string DeptName, 
                        string ApplyDate, 
                        string ApplySheetHead_Pk, 
                        System.Decimal Money, 
                        string Dispname, 
                        System.DateTime DateFrom, 
                        System.DateTime DateTo, 
                        string GoCity, 
                        string CodeName, 
                        string currcode, 
                        string EvecionType, 
                        string appClass, 
                        int withapps, 
                        string withwho, 
                        string appduty, 
                        string preabroaddate, 
                        string prebackdate, 
                        string visa, 
                        string visadate, 
                        string passport, 
                        string passportno, 
                        string passportdate, 
                        string bacterin, 
                        string bacterindate, 
                        string memo, 
                        string limitdartcle, 
                        string limittech, 
                        string checkup, 
                        string meetcondition, 
                        string checkupdate, 
                        string ExchangeRate, 
                        string Evectionmemo, 
                        string ApplyPersonCode) {
                BaseApplyEvectionRow rowBaseApplyEvectionRow = ((BaseApplyEvectionRow)(this.NewRow()));
                rowBaseApplyEvectionRow.ItemArray = new object[] {
                        ApplySheetNo,
                        Name,
                        DeptName,
                        ApplyDate,
                        ApplySheetHead_Pk,
                        Money,
                        Dispname,
                        DateFrom,
                        DateTo,
                        GoCity,
                        CodeName,
                        currcode,
                        EvecionType,
                        appClass,
                        withapps,
                        withwho,
                        appduty,
                        preabroaddate,
                        prebackdate,
                        visa,
                        visadate,
                        passport,
                        passportno,
                        passportdate,
                        bacterin,
                        bacterindate,
                        memo,
                        limitdartcle,
                        limittech,
                        checkup,
                        meetcondition,
                        checkupdate,
                        ExchangeRate,
                        Evectionmemo,
                        ApplyPersonCode};
                this.Rows.Add(rowBaseApplyEvectionRow);
                return rowBaseApplyEvectionRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BaseApplyEvectionDataTable cln = ((BaseApplyEvectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BaseApplyEvectionDataTable();
            }
            
            internal void InitVars() {
                this.columnApplySheetNo = this.Columns["ApplySheetNo"];
                this.columnName = this.Columns["Name"];
                this.columnDeptName = this.Columns["DeptName"];
                this.columnApplyDate = this.Columns["ApplyDate"];
                this.columnApplySheetHead_Pk = this.Columns["ApplySheetHead_Pk"];
                this.columnMoney = this.Columns["Money"];
                this.columnDispname = this.Columns["Dispname"];
                this.columnDateFrom = this.Columns["DateFrom"];
                this.columnDateTo = this.Columns["DateTo"];
                this.columnGoCity = this.Columns["GoCity"];
                this.columnCodeName = this.Columns["CodeName"];
                this.columncurrcode = this.Columns["currcode"];
                this.columnEvecionType = this.Columns["EvecionType"];
                this.columnappClass = this.Columns["appClass"];
                this.columnwithapps = this.Columns["withapps"];
                this.columnwithwho = this.Columns["withwho"];
                this.columnappduty = this.Columns["appduty"];
                this.columnpreabroaddate = this.Columns["preabroaddate"];
                this.columnprebackdate = this.Columns["prebackdate"];
                this.columnvisa = this.Columns["visa"];
                this.columnvisadate = this.Columns["visadate"];
                this.columnpassport = this.Columns["passport"];
                this.columnpassportno = this.Columns["passportno"];
                this.columnpassportdate = this.Columns["passportdate"];
                this.columnbacterin = this.Columns["bacterin"];
                this.columnbacterindate = this.Columns["bacterindate"];
                this.columnmemo = this.Columns["memo"];
                this.columnlimitdartcle = this.Columns["limitdartcle"];
                this.columnlimittech = this.Columns["limittech"];
                this.columncheckup = this.Columns["checkup"];
                this.columnmeetcondition = this.Columns["meetcondition"];
                this.columncheckupdate = this.Columns["checkupdate"];
                this.columnExchangeRate = this.Columns["ExchangeRate"];
                this.columnEvectionmemo = this.Columns["Evectionmemo"];
                this.columnApplyPersonCode = this.Columns["ApplyPersonCode"];
            }
            
            private void InitClass() {
                this.columnApplySheetNo = new DataColumn("ApplySheetNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetNo);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDeptName = new DataColumn("DeptName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeptName);
                this.columnApplyDate = new DataColumn("ApplyDate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyDate);
                this.columnApplySheetHead_Pk = new DataColumn("ApplySheetHead_Pk", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_Pk);
                this.columnMoney = new DataColumn("Money", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMoney);
                this.columnDispname = new DataColumn("Dispname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDispname);
                this.columnDateFrom = new DataColumn("DateFrom", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateFrom);
                this.columnDateTo = new DataColumn("DateTo", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateTo);
                this.columnGoCity = new DataColumn("GoCity", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGoCity);
                this.columnCodeName = new DataColumn("CodeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeName);
                this.columncurrcode = new DataColumn("currcode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncurrcode);
                this.columnEvecionType = new DataColumn("EvecionType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEvecionType);
                this.columnappClass = new DataColumn("appClass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnappClass);
                this.columnwithapps = new DataColumn("withapps", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnwithapps);
                this.columnwithwho = new DataColumn("withwho", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnwithwho);
                this.columnappduty = new DataColumn("appduty", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnappduty);
                this.columnpreabroaddate = new DataColumn("preabroaddate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpreabroaddate);
                this.columnprebackdate = new DataColumn("prebackdate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprebackdate);
                this.columnvisa = new DataColumn("visa", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvisa);
                this.columnvisadate = new DataColumn("visadate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvisadate);
                this.columnpassport = new DataColumn("passport", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpassport);
                this.columnpassportno = new DataColumn("passportno", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpassportno);
                this.columnpassportdate = new DataColumn("passportdate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpassportdate);
                this.columnbacterin = new DataColumn("bacterin", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbacterin);
                this.columnbacterindate = new DataColumn("bacterindate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbacterindate);
                this.columnmemo = new DataColumn("memo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmemo);
                this.columnlimitdartcle = new DataColumn("limitdartcle", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlimitdartcle);
                this.columnlimittech = new DataColumn("limittech", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlimittech);
                this.columncheckup = new DataColumn("checkup", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncheckup);
                this.columnmeetcondition = new DataColumn("meetcondition", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmeetcondition);
                this.columncheckupdate = new DataColumn("checkupdate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncheckupdate);
                this.columnExchangeRate = new DataColumn("ExchangeRate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExchangeRate);
                this.columnEvectionmemo = new DataColumn("Evectionmemo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEvectionmemo);
                this.columnApplyPersonCode = new DataColumn("ApplyPersonCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyPersonCode);
            }
            
            public BaseApplyEvectionRow NewBaseApplyEvectionRow() {
                return ((BaseApplyEvectionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BaseApplyEvectionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BaseApplyEvectionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseApplyEvectionRowChanged != null)) {
                    this.BaseApplyEvectionRowChanged(this, new BaseApplyEvectionRowChangeEvent(((BaseApplyEvectionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseApplyEvectionRowChanging != null)) {
                    this.BaseApplyEvectionRowChanging(this, new BaseApplyEvectionRowChangeEvent(((BaseApplyEvectionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseApplyEvectionRowDeleted != null)) {
                    this.BaseApplyEvectionRowDeleted(this, new BaseApplyEvectionRowChangeEvent(((BaseApplyEvectionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseApplyEvectionRowDeleting != null)) {
                    this.BaseApplyEvectionRowDeleting(this, new BaseApplyEvectionRowChangeEvent(((BaseApplyEvectionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBaseApplyEvectionRow(BaseApplyEvectionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseApplyEvectionRow : DataRow {
            
            private BaseApplyEvectionDataTable tableBaseApplyEvection;
            
            internal BaseApplyEvectionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseApplyEvection = ((BaseApplyEvectionDataTable)(this.Table));
            }
            
            public string ApplySheetNo {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.ApplySheetNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.ApplySheetNoColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.NameColumn] = value;
                }
            }
            
            public string DeptName {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.DeptNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.DeptNameColumn] = value;
                }
            }
            
            public string ApplyDate {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.ApplyDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.ApplyDateColumn] = value;
                }
            }
            
            public string ApplySheetHead_Pk {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.ApplySheetHead_PkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.ApplySheetHead_PkColumn] = value;
                }
            }
            
            public System.Decimal Money {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableBaseApplyEvection.MoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.MoneyColumn] = value;
                }
            }
            
            public string Dispname {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.DispnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.DispnameColumn] = value;
                }
            }
            
            public System.DateTime DateFrom {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBaseApplyEvection.DateFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.DateFromColumn] = value;
                }
            }
            
            public System.DateTime DateTo {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBaseApplyEvection.DateToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.DateToColumn] = value;
                }
            }
            
            public string GoCity {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.GoCityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.GoCityColumn] = value;
                }
            }
            
            public string CodeName {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.CodeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.CodeNameColumn] = value;
                }
            }
            
            public string currcode {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.currcodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.currcodeColumn] = value;
                }
            }
            
            public string EvecionType {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.EvecionTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.EvecionTypeColumn] = value;
                }
            }
            
            public string appClass {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.appClassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.appClassColumn] = value;
                }
            }
            
            public int withapps {
                get {
                    try {
                        return ((int)(this[this.tableBaseApplyEvection.withappsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.withappsColumn] = value;
                }
            }
            
            public string withwho {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.withwhoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.withwhoColumn] = value;
                }
            }
            
            public string appduty {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.appdutyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.appdutyColumn] = value;
                }
            }
            
            public string preabroaddate {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.preabroaddateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.preabroaddateColumn] = value;
                }
            }
            
            public string prebackdate {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.prebackdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.prebackdateColumn] = value;
                }
            }
            
            public string visa {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.visaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.visaColumn] = value;
                }
            }
            
            public string visadate {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.visadateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.visadateColumn] = value;
                }
            }
            
            public string passport {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.passportColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.passportColumn] = value;
                }
            }
            
            public string passportno {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.passportnoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.passportnoColumn] = value;
                }
            }
            
            public string passportdate {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.passportdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.passportdateColumn] = value;
                }
            }
            
            public string bacterin {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.bacterinColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.bacterinColumn] = value;
                }
            }
            
            public string bacterindate {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.bacterindateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.bacterindateColumn] = value;
                }
            }
            
            public string memo {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.memoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.memoColumn] = value;
                }
            }
            
            public string limitdartcle {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.limitdartcleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.limitdartcleColumn] = value;
                }
            }
            
            public string limittech {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.limittechColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.limittechColumn] = value;
                }
            }
            
            public string checkup {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.checkupColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.checkupColumn] = value;
                }
            }
            
            public string meetcondition {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.meetconditionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.meetconditionColumn] = value;
                }
            }
            
            public string checkupdate {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.checkupdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.checkupdateColumn] = value;
                }
            }
            
            public string ExchangeRate {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.ExchangeRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.ExchangeRateColumn] = value;
                }
            }
            
            public string Evectionmemo {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.EvectionmemoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.EvectionmemoColumn] = value;
                }
            }
            
            public string ApplyPersonCode {
                get {
                    try {
                        return ((string)(this[this.tableBaseApplyEvection.ApplyPersonCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBaseApplyEvection.ApplyPersonCodeColumn] = value;
                }
            }
            
            public bool IsApplySheetNoNull() {
                return this.IsNull(this.tableBaseApplyEvection.ApplySheetNoColumn);
            }
            
            public void SetApplySheetNoNull() {
                this[this.tableBaseApplyEvection.ApplySheetNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableBaseApplyEvection.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableBaseApplyEvection.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeptNameNull() {
                return this.IsNull(this.tableBaseApplyEvection.DeptNameColumn);
            }
            
            public void SetDeptNameNull() {
                this[this.tableBaseApplyEvection.DeptNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyDateNull() {
                return this.IsNull(this.tableBaseApplyEvection.ApplyDateColumn);
            }
            
            public void SetApplyDateNull() {
                this[this.tableBaseApplyEvection.ApplyDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetHead_PkNull() {
                return this.IsNull(this.tableBaseApplyEvection.ApplySheetHead_PkColumn);
            }
            
            public void SetApplySheetHead_PkNull() {
                this[this.tableBaseApplyEvection.ApplySheetHead_PkColumn] = System.Convert.DBNull;
            }
            
            public bool IsMoneyNull() {
                return this.IsNull(this.tableBaseApplyEvection.MoneyColumn);
            }
            
            public void SetMoneyNull() {
                this[this.tableBaseApplyEvection.MoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsDispnameNull() {
                return this.IsNull(this.tableBaseApplyEvection.DispnameColumn);
            }
            
            public void SetDispnameNull() {
                this[this.tableBaseApplyEvection.DispnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDateFromNull() {
                return this.IsNull(this.tableBaseApplyEvection.DateFromColumn);
            }
            
            public void SetDateFromNull() {
                this[this.tableBaseApplyEvection.DateFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsDateToNull() {
                return this.IsNull(this.tableBaseApplyEvection.DateToColumn);
            }
            
            public void SetDateToNull() {
                this[this.tableBaseApplyEvection.DateToColumn] = System.Convert.DBNull;
            }
            
            public bool IsGoCityNull() {
                return this.IsNull(this.tableBaseApplyEvection.GoCityColumn);
            }
            
            public void SetGoCityNull() {
                this[this.tableBaseApplyEvection.GoCityColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeNameNull() {
                return this.IsNull(this.tableBaseApplyEvection.CodeNameColumn);
            }
            
            public void SetCodeNameNull() {
                this[this.tableBaseApplyEvection.CodeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IscurrcodeNull() {
                return this.IsNull(this.tableBaseApplyEvection.currcodeColumn);
            }
            
            public void SetcurrcodeNull() {
                this[this.tableBaseApplyEvection.currcodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsEvecionTypeNull() {
                return this.IsNull(this.tableBaseApplyEvection.EvecionTypeColumn);
            }
            
            public void SetEvecionTypeNull() {
                this[this.tableBaseApplyEvection.EvecionTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsappClassNull() {
                return this.IsNull(this.tableBaseApplyEvection.appClassColumn);
            }
            
            public void SetappClassNull() {
                this[this.tableBaseApplyEvection.appClassColumn] = System.Convert.DBNull;
            }
            
            public bool IswithappsNull() {
                return this.IsNull(this.tableBaseApplyEvection.withappsColumn);
            }
            
            public void SetwithappsNull() {
                this[this.tableBaseApplyEvection.withappsColumn] = System.Convert.DBNull;
            }
            
            public bool IswithwhoNull() {
                return this.IsNull(this.tableBaseApplyEvection.withwhoColumn);
            }
            
            public void SetwithwhoNull() {
                this[this.tableBaseApplyEvection.withwhoColumn] = System.Convert.DBNull;
            }
            
            public bool IsappdutyNull() {
                return this.IsNull(this.tableBaseApplyEvection.appdutyColumn);
            }
            
            public void SetappdutyNull() {
                this[this.tableBaseApplyEvection.appdutyColumn] = System.Convert.DBNull;
            }
            
            public bool IspreabroaddateNull() {
                return this.IsNull(this.tableBaseApplyEvection.preabroaddateColumn);
            }
            
            public void SetpreabroaddateNull() {
                this[this.tableBaseApplyEvection.preabroaddateColumn] = System.Convert.DBNull;
            }
            
            public bool IsprebackdateNull() {
                return this.IsNull(this.tableBaseApplyEvection.prebackdateColumn);
            }
            
            public void SetprebackdateNull() {
                this[this.tableBaseApplyEvection.prebackdateColumn] = System.Convert.DBNull;
            }
            
            public bool IsvisaNull() {
                return this.IsNull(this.tableBaseApplyEvection.visaColumn);
            }
            
            public void SetvisaNull() {
                this[this.tableBaseApplyEvection.visaColumn] = System.Convert.DBNull;
            }
            
            public bool IsvisadateNull() {
                return this.IsNull(this.tableBaseApplyEvection.visadateColumn);
            }
            
            public void SetvisadateNull() {
                this[this.tableBaseApplyEvection.visadateColumn] = System.Convert.DBNull;
            }
            
            public bool IspassportNull() {
                return this.IsNull(this.tableBaseApplyEvection.passportColumn);
            }
            
            public void SetpassportNull() {
                this[this.tableBaseApplyEvection.passportColumn] = System.Convert.DBNull;
            }
            
            public bool IspassportnoNull() {
                return this.IsNull(this.tableBaseApplyEvection.passportnoColumn);
            }
            
            public void SetpassportnoNull() {
                this[this.tableBaseApplyEvection.passportnoColumn] = System.Convert.DBNull;
            }
            
            public bool IspassportdateNull() {
                return this.IsNull(this.tableBaseApplyEvection.passportdateColumn);
            }
            
            public void SetpassportdateNull() {
                this[this.tableBaseApplyEvection.passportdateColumn] = System.Convert.DBNull;
            }
            
            public bool IsbacterinNull() {
                return this.IsNull(this.tableBaseApplyEvection.bacterinColumn);
            }
            
            public void SetbacterinNull() {
                this[this.tableBaseApplyEvection.bacterinColumn] = System.Convert.DBNull;
            }
            
            public bool IsbacterindateNull() {
                return this.IsNull(this.tableBaseApplyEvection.bacterindateColumn);
            }
            
            public void SetbacterindateNull() {
                this[this.tableBaseApplyEvection.bacterindateColumn] = System.Convert.DBNull;
            }
            
            public bool IsmemoNull() {
                return this.IsNull(this.tableBaseApplyEvection.memoColumn);
            }
            
            public void SetmemoNull() {
                this[this.tableBaseApplyEvection.memoColumn] = System.Convert.DBNull;
            }
            
            public bool IslimitdartcleNull() {
                return this.IsNull(this.tableBaseApplyEvection.limitdartcleColumn);
            }
            
            public void SetlimitdartcleNull() {
                this[this.tableBaseApplyEvection.limitdartcleColumn] = System.Convert.DBNull;
            }
            
            public bool IslimittechNull() {
                return this.IsNull(this.tableBaseApplyEvection.limittechColumn);
            }
            
            public void SetlimittechNull() {
                this[this.tableBaseApplyEvection.limittechColumn] = System.Convert.DBNull;
            }
            
            public bool IscheckupNull() {
                return this.IsNull(this.tableBaseApplyEvection.checkupColumn);
            }
            
            public void SetcheckupNull() {
                this[this.tableBaseApplyEvection.checkupColumn] = System.Convert.DBNull;
            }
            
            public bool IsmeetconditionNull() {
                return this.IsNull(this.tableBaseApplyEvection.meetconditionColumn);
            }
            
            public void SetmeetconditionNull() {
                this[this.tableBaseApplyEvection.meetconditionColumn] = System.Convert.DBNull;
            }
            
            public bool IscheckupdateNull() {
                return this.IsNull(this.tableBaseApplyEvection.checkupdateColumn);
            }
            
            public void SetcheckupdateNull() {
                this[this.tableBaseApplyEvection.checkupdateColumn] = System.Convert.DBNull;
            }
            
            public bool IsExchangeRateNull() {
                return this.IsNull(this.tableBaseApplyEvection.ExchangeRateColumn);
            }
            
            public void SetExchangeRateNull() {
                this[this.tableBaseApplyEvection.ExchangeRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsEvectionmemoNull() {
                return this.IsNull(this.tableBaseApplyEvection.EvectionmemoColumn);
            }
            
            public void SetEvectionmemoNull() {
                this[this.tableBaseApplyEvection.EvectionmemoColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyPersonCodeNull() {
                return this.IsNull(this.tableBaseApplyEvection.ApplyPersonCodeColumn);
            }
            
            public void SetApplyPersonCodeNull() {
                this[this.tableBaseApplyEvection.ApplyPersonCodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseApplyEvectionRowChangeEvent : EventArgs {
            
            private BaseApplyEvectionRow eventRow;
            
            private DataRowAction eventAction;
            
            public BaseApplyEvectionRowChangeEvent(BaseApplyEvectionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BaseApplyEvectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyCheckRecordDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCheckComment;
            
            private DataColumn columnIsPass;
            
            private DataColumn columnApplySheetNo;
            
            private DataColumn columnApplyDate;
            
            private DataColumn columnApplySheetHead_Pk;
            
            private DataColumn columnpersonCode;
            
            private DataColumn columnCheckName;
            
            private DataColumn columnIsDisplays;
            
            private DataColumn columnDisplaysPersonCode;
            
            private DataColumn columndisplayName;
            
            private DataColumn columnCheckdate;
            
            private DataColumn columnFullCheckName;
            
            private DataColumn columnCheckRole;
            
            private DataColumn columnCheckRoleName;
            
            internal ApplyCheckRecordDataTable() : 
                    base("ApplyCheckRecord") {
                this.InitClass();
            }
            
            internal ApplyCheckRecordDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CheckCommentColumn {
                get {
                    return this.columnCheckComment;
                }
            }
            
            internal DataColumn IsPassColumn {
                get {
                    return this.columnIsPass;
                }
            }
            
            internal DataColumn ApplySheetNoColumn {
                get {
                    return this.columnApplySheetNo;
                }
            }
            
            internal DataColumn ApplyDateColumn {
                get {
                    return this.columnApplyDate;
                }
            }
            
            internal DataColumn ApplySheetHead_PkColumn {
                get {
                    return this.columnApplySheetHead_Pk;
                }
            }
            
            internal DataColumn personCodeColumn {
                get {
                    return this.columnpersonCode;
                }
            }
            
            internal DataColumn CheckNameColumn {
                get {
                    return this.columnCheckName;
                }
            }
            
            internal DataColumn IsDisplaysColumn {
                get {
                    return this.columnIsDisplays;
                }
            }
            
            internal DataColumn DisplaysPersonCodeColumn {
                get {
                    return this.columnDisplaysPersonCode;
                }
            }
            
            internal DataColumn displayNameColumn {
                get {
                    return this.columndisplayName;
                }
            }
            
            internal DataColumn CheckdateColumn {
                get {
                    return this.columnCheckdate;
                }
            }
            
            internal DataColumn FullCheckNameColumn {
                get {
                    return this.columnFullCheckName;
                }
            }
            
            internal DataColumn CheckRoleColumn {
                get {
                    return this.columnCheckRole;
                }
            }
            
            internal DataColumn CheckRoleNameColumn {
                get {
                    return this.columnCheckRoleName;
                }
            }
            
            public ApplyCheckRecordRow this[int index] {
                get {
                    return ((ApplyCheckRecordRow)(this.Rows[index]));
                }
            }
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowChanged;
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowChanging;
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowDeleted;
            
            public event ApplyCheckRecordRowChangeEventHandler ApplyCheckRecordRowDeleting;
            
            public void AddApplyCheckRecordRow(ApplyCheckRecordRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyCheckRecordRow AddApplyCheckRecordRow(string CheckComment, string IsPass, string ApplySheetNo, System.DateTime ApplyDate, string personCode, string CheckName, int IsDisplays, string DisplaysPersonCode, string displayName, System.DateTime Checkdate, string FullCheckName, string CheckRole, string CheckRoleName) {
                ApplyCheckRecordRow rowApplyCheckRecordRow = ((ApplyCheckRecordRow)(this.NewRow()));
                rowApplyCheckRecordRow.ItemArray = new object[] {
                        CheckComment,
                        IsPass,
                        ApplySheetNo,
                        ApplyDate,
                        null,
                        personCode,
                        CheckName,
                        IsDisplays,
                        DisplaysPersonCode,
                        displayName,
                        Checkdate,
                        FullCheckName,
                        CheckRole,
                        CheckRoleName};
                this.Rows.Add(rowApplyCheckRecordRow);
                return rowApplyCheckRecordRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyCheckRecordDataTable cln = ((ApplyCheckRecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyCheckRecordDataTable();
            }
            
            internal void InitVars() {
                this.columnCheckComment = this.Columns["CheckComment"];
                this.columnIsPass = this.Columns["IsPass"];
                this.columnApplySheetNo = this.Columns["ApplySheetNo"];
                this.columnApplyDate = this.Columns["ApplyDate"];
                this.columnApplySheetHead_Pk = this.Columns["ApplySheetHead_Pk"];
                this.columnpersonCode = this.Columns["personCode"];
                this.columnCheckName = this.Columns["CheckName"];
                this.columnIsDisplays = this.Columns["IsDisplays"];
                this.columnDisplaysPersonCode = this.Columns["DisplaysPersonCode"];
                this.columndisplayName = this.Columns["displayName"];
                this.columnCheckdate = this.Columns["Checkdate"];
                this.columnFullCheckName = this.Columns["FullCheckName"];
                this.columnCheckRole = this.Columns["CheckRole"];
                this.columnCheckRoleName = this.Columns["CheckRoleName"];
            }
            
            private void InitClass() {
                this.columnCheckComment = new DataColumn("CheckComment", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckComment);
                this.columnIsPass = new DataColumn("IsPass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsPass);
                this.columnApplySheetNo = new DataColumn("ApplySheetNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetNo);
                this.columnApplyDate = new DataColumn("ApplyDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyDate);
                this.columnApplySheetHead_Pk = new DataColumn("ApplySheetHead_Pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_Pk);
                this.columnpersonCode = new DataColumn("personCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpersonCode);
                this.columnCheckName = new DataColumn("CheckName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckName);
                this.columnIsDisplays = new DataColumn("IsDisplays", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDisplays);
                this.columnDisplaysPersonCode = new DataColumn("DisplaysPersonCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDisplaysPersonCode);
                this.columndisplayName = new DataColumn("displayName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndisplayName);
                this.columnCheckdate = new DataColumn("Checkdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckdate);
                this.columnFullCheckName = new DataColumn("FullCheckName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFullCheckName);
                this.columnCheckRole = new DataColumn("CheckRole", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckRole);
                this.columnCheckRoleName = new DataColumn("CheckRoleName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckRoleName);
                this.columnApplySheetHead_Pk.AutoIncrement = true;
                this.columnApplySheetHead_Pk.ReadOnly = true;
                this.columnFullCheckName.ReadOnly = true;
            }
            
            public ApplyCheckRecordRow NewApplyCheckRecordRow() {
                return ((ApplyCheckRecordRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyCheckRecordRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyCheckRecordRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyCheckRecordRowChanged != null)) {
                    this.ApplyCheckRecordRowChanged(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyCheckRecordRowChanging != null)) {
                    this.ApplyCheckRecordRowChanging(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyCheckRecordRowDeleted != null)) {
                    this.ApplyCheckRecordRowDeleted(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyCheckRecordRowDeleting != null)) {
                    this.ApplyCheckRecordRowDeleting(this, new ApplyCheckRecordRowChangeEvent(((ApplyCheckRecordRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyCheckRecordRow(ApplyCheckRecordRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyCheckRecordRow : DataRow {
            
            private ApplyCheckRecordDataTable tableApplyCheckRecord;
            
            internal ApplyCheckRecordRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyCheckRecord = ((ApplyCheckRecordDataTable)(this.Table));
            }
            
            public string CheckComment {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckCommentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckCommentColumn] = value;
                }
            }
            
            public string IsPass {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.IsPassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.IsPassColumn] = value;
                }
            }
            
            public string ApplySheetNo {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.ApplySheetNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.ApplySheetNoColumn] = value;
                }
            }
            
            public System.DateTime ApplyDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableApplyCheckRecord.ApplyDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.ApplyDateColumn] = value;
                }
            }
            
            public int ApplySheetHead_Pk {
                get {
                    try {
                        return ((int)(this[this.tableApplyCheckRecord.ApplySheetHead_PkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.ApplySheetHead_PkColumn] = value;
                }
            }
            
            public string personCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.personCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.personCodeColumn] = value;
                }
            }
            
            public string CheckName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckNameColumn] = value;
                }
            }
            
            public int IsDisplays {
                get {
                    try {
                        return ((int)(this[this.tableApplyCheckRecord.IsDisplaysColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.IsDisplaysColumn] = value;
                }
            }
            
            public string DisplaysPersonCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.DisplaysPersonCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.DisplaysPersonCodeColumn] = value;
                }
            }
            
            public string displayName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.displayNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.displayNameColumn] = value;
                }
            }
            
            public System.DateTime Checkdate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableApplyCheckRecord.CheckdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckdateColumn] = value;
                }
            }
            
            public string FullCheckName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.FullCheckNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.FullCheckNameColumn] = value;
                }
            }
            
            public string CheckRole {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckRoleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckRoleColumn] = value;
                }
            }
            
            public string CheckRoleName {
                get {
                    try {
                        return ((string)(this[this.tableApplyCheckRecord.CheckRoleNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyCheckRecord.CheckRoleNameColumn] = value;
                }
            }
            
            public bool IsCheckCommentNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckCommentColumn);
            }
            
            public void SetCheckCommentNull() {
                this[this.tableApplyCheckRecord.CheckCommentColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsPassNull() {
                return this.IsNull(this.tableApplyCheckRecord.IsPassColumn);
            }
            
            public void SetIsPassNull() {
                this[this.tableApplyCheckRecord.IsPassColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetNoNull() {
                return this.IsNull(this.tableApplyCheckRecord.ApplySheetNoColumn);
            }
            
            public void SetApplySheetNoNull() {
                this[this.tableApplyCheckRecord.ApplySheetNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyDateNull() {
                return this.IsNull(this.tableApplyCheckRecord.ApplyDateColumn);
            }
            
            public void SetApplyDateNull() {
                this[this.tableApplyCheckRecord.ApplyDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetHead_PkNull() {
                return this.IsNull(this.tableApplyCheckRecord.ApplySheetHead_PkColumn);
            }
            
            public void SetApplySheetHead_PkNull() {
                this[this.tableApplyCheckRecord.ApplySheetHead_PkColumn] = System.Convert.DBNull;
            }
            
            public bool IspersonCodeNull() {
                return this.IsNull(this.tableApplyCheckRecord.personCodeColumn);
            }
            
            public void SetpersonCodeNull() {
                this[this.tableApplyCheckRecord.personCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckNameColumn);
            }
            
            public void SetCheckNameNull() {
                this[this.tableApplyCheckRecord.CheckNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsDisplaysNull() {
                return this.IsNull(this.tableApplyCheckRecord.IsDisplaysColumn);
            }
            
            public void SetIsDisplaysNull() {
                this[this.tableApplyCheckRecord.IsDisplaysColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisplaysPersonCodeNull() {
                return this.IsNull(this.tableApplyCheckRecord.DisplaysPersonCodeColumn);
            }
            
            public void SetDisplaysPersonCodeNull() {
                this[this.tableApplyCheckRecord.DisplaysPersonCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsdisplayNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.displayNameColumn);
            }
            
            public void SetdisplayNameNull() {
                this[this.tableApplyCheckRecord.displayNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckdateNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckdateColumn);
            }
            
            public void SetCheckdateNull() {
                this[this.tableApplyCheckRecord.CheckdateColumn] = System.Convert.DBNull;
            }
            
            public bool IsFullCheckNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.FullCheckNameColumn);
            }
            
            public void SetFullCheckNameNull() {
                this[this.tableApplyCheckRecord.FullCheckNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckRoleNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckRoleColumn);
            }
            
            public void SetCheckRoleNull() {
                this[this.tableApplyCheckRecord.CheckRoleColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckRoleNameNull() {
                return this.IsNull(this.tableApplyCheckRecord.CheckRoleNameColumn);
            }
            
            public void SetCheckRoleNameNull() {
                this[this.tableApplyCheckRecord.CheckRoleNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyCheckRecordRowChangeEvent : EventArgs {
            
            private ApplyCheckRecordRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyCheckRecordRowChangeEvent(ApplyCheckRecordRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyCheckRecordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnApplySheetHead_Pk;
            
            private DataColumn columnBudgetType;
            
            private DataColumn columnBudgetMoney;
            
            private DataColumn columnPlanMoney;
            
            private DataColumn columnChangeMoney;
            
            private DataColumn columnUsedMoney;
            
            private DataColumn columnThisMoey;
            
            private DataColumn columnLeaveMoney;
            
            private DataColumn columnReadyPayMoney;
            
            private DataColumn columnAllowOutMoney;
            
            internal ApplyBudgetInfoDataTable() : 
                    base("ApplyBudgetInfo") {
                this.InitClass();
            }
            
            internal ApplyBudgetInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ApplySheetHead_PkColumn {
                get {
                    return this.columnApplySheetHead_Pk;
                }
            }
            
            internal DataColumn BudgetTypeColumn {
                get {
                    return this.columnBudgetType;
                }
            }
            
            internal DataColumn BudgetMoneyColumn {
                get {
                    return this.columnBudgetMoney;
                }
            }
            
            internal DataColumn PlanMoneyColumn {
                get {
                    return this.columnPlanMoney;
                }
            }
            
            internal DataColumn ChangeMoneyColumn {
                get {
                    return this.columnChangeMoney;
                }
            }
            
            internal DataColumn UsedMoneyColumn {
                get {
                    return this.columnUsedMoney;
                }
            }
            
            internal DataColumn ThisMoeyColumn {
                get {
                    return this.columnThisMoey;
                }
            }
            
            internal DataColumn LeaveMoneyColumn {
                get {
                    return this.columnLeaveMoney;
                }
            }
            
            internal DataColumn ReadyPayMoneyColumn {
                get {
                    return this.columnReadyPayMoney;
                }
            }
            
            internal DataColumn AllowOutMoneyColumn {
                get {
                    return this.columnAllowOutMoney;
                }
            }
            
            public ApplyBudgetInfoRow this[int index] {
                get {
                    return ((ApplyBudgetInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowChanged;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowChanging;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowDeleted;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowDeleting;
            
            public void AddApplyBudgetInfoRow(ApplyBudgetInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyBudgetInfoRow AddApplyBudgetInfoRow(string BudgetType, System.Decimal BudgetMoney, System.Decimal PlanMoney, System.Decimal ChangeMoney, System.Decimal UsedMoney, System.Decimal ThisMoey, System.Decimal LeaveMoney, System.Decimal ReadyPayMoney, System.Decimal AllowOutMoney) {
                ApplyBudgetInfoRow rowApplyBudgetInfoRow = ((ApplyBudgetInfoRow)(this.NewRow()));
                rowApplyBudgetInfoRow.ItemArray = new object[] {
                        null,
                        BudgetType,
                        BudgetMoney,
                        PlanMoney,
                        ChangeMoney,
                        UsedMoney,
                        ThisMoey,
                        LeaveMoney,
                        ReadyPayMoney,
                        AllowOutMoney};
                this.Rows.Add(rowApplyBudgetInfoRow);
                return rowApplyBudgetInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyBudgetInfoDataTable cln = ((ApplyBudgetInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyBudgetInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnApplySheetHead_Pk = this.Columns["ApplySheetHead_Pk"];
                this.columnBudgetType = this.Columns["BudgetType"];
                this.columnBudgetMoney = this.Columns["BudgetMoney"];
                this.columnPlanMoney = this.Columns["PlanMoney"];
                this.columnChangeMoney = this.Columns["ChangeMoney"];
                this.columnUsedMoney = this.Columns["UsedMoney"];
                this.columnThisMoey = this.Columns["ThisMoey"];
                this.columnLeaveMoney = this.Columns["LeaveMoney"];
                this.columnReadyPayMoney = this.Columns["ReadyPayMoney"];
                this.columnAllowOutMoney = this.Columns["AllowOutMoney"];
            }
            
            private void InitClass() {
                this.columnApplySheetHead_Pk = new DataColumn("ApplySheetHead_Pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_Pk);
                this.columnBudgetType = new DataColumn("BudgetType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBudgetType);
                this.columnBudgetMoney = new DataColumn("BudgetMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBudgetMoney);
                this.columnPlanMoney = new DataColumn("PlanMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlanMoney);
                this.columnChangeMoney = new DataColumn("ChangeMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeMoney);
                this.columnUsedMoney = new DataColumn("UsedMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUsedMoney);
                this.columnThisMoey = new DataColumn("ThisMoey", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThisMoey);
                this.columnLeaveMoney = new DataColumn("LeaveMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLeaveMoney);
                this.columnReadyPayMoney = new DataColumn("ReadyPayMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReadyPayMoney);
                this.columnAllowOutMoney = new DataColumn("AllowOutMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAllowOutMoney);
                this.columnApplySheetHead_Pk.AutoIncrement = true;
                this.columnApplySheetHead_Pk.ReadOnly = true;
            }
            
            public ApplyBudgetInfoRow NewApplyBudgetInfoRow() {
                return ((ApplyBudgetInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyBudgetInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyBudgetInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyBudgetInfoRowChanged != null)) {
                    this.ApplyBudgetInfoRowChanged(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyBudgetInfoRowChanging != null)) {
                    this.ApplyBudgetInfoRowChanging(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyBudgetInfoRowDeleted != null)) {
                    this.ApplyBudgetInfoRowDeleted(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyBudgetInfoRowDeleting != null)) {
                    this.ApplyBudgetInfoRowDeleting(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyBudgetInfoRow(ApplyBudgetInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoRow : DataRow {
            
            private ApplyBudgetInfoDataTable tableApplyBudgetInfo;
            
            internal ApplyBudgetInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyBudgetInfo = ((ApplyBudgetInfoDataTable)(this.Table));
            }
            
            public int ApplySheetHead_Pk {
                get {
                    try {
                        return ((int)(this[this.tableApplyBudgetInfo.ApplySheetHead_PkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ApplySheetHead_PkColumn] = value;
                }
            }
            
            public string BudgetType {
                get {
                    try {
                        return ((string)(this[this.tableApplyBudgetInfo.BudgetTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.BudgetTypeColumn] = value;
                }
            }
            
            public System.Decimal BudgetMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.BudgetMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.BudgetMoneyColumn] = value;
                }
            }
            
            public System.Decimal PlanMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.PlanMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.PlanMoneyColumn] = value;
                }
            }
            
            public System.Decimal ChangeMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ChangeMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ChangeMoneyColumn] = value;
                }
            }
            
            public System.Decimal UsedMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.UsedMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.UsedMoneyColumn] = value;
                }
            }
            
            public System.Decimal ThisMoey {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ThisMoeyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ThisMoeyColumn] = value;
                }
            }
            
            public System.Decimal LeaveMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.LeaveMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.LeaveMoneyColumn] = value;
                }
            }
            
            public System.Decimal ReadyPayMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ReadyPayMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ReadyPayMoneyColumn] = value;
                }
            }
            
            public System.Decimal AllowOutMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.AllowOutMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.AllowOutMoneyColumn] = value;
                }
            }
            
            public bool IsApplySheetHead_PkNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ApplySheetHead_PkColumn);
            }
            
            public void SetApplySheetHead_PkNull() {
                this[this.tableApplyBudgetInfo.ApplySheetHead_PkColumn] = System.Convert.DBNull;
            }
            
            public bool IsBudgetTypeNull() {
                return this.IsNull(this.tableApplyBudgetInfo.BudgetTypeColumn);
            }
            
            public void SetBudgetTypeNull() {
                this[this.tableApplyBudgetInfo.BudgetTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsBudgetMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.BudgetMoneyColumn);
            }
            
            public void SetBudgetMoneyNull() {
                this[this.tableApplyBudgetInfo.BudgetMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsPlanMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.PlanMoneyColumn);
            }
            
            public void SetPlanMoneyNull() {
                this[this.tableApplyBudgetInfo.PlanMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsChangeMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ChangeMoneyColumn);
            }
            
            public void SetChangeMoneyNull() {
                this[this.tableApplyBudgetInfo.ChangeMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsUsedMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.UsedMoneyColumn);
            }
            
            public void SetUsedMoneyNull() {
                this[this.tableApplyBudgetInfo.UsedMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsThisMoeyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ThisMoeyColumn);
            }
            
            public void SetThisMoeyNull() {
                this[this.tableApplyBudgetInfo.ThisMoeyColumn] = System.Convert.DBNull;
            }
            
            public bool IsLeaveMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.LeaveMoneyColumn);
            }
            
            public void SetLeaveMoneyNull() {
                this[this.tableApplyBudgetInfo.LeaveMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsReadyPayMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ReadyPayMoneyColumn);
            }
            
            public void SetReadyPayMoneyNull() {
                this[this.tableApplyBudgetInfo.ReadyPayMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsAllowOutMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.AllowOutMoneyColumn);
            }
            
            public void SetAllowOutMoneyNull() {
                this[this.tableApplyBudgetInfo.AllowOutMoneyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoRowChangeEvent : EventArgs {
            
            private ApplyBudgetInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyBudgetInfoRowChangeEvent(ApplyBudgetInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyBudgetInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EvectionChargeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnApplySheetBody_EvectionCharge_pk;
            
            private DataColumn columnApplySheetHead_Pk;
            
            private DataColumn columnChargePro;
            
            private DataColumn columnMoney;
            
            private DataColumn columncurrcode;
            
            private DataColumn columnExchangeRate;
            
            private DataColumn columnmemo;
            
            private DataColumn columnCodeName;
            
            internal EvectionChargeDataTable() : 
                    base("EvectionCharge") {
                this.InitClass();
            }
            
            internal EvectionChargeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ApplySheetBody_EvectionCharge_pkColumn {
                get {
                    return this.columnApplySheetBody_EvectionCharge_pk;
                }
            }
            
            internal DataColumn ApplySheetHead_PkColumn {
                get {
                    return this.columnApplySheetHead_Pk;
                }
            }
            
            internal DataColumn ChargeProColumn {
                get {
                    return this.columnChargePro;
                }
            }
            
            internal DataColumn MoneyColumn {
                get {
                    return this.columnMoney;
                }
            }
            
            internal DataColumn currcodeColumn {
                get {
                    return this.columncurrcode;
                }
            }
            
            internal DataColumn ExchangeRateColumn {
                get {
                    return this.columnExchangeRate;
                }
            }
            
            internal DataColumn memoColumn {
                get {
                    return this.columnmemo;
                }
            }
            
            internal DataColumn CodeNameColumn {
                get {
                    return this.columnCodeName;
                }
            }
            
            public EvectionChargeRow this[int index] {
                get {
                    return ((EvectionChargeRow)(this.Rows[index]));
                }
            }
            
            public event EvectionChargeRowChangeEventHandler EvectionChargeRowChanged;
            
            public event EvectionChargeRowChangeEventHandler EvectionChargeRowChanging;
            
            public event EvectionChargeRowChangeEventHandler EvectionChargeRowDeleted;
            
            public event EvectionChargeRowChangeEventHandler EvectionChargeRowDeleting;
            
            public void AddEvectionChargeRow(EvectionChargeRow row) {
                this.Rows.Add(row);
            }
            
            public EvectionChargeRow AddEvectionChargeRow(int ApplySheetBody_EvectionCharge_pk, int ApplySheetHead_Pk, string ChargePro, System.Decimal Money, string currcode, System.Decimal ExchangeRate, string memo, string CodeName) {
                EvectionChargeRow rowEvectionChargeRow = ((EvectionChargeRow)(this.NewRow()));
                rowEvectionChargeRow.ItemArray = new object[] {
                        ApplySheetBody_EvectionCharge_pk,
                        ApplySheetHead_Pk,
                        ChargePro,
                        Money,
                        currcode,
                        ExchangeRate,
                        memo,
                        CodeName};
                this.Rows.Add(rowEvectionChargeRow);
                return rowEvectionChargeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EvectionChargeDataTable cln = ((EvectionChargeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EvectionChargeDataTable();
            }
            
            internal void InitVars() {
                this.columnApplySheetBody_EvectionCharge_pk = this.Columns["ApplySheetBody_EvectionCharge_pk"];
                this.columnApplySheetHead_Pk = this.Columns["ApplySheetHead_Pk"];
                this.columnChargePro = this.Columns["ChargePro"];
                this.columnMoney = this.Columns["Money"];
                this.columncurrcode = this.Columns["currcode"];
                this.columnExchangeRate = this.Columns["ExchangeRate"];
                this.columnmemo = this.Columns["memo"];
                this.columnCodeName = this.Columns["CodeName"];
            }
            
            private void InitClass() {
                this.columnApplySheetBody_EvectionCharge_pk = new DataColumn("ApplySheetBody_EvectionCharge_pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetBody_EvectionCharge_pk);
                this.columnApplySheetHead_Pk = new DataColumn("ApplySheetHead_Pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_Pk);
                this.columnChargePro = new DataColumn("ChargePro", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChargePro);
                this.columnMoney = new DataColumn("Money", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMoney);
                this.columncurrcode = new DataColumn("currcode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncurrcode);
                this.columnExchangeRate = new DataColumn("ExchangeRate", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExchangeRate);
                this.columnmemo = new DataColumn("memo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmemo);
                this.columnCodeName = new DataColumn("CodeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeName);
            }
            
            public EvectionChargeRow NewEvectionChargeRow() {
                return ((EvectionChargeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EvectionChargeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EvectionChargeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EvectionChargeRowChanged != null)) {
                    this.EvectionChargeRowChanged(this, new EvectionChargeRowChangeEvent(((EvectionChargeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EvectionChargeRowChanging != null)) {
                    this.EvectionChargeRowChanging(this, new EvectionChargeRowChangeEvent(((EvectionChargeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EvectionChargeRowDeleted != null)) {
                    this.EvectionChargeRowDeleted(this, new EvectionChargeRowChangeEvent(((EvectionChargeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EvectionChargeRowDeleting != null)) {
                    this.EvectionChargeRowDeleting(this, new EvectionChargeRowChangeEvent(((EvectionChargeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEvectionChargeRow(EvectionChargeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EvectionChargeRow : DataRow {
            
            private EvectionChargeDataTable tableEvectionCharge;
            
            internal EvectionChargeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEvectionCharge = ((EvectionChargeDataTable)(this.Table));
            }
            
            public int ApplySheetBody_EvectionCharge_pk {
                get {
                    try {
                        return ((int)(this[this.tableEvectionCharge.ApplySheetBody_EvectionCharge_pkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEvectionCharge.ApplySheetBody_EvectionCharge_pkColumn] = value;
                }
            }
            
            public int ApplySheetHead_Pk {
                get {
                    try {
                        return ((int)(this[this.tableEvectionCharge.ApplySheetHead_PkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEvectionCharge.ApplySheetHead_PkColumn] = value;
                }
            }
            
            public string ChargePro {
                get {
                    try {
                        return ((string)(this[this.tableEvectionCharge.ChargeProColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEvectionCharge.ChargeProColumn] = value;
                }
            }
            
            public System.Decimal Money {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableEvectionCharge.MoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEvectionCharge.MoneyColumn] = value;
                }
            }
            
            public string currcode {
                get {
                    try {
                        return ((string)(this[this.tableEvectionCharge.currcodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEvectionCharge.currcodeColumn] = value;
                }
            }
            
            public System.Decimal ExchangeRate {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableEvectionCharge.ExchangeRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEvectionCharge.ExchangeRateColumn] = value;
                }
            }
            
            public string memo {
                get {
                    try {
                        return ((string)(this[this.tableEvectionCharge.memoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEvectionCharge.memoColumn] = value;
                }
            }
            
            public string CodeName {
                get {
                    try {
                        return ((string)(this[this.tableEvectionCharge.CodeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEvectionCharge.CodeNameColumn] = value;
                }
            }
            
            public bool IsApplySheetBody_EvectionCharge_pkNull() {
                return this.IsNull(this.tableEvectionCharge.ApplySheetBody_EvectionCharge_pkColumn);
            }
            
            public void SetApplySheetBody_EvectionCharge_pkNull() {
                this[this.tableEvectionCharge.ApplySheetBody_EvectionCharge_pkColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetHead_PkNull() {
                return this.IsNull(this.tableEvectionCharge.ApplySheetHead_PkColumn);
            }
            
            public void SetApplySheetHead_PkNull() {
                this[this.tableEvectionCharge.ApplySheetHead_PkColumn] = System.Convert.DBNull;
            }
            
            public bool IsChargeProNull() {
                return this.IsNull(this.tableEvectionCharge.ChargeProColumn);
            }
            
            public void SetChargeProNull() {
                this[this.tableEvectionCharge.ChargeProColumn] = System.Convert.DBNull;
            }
            
            public bool IsMoneyNull() {
                return this.IsNull(this.tableEvectionCharge.MoneyColumn);
            }
            
            public void SetMoneyNull() {
                this[this.tableEvectionCharge.MoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IscurrcodeNull() {
                return this.IsNull(this.tableEvectionCharge.currcodeColumn);
            }
            
            public void SetcurrcodeNull() {
                this[this.tableEvectionCharge.currcodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsExchangeRateNull() {
                return this.IsNull(this.tableEvectionCharge.ExchangeRateColumn);
            }
            
            public void SetExchangeRateNull() {
                this[this.tableEvectionCharge.ExchangeRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsmemoNull() {
                return this.IsNull(this.tableEvectionCharge.memoColumn);
            }
            
            public void SetmemoNull() {
                this[this.tableEvectionCharge.memoColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeNameNull() {
                return this.IsNull(this.tableEvectionCharge.CodeNameColumn);
            }
            
            public void SetCodeNameNull() {
                this[this.tableEvectionCharge.CodeNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EvectionChargeRowChangeEvent : EventArgs {
            
            private EvectionChargeRow eventRow;
            
            private DataRowAction eventAction;
            
            public EvectionChargeRowChangeEvent(EvectionChargeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EvectionChargeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

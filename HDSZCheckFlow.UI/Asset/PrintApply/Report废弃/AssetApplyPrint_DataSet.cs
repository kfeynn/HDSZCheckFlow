//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HDSZCheckFlow.UI.Asset.PrintApply.Report {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AssetApplyPrint_DataSet : DataSet {
        
        private ApplyHeadInfoDataTable tableApplyHeadInfo;
        
        private ApplyBudgetInfoDataTable tableApplyBudgetInfo;
        
        private ApplyBodyInfoDataTable tableApplyBodyInfo;
        
        private ApplyRecordInfoDataTable tableApplyRecordInfo;
        
        public AssetApplyPrint_DataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AssetApplyPrint_DataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ApplyHeadInfo"] != null)) {
                    this.Tables.Add(new ApplyHeadInfoDataTable(ds.Tables["ApplyHeadInfo"]));
                }
                if ((ds.Tables["ApplyBudgetInfo"] != null)) {
                    this.Tables.Add(new ApplyBudgetInfoDataTable(ds.Tables["ApplyBudgetInfo"]));
                }
                if ((ds.Tables["ApplyBodyInfo"] != null)) {
                    this.Tables.Add(new ApplyBodyInfoDataTable(ds.Tables["ApplyBodyInfo"]));
                }
                if ((ds.Tables["ApplyRecordInfo"] != null)) {
                    this.Tables.Add(new ApplyRecordInfoDataTable(ds.Tables["ApplyRecordInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyHeadInfoDataTable ApplyHeadInfo {
            get {
                return this.tableApplyHeadInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyBudgetInfoDataTable ApplyBudgetInfo {
            get {
                return this.tableApplyBudgetInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyBodyInfoDataTable ApplyBodyInfo {
            get {
                return this.tableApplyBodyInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyRecordInfoDataTable ApplyRecordInfo {
            get {
                return this.tableApplyRecordInfo;
            }
        }
        
        public override DataSet Clone() {
            AssetApplyPrint_DataSet cln = ((AssetApplyPrint_DataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ApplyHeadInfo"] != null)) {
                this.Tables.Add(new ApplyHeadInfoDataTable(ds.Tables["ApplyHeadInfo"]));
            }
            if ((ds.Tables["ApplyBudgetInfo"] != null)) {
                this.Tables.Add(new ApplyBudgetInfoDataTable(ds.Tables["ApplyBudgetInfo"]));
            }
            if ((ds.Tables["ApplyBodyInfo"] != null)) {
                this.Tables.Add(new ApplyBodyInfoDataTable(ds.Tables["ApplyBodyInfo"]));
            }
            if ((ds.Tables["ApplyRecordInfo"] != null)) {
                this.Tables.Add(new ApplyRecordInfoDataTable(ds.Tables["ApplyRecordInfo"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableApplyHeadInfo = ((ApplyHeadInfoDataTable)(this.Tables["ApplyHeadInfo"]));
            if ((this.tableApplyHeadInfo != null)) {
                this.tableApplyHeadInfo.InitVars();
            }
            this.tableApplyBudgetInfo = ((ApplyBudgetInfoDataTable)(this.Tables["ApplyBudgetInfo"]));
            if ((this.tableApplyBudgetInfo != null)) {
                this.tableApplyBudgetInfo.InitVars();
            }
            this.tableApplyBodyInfo = ((ApplyBodyInfoDataTable)(this.Tables["ApplyBodyInfo"]));
            if ((this.tableApplyBodyInfo != null)) {
                this.tableApplyBodyInfo.InitVars();
            }
            this.tableApplyRecordInfo = ((ApplyRecordInfoDataTable)(this.Tables["ApplyRecordInfo"]));
            if ((this.tableApplyRecordInfo != null)) {
                this.tableApplyRecordInfo.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "AssetApplyPrint_DataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AssetApplyPrint_DataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableApplyHeadInfo = new ApplyHeadInfoDataTable();
            this.Tables.Add(this.tableApplyHeadInfo);
            this.tableApplyBudgetInfo = new ApplyBudgetInfoDataTable();
            this.Tables.Add(this.tableApplyBudgetInfo);
            this.tableApplyBodyInfo = new ApplyBodyInfoDataTable();
            this.Tables.Add(this.tableApplyBodyInfo);
            this.tableApplyRecordInfo = new ApplyRecordInfoDataTable();
            this.Tables.Add(this.tableApplyRecordInfo);
        }
        
        private bool ShouldSerializeApplyHeadInfo() {
            return false;
        }
        
        private bool ShouldSerializeApplyBudgetInfo() {
            return false;
        }
        
        private bool ShouldSerializeApplyBodyInfo() {
            return false;
        }
        
        private bool ShouldSerializeApplyRecordInfo() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ApplyHeadInfoRowChangeEventHandler(object sender, ApplyHeadInfoRowChangeEvent e);
        
        public delegate void ApplyBudgetInfoRowChangeEventHandler(object sender, ApplyBudgetInfoRowChangeEvent e);
        
        public delegate void ApplyBodyInfoRowChangeEventHandler(object sender, ApplyBodyInfoRowChangeEvent e);
        
        public delegate void ApplyRecordInfoRowChangeEventHandler(object sender, ApplyRecordInfoRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyHeadInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnApplySheetHead_pk;
            
            private DataColumn columnApplySheetNo;
            
            private DataColumn columnItemName;
            
            private DataColumn columnDeptName;
            
            private DataColumn columnApplyDate;
            
            private DataColumn columnApplyPersonName;
            
            private DataColumn columnApplyTypeName;
            
            internal ApplyHeadInfoDataTable() : 
                    base("ApplyHeadInfo") {
                this.InitClass();
            }
            
            internal ApplyHeadInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ApplySheetHead_pkColumn {
                get {
                    return this.columnApplySheetHead_pk;
                }
            }
            
            internal DataColumn ApplySheetNoColumn {
                get {
                    return this.columnApplySheetNo;
                }
            }
            
            internal DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            internal DataColumn DeptNameColumn {
                get {
                    return this.columnDeptName;
                }
            }
            
            internal DataColumn ApplyDateColumn {
                get {
                    return this.columnApplyDate;
                }
            }
            
            internal DataColumn ApplyPersonNameColumn {
                get {
                    return this.columnApplyPersonName;
                }
            }
            
            internal DataColumn ApplyTypeNameColumn {
                get {
                    return this.columnApplyTypeName;
                }
            }
            
            public ApplyHeadInfoRow this[int index] {
                get {
                    return ((ApplyHeadInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowChanged;
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowChanging;
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowDeleted;
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowDeleting;
            
            public void AddApplyHeadInfoRow(ApplyHeadInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyHeadInfoRow AddApplyHeadInfoRow(int ApplySheetHead_pk, string ApplySheetNo, string ItemName, string DeptName, System.DateTime ApplyDate, string ApplyPersonName, string ApplyTypeName) {
                ApplyHeadInfoRow rowApplyHeadInfoRow = ((ApplyHeadInfoRow)(this.NewRow()));
                rowApplyHeadInfoRow.ItemArray = new object[] {
                        ApplySheetHead_pk,
                        ApplySheetNo,
                        ItemName,
                        DeptName,
                        ApplyDate,
                        ApplyPersonName,
                        ApplyTypeName};
                this.Rows.Add(rowApplyHeadInfoRow);
                return rowApplyHeadInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyHeadInfoDataTable cln = ((ApplyHeadInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyHeadInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnApplySheetHead_pk = this.Columns["ApplySheetHead_pk"];
                this.columnApplySheetNo = this.Columns["ApplySheetNo"];
                this.columnItemName = this.Columns["ItemName"];
                this.columnDeptName = this.Columns["DeptName"];
                this.columnApplyDate = this.Columns["ApplyDate"];
                this.columnApplyPersonName = this.Columns["ApplyPersonName"];
                this.columnApplyTypeName = this.Columns["ApplyTypeName"];
            }
            
            private void InitClass() {
                this.columnApplySheetHead_pk = new DataColumn("ApplySheetHead_pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_pk);
                this.columnApplySheetNo = new DataColumn("ApplySheetNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetNo);
                this.columnItemName = new DataColumn("ItemName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemName);
                this.columnDeptName = new DataColumn("DeptName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeptName);
                this.columnApplyDate = new DataColumn("ApplyDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyDate);
                this.columnApplyPersonName = new DataColumn("ApplyPersonName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyPersonName);
                this.columnApplyTypeName = new DataColumn("ApplyTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyTypeName);
            }
            
            public ApplyHeadInfoRow NewApplyHeadInfoRow() {
                return ((ApplyHeadInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyHeadInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyHeadInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyHeadInfoRowChanged != null)) {
                    this.ApplyHeadInfoRowChanged(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyHeadInfoRowChanging != null)) {
                    this.ApplyHeadInfoRowChanging(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyHeadInfoRowDeleted != null)) {
                    this.ApplyHeadInfoRowDeleted(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyHeadInfoRowDeleting != null)) {
                    this.ApplyHeadInfoRowDeleting(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyHeadInfoRow(ApplyHeadInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyHeadInfoRow : DataRow {
            
            private ApplyHeadInfoDataTable tableApplyHeadInfo;
            
            internal ApplyHeadInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyHeadInfo = ((ApplyHeadInfoDataTable)(this.Table));
            }
            
            public int ApplySheetHead_pk {
                get {
                    try {
                        return ((int)(this[this.tableApplyHeadInfo.ApplySheetHead_pkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplySheetHead_pkColumn] = value;
                }
            }
            
            public string ApplySheetNo {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ApplySheetNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplySheetNoColumn] = value;
                }
            }
            
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ItemNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ItemNameColumn] = value;
                }
            }
            
            public string DeptName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.DeptNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.DeptNameColumn] = value;
                }
            }
            
            public System.DateTime ApplyDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableApplyHeadInfo.ApplyDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplyDateColumn] = value;
                }
            }
            
            public string ApplyPersonName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ApplyPersonNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplyPersonNameColumn] = value;
                }
            }
            
            public string ApplyTypeName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ApplyTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplyTypeNameColumn] = value;
                }
            }
            
            public bool IsApplySheetHead_pkNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplySheetHead_pkColumn);
            }
            
            public void SetApplySheetHead_pkNull() {
                this[this.tableApplyHeadInfo.ApplySheetHead_pkColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetNoNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplySheetNoColumn);
            }
            
            public void SetApplySheetNoNull() {
                this[this.tableApplyHeadInfo.ApplySheetNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.ItemNameColumn);
            }
            
            public void SetItemNameNull() {
                this[this.tableApplyHeadInfo.ItemNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeptNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.DeptNameColumn);
            }
            
            public void SetDeptNameNull() {
                this[this.tableApplyHeadInfo.DeptNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyDateNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplyDateColumn);
            }
            
            public void SetApplyDateNull() {
                this[this.tableApplyHeadInfo.ApplyDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyPersonNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplyPersonNameColumn);
            }
            
            public void SetApplyPersonNameNull() {
                this[this.tableApplyHeadInfo.ApplyPersonNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyTypeNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplyTypeNameColumn);
            }
            
            public void SetApplyTypeNameNull() {
                this[this.tableApplyHeadInfo.ApplyTypeNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyHeadInfoRowChangeEvent : EventArgs {
            
            private ApplyHeadInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyHeadInfoRowChangeEvent(ApplyHeadInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyHeadInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBudgetMoney;
            
            private DataColumn columnReadyPay;
            
            private DataColumn columnCheckMoney;
            
            private DataColumn columnTotalOutMoney;
            
            private DataColumn columnLeftMoney;
            
            private DataColumn columnApplyMoney;
            
            private DataColumn columnBudgetType;
            
            internal ApplyBudgetInfoDataTable() : 
                    base("ApplyBudgetInfo") {
                this.InitClass();
            }
            
            internal ApplyBudgetInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BudgetMoneyColumn {
                get {
                    return this.columnBudgetMoney;
                }
            }
            
            internal DataColumn ReadyPayColumn {
                get {
                    return this.columnReadyPay;
                }
            }
            
            internal DataColumn CheckMoneyColumn {
                get {
                    return this.columnCheckMoney;
                }
            }
            
            internal DataColumn TotalOutMoneyColumn {
                get {
                    return this.columnTotalOutMoney;
                }
            }
            
            internal DataColumn LeftMoneyColumn {
                get {
                    return this.columnLeftMoney;
                }
            }
            
            internal DataColumn ApplyMoneyColumn {
                get {
                    return this.columnApplyMoney;
                }
            }
            
            internal DataColumn BudgetTypeColumn {
                get {
                    return this.columnBudgetType;
                }
            }
            
            public ApplyBudgetInfoRow this[int index] {
                get {
                    return ((ApplyBudgetInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowChanged;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowChanging;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowDeleted;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowDeleting;
            
            public void AddApplyBudgetInfoRow(ApplyBudgetInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyBudgetInfoRow AddApplyBudgetInfoRow(System.Decimal BudgetMoney, System.Decimal ReadyPay, System.Decimal CheckMoney, System.Decimal TotalOutMoney, System.Decimal LeftMoney, System.Decimal ApplyMoney, string BudgetType) {
                ApplyBudgetInfoRow rowApplyBudgetInfoRow = ((ApplyBudgetInfoRow)(this.NewRow()));
                rowApplyBudgetInfoRow.ItemArray = new object[] {
                        BudgetMoney,
                        ReadyPay,
                        CheckMoney,
                        TotalOutMoney,
                        LeftMoney,
                        ApplyMoney,
                        BudgetType};
                this.Rows.Add(rowApplyBudgetInfoRow);
                return rowApplyBudgetInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyBudgetInfoDataTable cln = ((ApplyBudgetInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyBudgetInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnBudgetMoney = this.Columns["BudgetMoney"];
                this.columnReadyPay = this.Columns["ReadyPay"];
                this.columnCheckMoney = this.Columns["CheckMoney"];
                this.columnTotalOutMoney = this.Columns["TotalOutMoney"];
                this.columnLeftMoney = this.Columns["LeftMoney"];
                this.columnApplyMoney = this.Columns["ApplyMoney"];
                this.columnBudgetType = this.Columns["BudgetType"];
            }
            
            private void InitClass() {
                this.columnBudgetMoney = new DataColumn("BudgetMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBudgetMoney);
                this.columnReadyPay = new DataColumn("ReadyPay", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReadyPay);
                this.columnCheckMoney = new DataColumn("CheckMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckMoney);
                this.columnTotalOutMoney = new DataColumn("TotalOutMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalOutMoney);
                this.columnLeftMoney = new DataColumn("LeftMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLeftMoney);
                this.columnApplyMoney = new DataColumn("ApplyMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyMoney);
                this.columnBudgetType = new DataColumn("BudgetType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBudgetType);
            }
            
            public ApplyBudgetInfoRow NewApplyBudgetInfoRow() {
                return ((ApplyBudgetInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyBudgetInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyBudgetInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyBudgetInfoRowChanged != null)) {
                    this.ApplyBudgetInfoRowChanged(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyBudgetInfoRowChanging != null)) {
                    this.ApplyBudgetInfoRowChanging(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyBudgetInfoRowDeleted != null)) {
                    this.ApplyBudgetInfoRowDeleted(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyBudgetInfoRowDeleting != null)) {
                    this.ApplyBudgetInfoRowDeleting(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyBudgetInfoRow(ApplyBudgetInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoRow : DataRow {
            
            private ApplyBudgetInfoDataTable tableApplyBudgetInfo;
            
            internal ApplyBudgetInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyBudgetInfo = ((ApplyBudgetInfoDataTable)(this.Table));
            }
            
            public System.Decimal BudgetMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.BudgetMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.BudgetMoneyColumn] = value;
                }
            }
            
            public System.Decimal ReadyPay {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ReadyPayColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ReadyPayColumn] = value;
                }
            }
            
            public System.Decimal CheckMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.CheckMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.CheckMoneyColumn] = value;
                }
            }
            
            public System.Decimal TotalOutMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.TotalOutMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.TotalOutMoneyColumn] = value;
                }
            }
            
            public System.Decimal LeftMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.LeftMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.LeftMoneyColumn] = value;
                }
            }
            
            public System.Decimal ApplyMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBudgetInfo.ApplyMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ApplyMoneyColumn] = value;
                }
            }
            
            public string BudgetType {
                get {
                    try {
                        return ((string)(this[this.tableApplyBudgetInfo.BudgetTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.BudgetTypeColumn] = value;
                }
            }
            
            public bool IsBudgetMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.BudgetMoneyColumn);
            }
            
            public void SetBudgetMoneyNull() {
                this[this.tableApplyBudgetInfo.BudgetMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsReadyPayNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ReadyPayColumn);
            }
            
            public void SetReadyPayNull() {
                this[this.tableApplyBudgetInfo.ReadyPayColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.CheckMoneyColumn);
            }
            
            public void SetCheckMoneyNull() {
                this[this.tableApplyBudgetInfo.CheckMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalOutMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.TotalOutMoneyColumn);
            }
            
            public void SetTotalOutMoneyNull() {
                this[this.tableApplyBudgetInfo.TotalOutMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsLeftMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.LeftMoneyColumn);
            }
            
            public void SetLeftMoneyNull() {
                this[this.tableApplyBudgetInfo.LeftMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ApplyMoneyColumn);
            }
            
            public void SetApplyMoneyNull() {
                this[this.tableApplyBudgetInfo.ApplyMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsBudgetTypeNull() {
                return this.IsNull(this.tableApplyBudgetInfo.BudgetTypeColumn);
            }
            
            public void SetBudgetTypeNull() {
                this[this.tableApplyBudgetInfo.BudgetTypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBudgetInfoRowChangeEvent : EventArgs {
            
            private ApplyBudgetInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyBudgetInfoRowChangeEvent(ApplyBudgetInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyBudgetInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBodyInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnApplySheetHead_pk;
            
            private DataColumn columnSubjectName;
            
            private DataColumn columnInventoryName;
            
            private DataColumn columnInvType;
            
            private DataColumn columnUnitName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnOriginalcurrPrice;
            
            private DataColumn columnOriginalMoney;
            
            private DataColumn columncurrTypeCode;
            
            private DataColumn columnExchangeRate;
            
            private DataColumn columnRmbPrice;
            
            private DataColumn columnRmbMoney;
            
            private DataColumn columnCheckNumber;
            
            private DataColumn columnIsChecked;
            
            private DataColumn columnIsGiveup;
            
            private DataColumn columnGiveupSigner;
            
            private DataColumn columnGiveupDatetime;
            
            internal ApplyBodyInfoDataTable() : 
                    base("ApplyBodyInfo") {
                this.InitClass();
            }
            
            internal ApplyBodyInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn ApplySheetHead_pkColumn {
                get {
                    return this.columnApplySheetHead_pk;
                }
            }
            
            internal DataColumn SubjectNameColumn {
                get {
                    return this.columnSubjectName;
                }
            }
            
            internal DataColumn InventoryNameColumn {
                get {
                    return this.columnInventoryName;
                }
            }
            
            internal DataColumn InvTypeColumn {
                get {
                    return this.columnInvType;
                }
            }
            
            internal DataColumn UnitNameColumn {
                get {
                    return this.columnUnitName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn OriginalcurrPriceColumn {
                get {
                    return this.columnOriginalcurrPrice;
                }
            }
            
            internal DataColumn OriginalMoneyColumn {
                get {
                    return this.columnOriginalMoney;
                }
            }
            
            internal DataColumn currTypeCodeColumn {
                get {
                    return this.columncurrTypeCode;
                }
            }
            
            internal DataColumn ExchangeRateColumn {
                get {
                    return this.columnExchangeRate;
                }
            }
            
            internal DataColumn RmbPriceColumn {
                get {
                    return this.columnRmbPrice;
                }
            }
            
            internal DataColumn RmbMoneyColumn {
                get {
                    return this.columnRmbMoney;
                }
            }
            
            internal DataColumn CheckNumberColumn {
                get {
                    return this.columnCheckNumber;
                }
            }
            
            internal DataColumn IsCheckedColumn {
                get {
                    return this.columnIsChecked;
                }
            }
            
            internal DataColumn IsGiveupColumn {
                get {
                    return this.columnIsGiveup;
                }
            }
            
            internal DataColumn GiveupSignerColumn {
                get {
                    return this.columnGiveupSigner;
                }
            }
            
            internal DataColumn GiveupDatetimeColumn {
                get {
                    return this.columnGiveupDatetime;
                }
            }
            
            public ApplyBodyInfoRow this[int index] {
                get {
                    return ((ApplyBodyInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyBodyInfoRowChangeEventHandler ApplyBodyInfoRowChanged;
            
            public event ApplyBodyInfoRowChangeEventHandler ApplyBodyInfoRowChanging;
            
            public event ApplyBodyInfoRowChangeEventHandler ApplyBodyInfoRowDeleted;
            
            public event ApplyBodyInfoRowChangeEventHandler ApplyBodyInfoRowDeleting;
            
            public void AddApplyBodyInfoRow(ApplyBodyInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyBodyInfoRow AddApplyBodyInfoRow(
                        int ID, 
                        string ApplySheetHead_pk, 
                        string SubjectName, 
                        string InventoryName, 
                        string InvType, 
                        string UnitName, 
                        int Number, 
                        System.Decimal OriginalcurrPrice, 
                        System.Decimal OriginalMoney, 
                        string currTypeCode, 
                        System.Decimal ExchangeRate, 
                        System.Decimal RmbPrice, 
                        System.Decimal RmbMoney, 
                        string CheckNumber, 
                        int IsChecked, 
                        int IsGiveup, 
                        int GiveupSigner, 
                        System.DateTime GiveupDatetime) {
                ApplyBodyInfoRow rowApplyBodyInfoRow = ((ApplyBodyInfoRow)(this.NewRow()));
                rowApplyBodyInfoRow.ItemArray = new object[] {
                        ID,
                        ApplySheetHead_pk,
                        SubjectName,
                        InventoryName,
                        InvType,
                        UnitName,
                        Number,
                        OriginalcurrPrice,
                        OriginalMoney,
                        currTypeCode,
                        ExchangeRate,
                        RmbPrice,
                        RmbMoney,
                        CheckNumber,
                        IsChecked,
                        IsGiveup,
                        GiveupSigner,
                        GiveupDatetime};
                this.Rows.Add(rowApplyBodyInfoRow);
                return rowApplyBodyInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyBodyInfoDataTable cln = ((ApplyBodyInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyBodyInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnApplySheetHead_pk = this.Columns["ApplySheetHead_pk"];
                this.columnSubjectName = this.Columns["SubjectName"];
                this.columnInventoryName = this.Columns["InventoryName"];
                this.columnInvType = this.Columns["InvType"];
                this.columnUnitName = this.Columns["UnitName"];
                this.columnNumber = this.Columns["Number"];
                this.columnOriginalcurrPrice = this.Columns["OriginalcurrPrice"];
                this.columnOriginalMoney = this.Columns["OriginalMoney"];
                this.columncurrTypeCode = this.Columns["currTypeCode"];
                this.columnExchangeRate = this.Columns["ExchangeRate"];
                this.columnRmbPrice = this.Columns["RmbPrice"];
                this.columnRmbMoney = this.Columns["RmbMoney"];
                this.columnCheckNumber = this.Columns["CheckNumber"];
                this.columnIsChecked = this.Columns["IsChecked"];
                this.columnIsGiveup = this.Columns["IsGiveup"];
                this.columnGiveupSigner = this.Columns["GiveupSigner"];
                this.columnGiveupDatetime = this.Columns["GiveupDatetime"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnApplySheetHead_pk = new DataColumn("ApplySheetHead_pk", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_pk);
                this.columnSubjectName = new DataColumn("SubjectName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubjectName);
                this.columnInventoryName = new DataColumn("InventoryName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInventoryName);
                this.columnInvType = new DataColumn("InvType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInvType);
                this.columnUnitName = new DataColumn("UnitName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUnitName);
                this.columnNumber = new DataColumn("Number", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnOriginalcurrPrice = new DataColumn("OriginalcurrPrice", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOriginalcurrPrice);
                this.columnOriginalMoney = new DataColumn("OriginalMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOriginalMoney);
                this.columncurrTypeCode = new DataColumn("currTypeCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncurrTypeCode);
                this.columnExchangeRate = new DataColumn("ExchangeRate", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExchangeRate);
                this.columnRmbPrice = new DataColumn("RmbPrice", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRmbPrice);
                this.columnRmbMoney = new DataColumn("RmbMoney", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRmbMoney);
                this.columnCheckNumber = new DataColumn("CheckNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckNumber);
                this.columnIsChecked = new DataColumn("IsChecked", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsChecked);
                this.columnIsGiveup = new DataColumn("IsGiveup", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsGiveup);
                this.columnGiveupSigner = new DataColumn("GiveupSigner", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGiveupSigner);
                this.columnGiveupDatetime = new DataColumn("GiveupDatetime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGiveupDatetime);
            }
            
            public ApplyBodyInfoRow NewApplyBodyInfoRow() {
                return ((ApplyBodyInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyBodyInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyBodyInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyBodyInfoRowChanged != null)) {
                    this.ApplyBodyInfoRowChanged(this, new ApplyBodyInfoRowChangeEvent(((ApplyBodyInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyBodyInfoRowChanging != null)) {
                    this.ApplyBodyInfoRowChanging(this, new ApplyBodyInfoRowChangeEvent(((ApplyBodyInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyBodyInfoRowDeleted != null)) {
                    this.ApplyBodyInfoRowDeleted(this, new ApplyBodyInfoRowChangeEvent(((ApplyBodyInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyBodyInfoRowDeleting != null)) {
                    this.ApplyBodyInfoRowDeleting(this, new ApplyBodyInfoRowChangeEvent(((ApplyBodyInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyBodyInfoRow(ApplyBodyInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBodyInfoRow : DataRow {
            
            private ApplyBodyInfoDataTable tableApplyBodyInfo;
            
            internal ApplyBodyInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyBodyInfo = ((ApplyBodyInfoDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableApplyBodyInfo.IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.IDColumn] = value;
                }
            }
            
            public string ApplySheetHead_pk {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.ApplySheetHead_pkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.ApplySheetHead_pkColumn] = value;
                }
            }
            
            public string SubjectName {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.SubjectNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.SubjectNameColumn] = value;
                }
            }
            
            public string InventoryName {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.InventoryNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.InventoryNameColumn] = value;
                }
            }
            
            public string InvType {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.InvTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.InvTypeColumn] = value;
                }
            }
            
            public string UnitName {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.UnitNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.UnitNameColumn] = value;
                }
            }
            
            public int Number {
                get {
                    try {
                        return ((int)(this[this.tableApplyBodyInfo.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.NumberColumn] = value;
                }
            }
            
            public System.Decimal OriginalcurrPrice {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBodyInfo.OriginalcurrPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.OriginalcurrPriceColumn] = value;
                }
            }
            
            public System.Decimal OriginalMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBodyInfo.OriginalMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.OriginalMoneyColumn] = value;
                }
            }
            
            public string currTypeCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.currTypeCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.currTypeCodeColumn] = value;
                }
            }
            
            public System.Decimal ExchangeRate {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBodyInfo.ExchangeRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.ExchangeRateColumn] = value;
                }
            }
            
            public System.Decimal RmbPrice {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBodyInfo.RmbPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.RmbPriceColumn] = value;
                }
            }
            
            public System.Decimal RmbMoney {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableApplyBodyInfo.RmbMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.RmbMoneyColumn] = value;
                }
            }
            
            public string CheckNumber {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.CheckNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.CheckNumberColumn] = value;
                }
            }
            
            public int IsChecked {
                get {
                    try {
                        return ((int)(this[this.tableApplyBodyInfo.IsCheckedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.IsCheckedColumn] = value;
                }
            }
            
            public int IsGiveup {
                get {
                    try {
                        return ((int)(this[this.tableApplyBodyInfo.IsGiveupColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.IsGiveupColumn] = value;
                }
            }
            
            public int GiveupSigner {
                get {
                    try {
                        return ((int)(this[this.tableApplyBodyInfo.GiveupSignerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.GiveupSignerColumn] = value;
                }
            }
            
            public System.DateTime GiveupDatetime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableApplyBodyInfo.GiveupDatetimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.GiveupDatetimeColumn] = value;
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableApplyBodyInfo.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableApplyBodyInfo.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetHead_pkNull() {
                return this.IsNull(this.tableApplyBodyInfo.ApplySheetHead_pkColumn);
            }
            
            public void SetApplySheetHead_pkNull() {
                this[this.tableApplyBodyInfo.ApplySheetHead_pkColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubjectNameNull() {
                return this.IsNull(this.tableApplyBodyInfo.SubjectNameColumn);
            }
            
            public void SetSubjectNameNull() {
                this[this.tableApplyBodyInfo.SubjectNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsInventoryNameNull() {
                return this.IsNull(this.tableApplyBodyInfo.InventoryNameColumn);
            }
            
            public void SetInventoryNameNull() {
                this[this.tableApplyBodyInfo.InventoryNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsInvTypeNull() {
                return this.IsNull(this.tableApplyBodyInfo.InvTypeColumn);
            }
            
            public void SetInvTypeNull() {
                this[this.tableApplyBodyInfo.InvTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnitNameNull() {
                return this.IsNull(this.tableApplyBodyInfo.UnitNameColumn);
            }
            
            public void SetUnitNameNull() {
                this[this.tableApplyBodyInfo.UnitNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableApplyBodyInfo.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableApplyBodyInfo.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsOriginalcurrPriceNull() {
                return this.IsNull(this.tableApplyBodyInfo.OriginalcurrPriceColumn);
            }
            
            public void SetOriginalcurrPriceNull() {
                this[this.tableApplyBodyInfo.OriginalcurrPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsOriginalMoneyNull() {
                return this.IsNull(this.tableApplyBodyInfo.OriginalMoneyColumn);
            }
            
            public void SetOriginalMoneyNull() {
                this[this.tableApplyBodyInfo.OriginalMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IscurrTypeCodeNull() {
                return this.IsNull(this.tableApplyBodyInfo.currTypeCodeColumn);
            }
            
            public void SetcurrTypeCodeNull() {
                this[this.tableApplyBodyInfo.currTypeCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsExchangeRateNull() {
                return this.IsNull(this.tableApplyBodyInfo.ExchangeRateColumn);
            }
            
            public void SetExchangeRateNull() {
                this[this.tableApplyBodyInfo.ExchangeRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsRmbPriceNull() {
                return this.IsNull(this.tableApplyBodyInfo.RmbPriceColumn);
            }
            
            public void SetRmbPriceNull() {
                this[this.tableApplyBodyInfo.RmbPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsRmbMoneyNull() {
                return this.IsNull(this.tableApplyBodyInfo.RmbMoneyColumn);
            }
            
            public void SetRmbMoneyNull() {
                this[this.tableApplyBodyInfo.RmbMoneyColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckNumberNull() {
                return this.IsNull(this.tableApplyBodyInfo.CheckNumberColumn);
            }
            
            public void SetCheckNumberNull() {
                this[this.tableApplyBodyInfo.CheckNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsCheckedNull() {
                return this.IsNull(this.tableApplyBodyInfo.IsCheckedColumn);
            }
            
            public void SetIsCheckedNull() {
                this[this.tableApplyBodyInfo.IsCheckedColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsGiveupNull() {
                return this.IsNull(this.tableApplyBodyInfo.IsGiveupColumn);
            }
            
            public void SetIsGiveupNull() {
                this[this.tableApplyBodyInfo.IsGiveupColumn] = System.Convert.DBNull;
            }
            
            public bool IsGiveupSignerNull() {
                return this.IsNull(this.tableApplyBodyInfo.GiveupSignerColumn);
            }
            
            public void SetGiveupSignerNull() {
                this[this.tableApplyBodyInfo.GiveupSignerColumn] = System.Convert.DBNull;
            }
            
            public bool IsGiveupDatetimeNull() {
                return this.IsNull(this.tableApplyBodyInfo.GiveupDatetimeColumn);
            }
            
            public void SetGiveupDatetimeNull() {
                this[this.tableApplyBodyInfo.GiveupDatetimeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyBodyInfoRowChangeEvent : EventArgs {
            
            private ApplyBodyInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyBodyInfoRowChangeEvent(ApplyBodyInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyBodyInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyRecordInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnApplySheetHead_pk;
            
            private DataColumn columnIsCheckInCompany;
            
            private DataColumn columnCheckRole;
            
            private DataColumn columnCheckPersonCode;
            
            private DataColumn columnIsPass;
            
            private DataColumn columnApplySheetCheckRecord_pk;
            
            private DataColumn columnCheckDate;
            
            private DataColumn columnCheckComment;
            
            private DataColumn columnIsDisplays;
            
            private DataColumn columnDisplaysPersonCode;
            
            private DataColumn columnCheckSetp;
            
            private DataColumn columnApplyTypeName;
            
            private DataColumn columnName;
            
            private DataColumn columnDisplaysName;
            
            private DataColumn columnCheckRoleName;
            
            private DataColumn columnIsAgree;
            
            internal ApplyRecordInfoDataTable() : 
                    base("ApplyRecordInfo") {
                this.InitClass();
            }
            
            internal ApplyRecordInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ApplySheetHead_pkColumn {
                get {
                    return this.columnApplySheetHead_pk;
                }
            }
            
            internal DataColumn IsCheckInCompanyColumn {
                get {
                    return this.columnIsCheckInCompany;
                }
            }
            
            internal DataColumn CheckRoleColumn {
                get {
                    return this.columnCheckRole;
                }
            }
            
            internal DataColumn CheckPersonCodeColumn {
                get {
                    return this.columnCheckPersonCode;
                }
            }
            
            internal DataColumn IsPassColumn {
                get {
                    return this.columnIsPass;
                }
            }
            
            internal DataColumn ApplySheetCheckRecord_pkColumn {
                get {
                    return this.columnApplySheetCheckRecord_pk;
                }
            }
            
            internal DataColumn CheckDateColumn {
                get {
                    return this.columnCheckDate;
                }
            }
            
            internal DataColumn CheckCommentColumn {
                get {
                    return this.columnCheckComment;
                }
            }
            
            internal DataColumn IsDisplaysColumn {
                get {
                    return this.columnIsDisplays;
                }
            }
            
            internal DataColumn DisplaysPersonCodeColumn {
                get {
                    return this.columnDisplaysPersonCode;
                }
            }
            
            internal DataColumn CheckSetpColumn {
                get {
                    return this.columnCheckSetp;
                }
            }
            
            internal DataColumn ApplyTypeNameColumn {
                get {
                    return this.columnApplyTypeName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DisplaysNameColumn {
                get {
                    return this.columnDisplaysName;
                }
            }
            
            internal DataColumn CheckRoleNameColumn {
                get {
                    return this.columnCheckRoleName;
                }
            }
            
            internal DataColumn IsAgreeColumn {
                get {
                    return this.columnIsAgree;
                }
            }
            
            public ApplyRecordInfoRow this[int index] {
                get {
                    return ((ApplyRecordInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyRecordInfoRowChangeEventHandler ApplyRecordInfoRowChanged;
            
            public event ApplyRecordInfoRowChangeEventHandler ApplyRecordInfoRowChanging;
            
            public event ApplyRecordInfoRowChangeEventHandler ApplyRecordInfoRowDeleted;
            
            public event ApplyRecordInfoRowChangeEventHandler ApplyRecordInfoRowDeleting;
            
            public void AddApplyRecordInfoRow(ApplyRecordInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyRecordInfoRow AddApplyRecordInfoRow(
                        string ApplySheetHead_pk, 
                        int IsCheckInCompany, 
                        string CheckRole, 
                        string CheckPersonCode, 
                        int IsPass, 
                        string ApplySheetCheckRecord_pk, 
                        System.DateTime CheckDate, 
                        string CheckComment, 
                        int IsDisplays, 
                        string DisplaysPersonCode, 
                        string CheckSetp, 
                        string ApplyTypeName, 
                        string Name, 
                        string DisplaysName, 
                        string CheckRoleName, 
                        string IsAgree) {
                ApplyRecordInfoRow rowApplyRecordInfoRow = ((ApplyRecordInfoRow)(this.NewRow()));
                rowApplyRecordInfoRow.ItemArray = new object[] {
                        ApplySheetHead_pk,
                        IsCheckInCompany,
                        CheckRole,
                        CheckPersonCode,
                        IsPass,
                        ApplySheetCheckRecord_pk,
                        CheckDate,
                        CheckComment,
                        IsDisplays,
                        DisplaysPersonCode,
                        CheckSetp,
                        ApplyTypeName,
                        Name,
                        DisplaysName,
                        CheckRoleName,
                        IsAgree};
                this.Rows.Add(rowApplyRecordInfoRow);
                return rowApplyRecordInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyRecordInfoDataTable cln = ((ApplyRecordInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyRecordInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnApplySheetHead_pk = this.Columns["ApplySheetHead_pk"];
                this.columnIsCheckInCompany = this.Columns["IsCheckInCompany"];
                this.columnCheckRole = this.Columns["CheckRole"];
                this.columnCheckPersonCode = this.Columns["CheckPersonCode"];
                this.columnIsPass = this.Columns["IsPass"];
                this.columnApplySheetCheckRecord_pk = this.Columns["ApplySheetCheckRecord_pk"];
                this.columnCheckDate = this.Columns["CheckDate"];
                this.columnCheckComment = this.Columns["CheckComment"];
                this.columnIsDisplays = this.Columns["IsDisplays"];
                this.columnDisplaysPersonCode = this.Columns["DisplaysPersonCode"];
                this.columnCheckSetp = this.Columns["CheckSetp"];
                this.columnApplyTypeName = this.Columns["ApplyTypeName"];
                this.columnName = this.Columns["Name"];
                this.columnDisplaysName = this.Columns["DisplaysName"];
                this.columnCheckRoleName = this.Columns["CheckRoleName"];
                this.columnIsAgree = this.Columns["IsAgree"];
            }
            
            private void InitClass() {
                this.columnApplySheetHead_pk = new DataColumn("ApplySheetHead_pk", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_pk);
                this.columnIsCheckInCompany = new DataColumn("IsCheckInCompany", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsCheckInCompany);
                this.columnCheckRole = new DataColumn("CheckRole", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckRole);
                this.columnCheckPersonCode = new DataColumn("CheckPersonCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckPersonCode);
                this.columnIsPass = new DataColumn("IsPass", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsPass);
                this.columnApplySheetCheckRecord_pk = new DataColumn("ApplySheetCheckRecord_pk", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetCheckRecord_pk);
                this.columnCheckDate = new DataColumn("CheckDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckDate);
                this.columnCheckComment = new DataColumn("CheckComment", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckComment);
                this.columnIsDisplays = new DataColumn("IsDisplays", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDisplays);
                this.columnDisplaysPersonCode = new DataColumn("DisplaysPersonCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDisplaysPersonCode);
                this.columnCheckSetp = new DataColumn("CheckSetp", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckSetp);
                this.columnApplyTypeName = new DataColumn("ApplyTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyTypeName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDisplaysName = new DataColumn("DisplaysName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDisplaysName);
                this.columnCheckRoleName = new DataColumn("CheckRoleName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckRoleName);
                this.columnIsAgree = new DataColumn("IsAgree", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAgree);
            }
            
            public ApplyRecordInfoRow NewApplyRecordInfoRow() {
                return ((ApplyRecordInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyRecordInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyRecordInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyRecordInfoRowChanged != null)) {
                    this.ApplyRecordInfoRowChanged(this, new ApplyRecordInfoRowChangeEvent(((ApplyRecordInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyRecordInfoRowChanging != null)) {
                    this.ApplyRecordInfoRowChanging(this, new ApplyRecordInfoRowChangeEvent(((ApplyRecordInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyRecordInfoRowDeleted != null)) {
                    this.ApplyRecordInfoRowDeleted(this, new ApplyRecordInfoRowChangeEvent(((ApplyRecordInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyRecordInfoRowDeleting != null)) {
                    this.ApplyRecordInfoRowDeleting(this, new ApplyRecordInfoRowChangeEvent(((ApplyRecordInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyRecordInfoRow(ApplyRecordInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyRecordInfoRow : DataRow {
            
            private ApplyRecordInfoDataTable tableApplyRecordInfo;
            
            internal ApplyRecordInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyRecordInfo = ((ApplyRecordInfoDataTable)(this.Table));
            }
            
            public string ApplySheetHead_pk {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.ApplySheetHead_pkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.ApplySheetHead_pkColumn] = value;
                }
            }
            
            public int IsCheckInCompany {
                get {
                    try {
                        return ((int)(this[this.tableApplyRecordInfo.IsCheckInCompanyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.IsCheckInCompanyColumn] = value;
                }
            }
            
            public string CheckRole {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.CheckRoleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckRoleColumn] = value;
                }
            }
            
            public string CheckPersonCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.CheckPersonCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckPersonCodeColumn] = value;
                }
            }
            
            public int IsPass {
                get {
                    try {
                        return ((int)(this[this.tableApplyRecordInfo.IsPassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.IsPassColumn] = value;
                }
            }
            
            public string ApplySheetCheckRecord_pk {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.ApplySheetCheckRecord_pkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.ApplySheetCheckRecord_pkColumn] = value;
                }
            }
            
            public System.DateTime CheckDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableApplyRecordInfo.CheckDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckDateColumn] = value;
                }
            }
            
            public string CheckComment {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.CheckCommentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckCommentColumn] = value;
                }
            }
            
            public int IsDisplays {
                get {
                    try {
                        return ((int)(this[this.tableApplyRecordInfo.IsDisplaysColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.IsDisplaysColumn] = value;
                }
            }
            
            public string DisplaysPersonCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.DisplaysPersonCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.DisplaysPersonCodeColumn] = value;
                }
            }
            
            public string CheckSetp {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.CheckSetpColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckSetpColumn] = value;
                }
            }
            
            public string ApplyTypeName {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.ApplyTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.ApplyTypeNameColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.NameColumn] = value;
                }
            }
            
            public string DisplaysName {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.DisplaysNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.DisplaysNameColumn] = value;
                }
            }
            
            public string CheckRoleName {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.CheckRoleNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckRoleNameColumn] = value;
                }
            }
            
            public string IsAgree {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.IsAgreeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.IsAgreeColumn] = value;
                }
            }
            
            public bool IsApplySheetHead_pkNull() {
                return this.IsNull(this.tableApplyRecordInfo.ApplySheetHead_pkColumn);
            }
            
            public void SetApplySheetHead_pkNull() {
                this[this.tableApplyRecordInfo.ApplySheetHead_pkColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsCheckInCompanyNull() {
                return this.IsNull(this.tableApplyRecordInfo.IsCheckInCompanyColumn);
            }
            
            public void SetIsCheckInCompanyNull() {
                this[this.tableApplyRecordInfo.IsCheckInCompanyColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckRoleNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckRoleColumn);
            }
            
            public void SetCheckRoleNull() {
                this[this.tableApplyRecordInfo.CheckRoleColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckPersonCodeNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckPersonCodeColumn);
            }
            
            public void SetCheckPersonCodeNull() {
                this[this.tableApplyRecordInfo.CheckPersonCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsPassNull() {
                return this.IsNull(this.tableApplyRecordInfo.IsPassColumn);
            }
            
            public void SetIsPassNull() {
                this[this.tableApplyRecordInfo.IsPassColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetCheckRecord_pkNull() {
                return this.IsNull(this.tableApplyRecordInfo.ApplySheetCheckRecord_pkColumn);
            }
            
            public void SetApplySheetCheckRecord_pkNull() {
                this[this.tableApplyRecordInfo.ApplySheetCheckRecord_pkColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckDateNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckDateColumn);
            }
            
            public void SetCheckDateNull() {
                this[this.tableApplyRecordInfo.CheckDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckCommentNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckCommentColumn);
            }
            
            public void SetCheckCommentNull() {
                this[this.tableApplyRecordInfo.CheckCommentColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsDisplaysNull() {
                return this.IsNull(this.tableApplyRecordInfo.IsDisplaysColumn);
            }
            
            public void SetIsDisplaysNull() {
                this[this.tableApplyRecordInfo.IsDisplaysColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisplaysPersonCodeNull() {
                return this.IsNull(this.tableApplyRecordInfo.DisplaysPersonCodeColumn);
            }
            
            public void SetDisplaysPersonCodeNull() {
                this[this.tableApplyRecordInfo.DisplaysPersonCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckSetpNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckSetpColumn);
            }
            
            public void SetCheckSetpNull() {
                this[this.tableApplyRecordInfo.CheckSetpColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyTypeNameNull() {
                return this.IsNull(this.tableApplyRecordInfo.ApplyTypeNameColumn);
            }
            
            public void SetApplyTypeNameNull() {
                this[this.tableApplyRecordInfo.ApplyTypeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableApplyRecordInfo.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableApplyRecordInfo.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisplaysNameNull() {
                return this.IsNull(this.tableApplyRecordInfo.DisplaysNameColumn);
            }
            
            public void SetDisplaysNameNull() {
                this[this.tableApplyRecordInfo.DisplaysNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckRoleNameNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckRoleNameColumn);
            }
            
            public void SetCheckRoleNameNull() {
                this[this.tableApplyRecordInfo.CheckRoleNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsAgreeNull() {
                return this.IsNull(this.tableApplyRecordInfo.IsAgreeColumn);
            }
            
            public void SetIsAgreeNull() {
                this[this.tableApplyRecordInfo.IsAgreeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyRecordInfoRowChangeEvent : EventArgs {
            
            private ApplyRecordInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyRecordInfoRowChangeEvent(ApplyRecordInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyRecordInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

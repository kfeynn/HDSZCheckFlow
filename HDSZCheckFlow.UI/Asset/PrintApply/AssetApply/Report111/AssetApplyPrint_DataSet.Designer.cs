//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5485
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HDSZCheckFlow.UI.Asset.PrintApply.AssetApply.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AssetApplyPrint_DataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AssetApplyPrint_DataSet : global::System.Data.DataSet {
        
        private ApplyHeadInfoDataTable tableApplyHeadInfo;
        
        private ApplyBudgetInfoDataTable tableApplyBudgetInfo;
        
        private ApplyBodyInfoDataTable tableApplyBodyInfo;
        
        private ApplyRecordInfoDataTable tableApplyRecordInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AssetApplyPrint_DataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AssetApplyPrint_DataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ApplyHeadInfo"] != null)) {
                    base.Tables.Add(new ApplyHeadInfoDataTable(ds.Tables["ApplyHeadInfo"]));
                }
                if ((ds.Tables["ApplyBudgetInfo"] != null)) {
                    base.Tables.Add(new ApplyBudgetInfoDataTable(ds.Tables["ApplyBudgetInfo"]));
                }
                if ((ds.Tables["ApplyBodyInfo"] != null)) {
                    base.Tables.Add(new ApplyBodyInfoDataTable(ds.Tables["ApplyBodyInfo"]));
                }
                if ((ds.Tables["ApplyRecordInfo"] != null)) {
                    base.Tables.Add(new ApplyRecordInfoDataTable(ds.Tables["ApplyRecordInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyHeadInfoDataTable ApplyHeadInfo {
            get {
                return this.tableApplyHeadInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyBudgetInfoDataTable ApplyBudgetInfo {
            get {
                return this.tableApplyBudgetInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyBodyInfoDataTable ApplyBodyInfo {
            get {
                return this.tableApplyBodyInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyRecordInfoDataTable ApplyRecordInfo {
            get {
                return this.tableApplyRecordInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AssetApplyPrint_DataSet cln = ((AssetApplyPrint_DataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ApplyHeadInfo"] != null)) {
                    base.Tables.Add(new ApplyHeadInfoDataTable(ds.Tables["ApplyHeadInfo"]));
                }
                if ((ds.Tables["ApplyBudgetInfo"] != null)) {
                    base.Tables.Add(new ApplyBudgetInfoDataTable(ds.Tables["ApplyBudgetInfo"]));
                }
                if ((ds.Tables["ApplyBodyInfo"] != null)) {
                    base.Tables.Add(new ApplyBodyInfoDataTable(ds.Tables["ApplyBodyInfo"]));
                }
                if ((ds.Tables["ApplyRecordInfo"] != null)) {
                    base.Tables.Add(new ApplyRecordInfoDataTable(ds.Tables["ApplyRecordInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableApplyHeadInfo = ((ApplyHeadInfoDataTable)(base.Tables["ApplyHeadInfo"]));
            if ((initTable == true)) {
                if ((this.tableApplyHeadInfo != null)) {
                    this.tableApplyHeadInfo.InitVars();
                }
            }
            this.tableApplyBudgetInfo = ((ApplyBudgetInfoDataTable)(base.Tables["ApplyBudgetInfo"]));
            if ((initTable == true)) {
                if ((this.tableApplyBudgetInfo != null)) {
                    this.tableApplyBudgetInfo.InitVars();
                }
            }
            this.tableApplyBodyInfo = ((ApplyBodyInfoDataTable)(base.Tables["ApplyBodyInfo"]));
            if ((initTable == true)) {
                if ((this.tableApplyBodyInfo != null)) {
                    this.tableApplyBodyInfo.InitVars();
                }
            }
            this.tableApplyRecordInfo = ((ApplyRecordInfoDataTable)(base.Tables["ApplyRecordInfo"]));
            if ((initTable == true)) {
                if ((this.tableApplyRecordInfo != null)) {
                    this.tableApplyRecordInfo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AssetApplyPrint_DataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AssetApplyPrint_DataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableApplyHeadInfo = new ApplyHeadInfoDataTable();
            base.Tables.Add(this.tableApplyHeadInfo);
            this.tableApplyBudgetInfo = new ApplyBudgetInfoDataTable();
            base.Tables.Add(this.tableApplyBudgetInfo);
            this.tableApplyBodyInfo = new ApplyBodyInfoDataTable();
            base.Tables.Add(this.tableApplyBodyInfo);
            this.tableApplyRecordInfo = new ApplyRecordInfoDataTable();
            base.Tables.Add(this.tableApplyRecordInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeApplyHeadInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeApplyBudgetInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeApplyBodyInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeApplyRecordInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AssetApplyPrint_DataSet ds = new AssetApplyPrint_DataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ApplyHeadInfoRowChangeEventHandler(object sender, ApplyHeadInfoRowChangeEvent e);
        
        public delegate void ApplyBudgetInfoRowChangeEventHandler(object sender, ApplyBudgetInfoRowChangeEvent e);
        
        public delegate void ApplyBodyInfoRowChangeEventHandler(object sender, ApplyBodyInfoRowChangeEvent e);
        
        public delegate void ApplyRecordInfoRowChangeEventHandler(object sender, ApplyRecordInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ApplyHeadInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnApplySheetHead_pk;
            
            private global::System.Data.DataColumn columnApplySheetNo;
            
            private global::System.Data.DataColumn columnItemName;
            
            private global::System.Data.DataColumn columnDeptName;
            
            private global::System.Data.DataColumn columnApplyDate;
            
            private global::System.Data.DataColumn columnApplyPersonName;
            
            private global::System.Data.DataColumn columnApplyTypeName;
            
            private global::System.Data.DataColumn columnReasonForAsset;
            
            private global::System.Data.DataColumn columnEffect;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyHeadInfoDataTable() {
                this.TableName = "ApplyHeadInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplyHeadInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ApplyHeadInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplySheetHead_pkColumn {
                get {
                    return this.columnApplySheetHead_pk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplySheetNoColumn {
                get {
                    return this.columnApplySheetNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeptNameColumn {
                get {
                    return this.columnDeptName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplyDateColumn {
                get {
                    return this.columnApplyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplyPersonNameColumn {
                get {
                    return this.columnApplyPersonName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplyTypeNameColumn {
                get {
                    return this.columnApplyTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonForAssetColumn {
                get {
                    return this.columnReasonForAsset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectColumn {
                get {
                    return this.columnEffect;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyHeadInfoRow this[int index] {
                get {
                    return ((ApplyHeadInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowChanging;
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowChanged;
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowDeleting;
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddApplyHeadInfoRow(ApplyHeadInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyHeadInfoRow AddApplyHeadInfoRow(int ApplySheetHead_pk, string ApplySheetNo, string ItemName, string DeptName, System.DateTime ApplyDate, string ApplyPersonName, string ApplyTypeName, string ReasonForAsset, string Effect) {
                ApplyHeadInfoRow rowApplyHeadInfoRow = ((ApplyHeadInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ApplySheetHead_pk,
                        ApplySheetNo,
                        ItemName,
                        DeptName,
                        ApplyDate,
                        ApplyPersonName,
                        ApplyTypeName,
                        ReasonForAsset,
                        Effect};
                rowApplyHeadInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowApplyHeadInfoRow);
                return rowApplyHeadInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ApplyHeadInfoDataTable cln = ((ApplyHeadInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ApplyHeadInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnApplySheetHead_pk = base.Columns["ApplySheetHead_pk"];
                this.columnApplySheetNo = base.Columns["ApplySheetNo"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnDeptName = base.Columns["DeptName"];
                this.columnApplyDate = base.Columns["ApplyDate"];
                this.columnApplyPersonName = base.Columns["ApplyPersonName"];
                this.columnApplyTypeName = base.Columns["ApplyTypeName"];
                this.columnReasonForAsset = base.Columns["ReasonForAsset"];
                this.columnEffect = base.Columns["Effect"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnApplySheetHead_pk = new global::System.Data.DataColumn("ApplySheetHead_pk", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplySheetHead_pk);
                this.columnApplySheetNo = new global::System.Data.DataColumn("ApplySheetNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplySheetNo);
                this.columnItemName = new global::System.Data.DataColumn("ItemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnDeptName = new global::System.Data.DataColumn("DeptName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeptName);
                this.columnApplyDate = new global::System.Data.DataColumn("ApplyDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplyDate);
                this.columnApplyPersonName = new global::System.Data.DataColumn("ApplyPersonName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplyPersonName);
                this.columnApplyTypeName = new global::System.Data.DataColumn("ApplyTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplyTypeName);
                this.columnReasonForAsset = new global::System.Data.DataColumn("ReasonForAsset", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReasonForAsset);
                this.columnEffect = new global::System.Data.DataColumn("Effect", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffect);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyHeadInfoRow NewApplyHeadInfoRow() {
                return ((ApplyHeadInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ApplyHeadInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ApplyHeadInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyHeadInfoRowChanged != null)) {
                    this.ApplyHeadInfoRowChanged(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyHeadInfoRowChanging != null)) {
                    this.ApplyHeadInfoRowChanging(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyHeadInfoRowDeleted != null)) {
                    this.ApplyHeadInfoRowDeleted(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyHeadInfoRowDeleting != null)) {
                    this.ApplyHeadInfoRowDeleting(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveApplyHeadInfoRow(ApplyHeadInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetApplyPrint_DataSet ds = new AssetApplyPrint_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ApplyHeadInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ApplyBudgetInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBudgetMoney;
            
            private global::System.Data.DataColumn columnReadyPay;
            
            private global::System.Data.DataColumn columnCheckMoney;
            
            private global::System.Data.DataColumn columnTotalOutMoney;
            
            private global::System.Data.DataColumn columnLeftMoney;
            
            private global::System.Data.DataColumn columnApplyMoney;
            
            private global::System.Data.DataColumn columnBudgetType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBudgetInfoDataTable() {
                this.TableName = "ApplyBudgetInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplyBudgetInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ApplyBudgetInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetMoneyColumn {
                get {
                    return this.columnBudgetMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReadyPayColumn {
                get {
                    return this.columnReadyPay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckMoneyColumn {
                get {
                    return this.columnCheckMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOutMoneyColumn {
                get {
                    return this.columnTotalOutMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeftMoneyColumn {
                get {
                    return this.columnLeftMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplyMoneyColumn {
                get {
                    return this.columnApplyMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetTypeColumn {
                get {
                    return this.columnBudgetType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBudgetInfoRow this[int index] {
                get {
                    return ((ApplyBudgetInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowChanging;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowChanged;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowDeleting;
            
            public event ApplyBudgetInfoRowChangeEventHandler ApplyBudgetInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddApplyBudgetInfoRow(ApplyBudgetInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBudgetInfoRow AddApplyBudgetInfoRow(decimal BudgetMoney, decimal ReadyPay, decimal CheckMoney, decimal TotalOutMoney, decimal LeftMoney, decimal ApplyMoney, string BudgetType) {
                ApplyBudgetInfoRow rowApplyBudgetInfoRow = ((ApplyBudgetInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BudgetMoney,
                        ReadyPay,
                        CheckMoney,
                        TotalOutMoney,
                        LeftMoney,
                        ApplyMoney,
                        BudgetType};
                rowApplyBudgetInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowApplyBudgetInfoRow);
                return rowApplyBudgetInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ApplyBudgetInfoDataTable cln = ((ApplyBudgetInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ApplyBudgetInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBudgetMoney = base.Columns["BudgetMoney"];
                this.columnReadyPay = base.Columns["ReadyPay"];
                this.columnCheckMoney = base.Columns["CheckMoney"];
                this.columnTotalOutMoney = base.Columns["TotalOutMoney"];
                this.columnLeftMoney = base.Columns["LeftMoney"];
                this.columnApplyMoney = base.Columns["ApplyMoney"];
                this.columnBudgetType = base.Columns["BudgetType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBudgetMoney = new global::System.Data.DataColumn("BudgetMoney", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudgetMoney);
                this.columnReadyPay = new global::System.Data.DataColumn("ReadyPay", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReadyPay);
                this.columnCheckMoney = new global::System.Data.DataColumn("CheckMoney", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckMoney);
                this.columnTotalOutMoney = new global::System.Data.DataColumn("TotalOutMoney", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOutMoney);
                this.columnLeftMoney = new global::System.Data.DataColumn("LeftMoney", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeftMoney);
                this.columnApplyMoney = new global::System.Data.DataColumn("ApplyMoney", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplyMoney);
                this.columnBudgetType = new global::System.Data.DataColumn("BudgetType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudgetType);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBudgetInfoRow NewApplyBudgetInfoRow() {
                return ((ApplyBudgetInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ApplyBudgetInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ApplyBudgetInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyBudgetInfoRowChanged != null)) {
                    this.ApplyBudgetInfoRowChanged(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyBudgetInfoRowChanging != null)) {
                    this.ApplyBudgetInfoRowChanging(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyBudgetInfoRowDeleted != null)) {
                    this.ApplyBudgetInfoRowDeleted(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyBudgetInfoRowDeleting != null)) {
                    this.ApplyBudgetInfoRowDeleting(this, new ApplyBudgetInfoRowChangeEvent(((ApplyBudgetInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveApplyBudgetInfoRow(ApplyBudgetInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetApplyPrint_DataSet ds = new AssetApplyPrint_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ApplyBudgetInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ApplyBodyInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnApplySheetHead_pk;
            
            private global::System.Data.DataColumn columnSubjectName;
            
            private global::System.Data.DataColumn columnInventoryName;
            
            private global::System.Data.DataColumn columnInvType;
            
            private global::System.Data.DataColumn columnUnitName;
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnOriginalcurrPrice;
            
            private global::System.Data.DataColumn columnOriginalMoney;
            
            private global::System.Data.DataColumn columncurrTypeCode;
            
            private global::System.Data.DataColumn columnExchangeRate;
            
            private global::System.Data.DataColumn columnRmbPrice;
            
            private global::System.Data.DataColumn columnRmbMoney;
            
            private global::System.Data.DataColumn columnCheckNumber;
            
            private global::System.Data.DataColumn columnIsChecked;
            
            private global::System.Data.DataColumn columnIsGiveup;
            
            private global::System.Data.DataColumn columnGiveupSigner;
            
            private global::System.Data.DataColumn columnGiveupDatetime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBodyInfoDataTable() {
                this.TableName = "ApplyBodyInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplyBodyInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ApplyBodyInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplySheetHead_pkColumn {
                get {
                    return this.columnApplySheetHead_pk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectNameColumn {
                get {
                    return this.columnSubjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryNameColumn {
                get {
                    return this.columnInventoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvTypeColumn {
                get {
                    return this.columnInvType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitNameColumn {
                get {
                    return this.columnUnitName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalcurrPriceColumn {
                get {
                    return this.columnOriginalcurrPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalMoneyColumn {
                get {
                    return this.columnOriginalMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn currTypeCodeColumn {
                get {
                    return this.columncurrTypeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExchangeRateColumn {
                get {
                    return this.columnExchangeRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RmbPriceColumn {
                get {
                    return this.columnRmbPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RmbMoneyColumn {
                get {
                    return this.columnRmbMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckNumberColumn {
                get {
                    return this.columnCheckNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckedColumn {
                get {
                    return this.columnIsChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsGiveupColumn {
                get {
                    return this.columnIsGiveup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiveupSignerColumn {
                get {
                    return this.columnGiveupSigner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiveupDatetimeColumn {
                get {
                    return this.columnGiveupDatetime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBodyInfoRow this[int index] {
                get {
                    return ((ApplyBodyInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyBodyInfoRowChangeEventHandler ApplyBodyInfoRowChanging;
            
            public event ApplyBodyInfoRowChangeEventHandler ApplyBodyInfoRowChanged;
            
            public event ApplyBodyInfoRowChangeEventHandler ApplyBodyInfoRowDeleting;
            
            public event ApplyBodyInfoRowChangeEventHandler ApplyBodyInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddApplyBodyInfoRow(ApplyBodyInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBodyInfoRow AddApplyBodyInfoRow(
                        int ID, 
                        string ApplySheetHead_pk, 
                        string SubjectName, 
                        string InventoryName, 
                        string InvType, 
                        string UnitName, 
                        int Number, 
                        decimal OriginalcurrPrice, 
                        decimal OriginalMoney, 
                        string currTypeCode, 
                        decimal ExchangeRate, 
                        decimal RmbPrice, 
                        decimal RmbMoney, 
                        string CheckNumber, 
                        int IsChecked, 
                        int IsGiveup, 
                        int GiveupSigner, 
                        System.DateTime GiveupDatetime) {
                ApplyBodyInfoRow rowApplyBodyInfoRow = ((ApplyBodyInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        ApplySheetHead_pk,
                        SubjectName,
                        InventoryName,
                        InvType,
                        UnitName,
                        Number,
                        OriginalcurrPrice,
                        OriginalMoney,
                        currTypeCode,
                        ExchangeRate,
                        RmbPrice,
                        RmbMoney,
                        CheckNumber,
                        IsChecked,
                        IsGiveup,
                        GiveupSigner,
                        GiveupDatetime};
                rowApplyBodyInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowApplyBodyInfoRow);
                return rowApplyBodyInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ApplyBodyInfoDataTable cln = ((ApplyBodyInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ApplyBodyInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnApplySheetHead_pk = base.Columns["ApplySheetHead_pk"];
                this.columnSubjectName = base.Columns["SubjectName"];
                this.columnInventoryName = base.Columns["InventoryName"];
                this.columnInvType = base.Columns["InvType"];
                this.columnUnitName = base.Columns["UnitName"];
                this.columnNumber = base.Columns["Number"];
                this.columnOriginalcurrPrice = base.Columns["OriginalcurrPrice"];
                this.columnOriginalMoney = base.Columns["OriginalMoney"];
                this.columncurrTypeCode = base.Columns["currTypeCode"];
                this.columnExchangeRate = base.Columns["ExchangeRate"];
                this.columnRmbPrice = base.Columns["RmbPrice"];
                this.columnRmbMoney = base.Columns["RmbMoney"];
                this.columnCheckNumber = base.Columns["CheckNumber"];
                this.columnIsChecked = base.Columns["IsChecked"];
                this.columnIsGiveup = base.Columns["IsGiveup"];
                this.columnGiveupSigner = base.Columns["GiveupSigner"];
                this.columnGiveupDatetime = base.Columns["GiveupDatetime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnApplySheetHead_pk = new global::System.Data.DataColumn("ApplySheetHead_pk", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplySheetHead_pk);
                this.columnSubjectName = new global::System.Data.DataColumn("SubjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectName);
                this.columnInventoryName = new global::System.Data.DataColumn("InventoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryName);
                this.columnInvType = new global::System.Data.DataColumn("InvType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvType);
                this.columnUnitName = new global::System.Data.DataColumn("UnitName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitName);
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnOriginalcurrPrice = new global::System.Data.DataColumn("OriginalcurrPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalcurrPrice);
                this.columnOriginalMoney = new global::System.Data.DataColumn("OriginalMoney", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalMoney);
                this.columncurrTypeCode = new global::System.Data.DataColumn("currTypeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncurrTypeCode);
                this.columnExchangeRate = new global::System.Data.DataColumn("ExchangeRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExchangeRate);
                this.columnRmbPrice = new global::System.Data.DataColumn("RmbPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRmbPrice);
                this.columnRmbMoney = new global::System.Data.DataColumn("RmbMoney", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRmbMoney);
                this.columnCheckNumber = new global::System.Data.DataColumn("CheckNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckNumber);
                this.columnIsChecked = new global::System.Data.DataColumn("IsChecked", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsChecked);
                this.columnIsGiveup = new global::System.Data.DataColumn("IsGiveup", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGiveup);
                this.columnGiveupSigner = new global::System.Data.DataColumn("GiveupSigner", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiveupSigner);
                this.columnGiveupDatetime = new global::System.Data.DataColumn("GiveupDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiveupDatetime);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBodyInfoRow NewApplyBodyInfoRow() {
                return ((ApplyBodyInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ApplyBodyInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ApplyBodyInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyBodyInfoRowChanged != null)) {
                    this.ApplyBodyInfoRowChanged(this, new ApplyBodyInfoRowChangeEvent(((ApplyBodyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyBodyInfoRowChanging != null)) {
                    this.ApplyBodyInfoRowChanging(this, new ApplyBodyInfoRowChangeEvent(((ApplyBodyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyBodyInfoRowDeleted != null)) {
                    this.ApplyBodyInfoRowDeleted(this, new ApplyBodyInfoRowChangeEvent(((ApplyBodyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyBodyInfoRowDeleting != null)) {
                    this.ApplyBodyInfoRowDeleting(this, new ApplyBodyInfoRowChangeEvent(((ApplyBodyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveApplyBodyInfoRow(ApplyBodyInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetApplyPrint_DataSet ds = new AssetApplyPrint_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ApplyBodyInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ApplyRecordInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnApplySheetHead_pk;
            
            private global::System.Data.DataColumn columnIsCheckInCompany;
            
            private global::System.Data.DataColumn columnCheckRole;
            
            private global::System.Data.DataColumn columnCheckPersonCode;
            
            private global::System.Data.DataColumn columnIsPass;
            
            private global::System.Data.DataColumn columnApplySheetCheckRecord_pk;
            
            private global::System.Data.DataColumn columnCheckDate;
            
            private global::System.Data.DataColumn columnCheckComment;
            
            private global::System.Data.DataColumn columnIsDisplays;
            
            private global::System.Data.DataColumn columnDisplaysPersonCode;
            
            private global::System.Data.DataColumn columnCheckSetp;
            
            private global::System.Data.DataColumn columnApplyTypeName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDisplaysName;
            
            private global::System.Data.DataColumn columnCheckRoleName;
            
            private global::System.Data.DataColumn columnIsAgree;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyRecordInfoDataTable() {
                this.TableName = "ApplyRecordInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplyRecordInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ApplyRecordInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplySheetHead_pkColumn {
                get {
                    return this.columnApplySheetHead_pk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckInCompanyColumn {
                get {
                    return this.columnIsCheckInCompany;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckRoleColumn {
                get {
                    return this.columnCheckRole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckPersonCodeColumn {
                get {
                    return this.columnCheckPersonCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPassColumn {
                get {
                    return this.columnIsPass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplySheetCheckRecord_pkColumn {
                get {
                    return this.columnApplySheetCheckRecord_pk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckDateColumn {
                get {
                    return this.columnCheckDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckCommentColumn {
                get {
                    return this.columnCheckComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDisplaysColumn {
                get {
                    return this.columnIsDisplays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplaysPersonCodeColumn {
                get {
                    return this.columnDisplaysPersonCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckSetpColumn {
                get {
                    return this.columnCheckSetp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplyTypeNameColumn {
                get {
                    return this.columnApplyTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplaysNameColumn {
                get {
                    return this.columnDisplaysName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckRoleNameColumn {
                get {
                    return this.columnCheckRoleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAgreeColumn {
                get {
                    return this.columnIsAgree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyRecordInfoRow this[int index] {
                get {
                    return ((ApplyRecordInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyRecordInfoRowChangeEventHandler ApplyRecordInfoRowChanging;
            
            public event ApplyRecordInfoRowChangeEventHandler ApplyRecordInfoRowChanged;
            
            public event ApplyRecordInfoRowChangeEventHandler ApplyRecordInfoRowDeleting;
            
            public event ApplyRecordInfoRowChangeEventHandler ApplyRecordInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddApplyRecordInfoRow(ApplyRecordInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyRecordInfoRow AddApplyRecordInfoRow(
                        string ApplySheetHead_pk, 
                        int IsCheckInCompany, 
                        string CheckRole, 
                        string CheckPersonCode, 
                        int IsPass, 
                        string ApplySheetCheckRecord_pk, 
                        System.DateTime CheckDate, 
                        string CheckComment, 
                        int IsDisplays, 
                        string DisplaysPersonCode, 
                        string CheckSetp, 
                        string ApplyTypeName, 
                        string Name, 
                        string DisplaysName, 
                        string CheckRoleName, 
                        string IsAgree) {
                ApplyRecordInfoRow rowApplyRecordInfoRow = ((ApplyRecordInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ApplySheetHead_pk,
                        IsCheckInCompany,
                        CheckRole,
                        CheckPersonCode,
                        IsPass,
                        ApplySheetCheckRecord_pk,
                        CheckDate,
                        CheckComment,
                        IsDisplays,
                        DisplaysPersonCode,
                        CheckSetp,
                        ApplyTypeName,
                        Name,
                        DisplaysName,
                        CheckRoleName,
                        IsAgree};
                rowApplyRecordInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowApplyRecordInfoRow);
                return rowApplyRecordInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ApplyRecordInfoDataTable cln = ((ApplyRecordInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ApplyRecordInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnApplySheetHead_pk = base.Columns["ApplySheetHead_pk"];
                this.columnIsCheckInCompany = base.Columns["IsCheckInCompany"];
                this.columnCheckRole = base.Columns["CheckRole"];
                this.columnCheckPersonCode = base.Columns["CheckPersonCode"];
                this.columnIsPass = base.Columns["IsPass"];
                this.columnApplySheetCheckRecord_pk = base.Columns["ApplySheetCheckRecord_pk"];
                this.columnCheckDate = base.Columns["CheckDate"];
                this.columnCheckComment = base.Columns["CheckComment"];
                this.columnIsDisplays = base.Columns["IsDisplays"];
                this.columnDisplaysPersonCode = base.Columns["DisplaysPersonCode"];
                this.columnCheckSetp = base.Columns["CheckSetp"];
                this.columnApplyTypeName = base.Columns["ApplyTypeName"];
                this.columnName = base.Columns["Name"];
                this.columnDisplaysName = base.Columns["DisplaysName"];
                this.columnCheckRoleName = base.Columns["CheckRoleName"];
                this.columnIsAgree = base.Columns["IsAgree"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnApplySheetHead_pk = new global::System.Data.DataColumn("ApplySheetHead_pk", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplySheetHead_pk);
                this.columnIsCheckInCompany = new global::System.Data.DataColumn("IsCheckInCompany", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCheckInCompany);
                this.columnCheckRole = new global::System.Data.DataColumn("CheckRole", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckRole);
                this.columnCheckPersonCode = new global::System.Data.DataColumn("CheckPersonCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckPersonCode);
                this.columnIsPass = new global::System.Data.DataColumn("IsPass", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPass);
                this.columnApplySheetCheckRecord_pk = new global::System.Data.DataColumn("ApplySheetCheckRecord_pk", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplySheetCheckRecord_pk);
                this.columnCheckDate = new global::System.Data.DataColumn("CheckDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckDate);
                this.columnCheckComment = new global::System.Data.DataColumn("CheckComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckComment);
                this.columnIsDisplays = new global::System.Data.DataColumn("IsDisplays", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDisplays);
                this.columnDisplaysPersonCode = new global::System.Data.DataColumn("DisplaysPersonCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplaysPersonCode);
                this.columnCheckSetp = new global::System.Data.DataColumn("CheckSetp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckSetp);
                this.columnApplyTypeName = new global::System.Data.DataColumn("ApplyTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplyTypeName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDisplaysName = new global::System.Data.DataColumn("DisplaysName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplaysName);
                this.columnCheckRoleName = new global::System.Data.DataColumn("CheckRoleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckRoleName);
                this.columnIsAgree = new global::System.Data.DataColumn("IsAgree", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAgree);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyRecordInfoRow NewApplyRecordInfoRow() {
                return ((ApplyRecordInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ApplyRecordInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ApplyRecordInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyRecordInfoRowChanged != null)) {
                    this.ApplyRecordInfoRowChanged(this, new ApplyRecordInfoRowChangeEvent(((ApplyRecordInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyRecordInfoRowChanging != null)) {
                    this.ApplyRecordInfoRowChanging(this, new ApplyRecordInfoRowChangeEvent(((ApplyRecordInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyRecordInfoRowDeleted != null)) {
                    this.ApplyRecordInfoRowDeleted(this, new ApplyRecordInfoRowChangeEvent(((ApplyRecordInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyRecordInfoRowDeleting != null)) {
                    this.ApplyRecordInfoRowDeleting(this, new ApplyRecordInfoRowChangeEvent(((ApplyRecordInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveApplyRecordInfoRow(ApplyRecordInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetApplyPrint_DataSet ds = new AssetApplyPrint_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ApplyRecordInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ApplyHeadInfoRow : global::System.Data.DataRow {
            
            private ApplyHeadInfoDataTable tableApplyHeadInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplyHeadInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyHeadInfo = ((ApplyHeadInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApplySheetHead_pk {
                get {
                    try {
                        return ((int)(this[this.tableApplyHeadInfo.ApplySheetHead_pkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyHeadInfo”中列“ApplySheetHead_pk”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplySheetHead_pkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApplySheetNo {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ApplySheetNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyHeadInfo”中列“ApplySheetNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplySheetNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ItemNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyHeadInfo”中列“ItemName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ItemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeptName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.DeptNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyHeadInfo”中列“DeptName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.DeptNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ApplyDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableApplyHeadInfo.ApplyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyHeadInfo”中列“ApplyDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApplyPersonName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ApplyPersonNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyHeadInfo”中列“ApplyPersonName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplyPersonNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApplyTypeName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ApplyTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyHeadInfo”中列“ApplyTypeName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplyTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReasonForAsset {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ReasonForAssetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyHeadInfo”中列“ReasonForAsset”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ReasonForAssetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Effect {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.EffectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyHeadInfo”中列“Effect”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.EffectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplySheetHead_pkNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplySheetHead_pkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplySheetHead_pkNull() {
                this[this.tableApplyHeadInfo.ApplySheetHead_pkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplySheetNoNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplySheetNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplySheetNoNull() {
                this[this.tableApplyHeadInfo.ApplySheetNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.ItemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNameNull() {
                this[this.tableApplyHeadInfo.ItemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeptNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.DeptNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeptNameNull() {
                this[this.tableApplyHeadInfo.DeptNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplyDateNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplyDateNull() {
                this[this.tableApplyHeadInfo.ApplyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplyPersonNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplyPersonNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplyPersonNameNull() {
                this[this.tableApplyHeadInfo.ApplyPersonNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplyTypeNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplyTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplyTypeNameNull() {
                this[this.tableApplyHeadInfo.ApplyTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonForAssetNull() {
                return this.IsNull(this.tableApplyHeadInfo.ReasonForAssetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonForAssetNull() {
                this[this.tableApplyHeadInfo.ReasonForAssetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectNull() {
                return this.IsNull(this.tableApplyHeadInfo.EffectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectNull() {
                this[this.tableApplyHeadInfo.EffectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ApplyBudgetInfoRow : global::System.Data.DataRow {
            
            private ApplyBudgetInfoDataTable tableApplyBudgetInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplyBudgetInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyBudgetInfo = ((ApplyBudgetInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BudgetMoney {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBudgetInfo.BudgetMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBudgetInfo”中列“BudgetMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.BudgetMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ReadyPay {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBudgetInfo.ReadyPayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBudgetInfo”中列“ReadyPay”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ReadyPayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CheckMoney {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBudgetInfo.CheckMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBudgetInfo”中列“CheckMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.CheckMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOutMoney {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBudgetInfo.TotalOutMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBudgetInfo”中列“TotalOutMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.TotalOutMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LeftMoney {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBudgetInfo.LeftMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBudgetInfo”中列“LeftMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.LeftMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ApplyMoney {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBudgetInfo.ApplyMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBudgetInfo”中列“ApplyMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.ApplyMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BudgetType {
                get {
                    try {
                        return ((string)(this[this.tableApplyBudgetInfo.BudgetTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBudgetInfo”中列“BudgetType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBudgetInfo.BudgetTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.BudgetMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetMoneyNull() {
                this[this.tableApplyBudgetInfo.BudgetMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadyPayNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ReadyPayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReadyPayNull() {
                this[this.tableApplyBudgetInfo.ReadyPayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.CheckMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckMoneyNull() {
                this[this.tableApplyBudgetInfo.CheckMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOutMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.TotalOutMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOutMoneyNull() {
                this[this.tableApplyBudgetInfo.TotalOutMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeftMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.LeftMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeftMoneyNull() {
                this[this.tableApplyBudgetInfo.LeftMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplyMoneyNull() {
                return this.IsNull(this.tableApplyBudgetInfo.ApplyMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplyMoneyNull() {
                this[this.tableApplyBudgetInfo.ApplyMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetTypeNull() {
                return this.IsNull(this.tableApplyBudgetInfo.BudgetTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetTypeNull() {
                this[this.tableApplyBudgetInfo.BudgetTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ApplyBodyInfoRow : global::System.Data.DataRow {
            
            private ApplyBodyInfoDataTable tableApplyBodyInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplyBodyInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyBodyInfo = ((ApplyBodyInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableApplyBodyInfo.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApplySheetHead_pk {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.ApplySheetHead_pkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“ApplySheetHead_pk”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.ApplySheetHead_pkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubjectName {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.SubjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“SubjectName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.SubjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InventoryName {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.InventoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“InventoryName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.InventoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvType {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.InvTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“InvType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.InvTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitName {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.UnitNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“UnitName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.UnitNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    try {
                        return ((int)(this[this.tableApplyBodyInfo.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“Number”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OriginalcurrPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBodyInfo.OriginalcurrPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“OriginalcurrPrice”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.OriginalcurrPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OriginalMoney {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBodyInfo.OriginalMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“OriginalMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.OriginalMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string currTypeCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.currTypeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“currTypeCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.currTypeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExchangeRate {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBodyInfo.ExchangeRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“ExchangeRate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.ExchangeRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RmbPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBodyInfo.RmbPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“RmbPrice”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.RmbPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RmbMoney {
                get {
                    try {
                        return ((decimal)(this[this.tableApplyBodyInfo.RmbMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“RmbMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.RmbMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckNumber {
                get {
                    try {
                        return ((string)(this[this.tableApplyBodyInfo.CheckNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“CheckNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.CheckNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsChecked {
                get {
                    try {
                        return ((int)(this[this.tableApplyBodyInfo.IsCheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“IsChecked”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.IsCheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsGiveup {
                get {
                    try {
                        return ((int)(this[this.tableApplyBodyInfo.IsGiveupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“IsGiveup”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.IsGiveupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GiveupSigner {
                get {
                    try {
                        return ((int)(this[this.tableApplyBodyInfo.GiveupSignerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“GiveupSigner”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.GiveupSignerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime GiveupDatetime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableApplyBodyInfo.GiveupDatetimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyBodyInfo”中列“GiveupDatetime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyBodyInfo.GiveupDatetimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableApplyBodyInfo.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableApplyBodyInfo.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplySheetHead_pkNull() {
                return this.IsNull(this.tableApplyBodyInfo.ApplySheetHead_pkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplySheetHead_pkNull() {
                this[this.tableApplyBodyInfo.ApplySheetHead_pkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNameNull() {
                return this.IsNull(this.tableApplyBodyInfo.SubjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNameNull() {
                this[this.tableApplyBodyInfo.SubjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryNameNull() {
                return this.IsNull(this.tableApplyBodyInfo.InventoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryNameNull() {
                this[this.tableApplyBodyInfo.InventoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvTypeNull() {
                return this.IsNull(this.tableApplyBodyInfo.InvTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvTypeNull() {
                this[this.tableApplyBodyInfo.InvTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNameNull() {
                return this.IsNull(this.tableApplyBodyInfo.UnitNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNameNull() {
                this[this.tableApplyBodyInfo.UnitNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableApplyBodyInfo.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableApplyBodyInfo.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalcurrPriceNull() {
                return this.IsNull(this.tableApplyBodyInfo.OriginalcurrPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalcurrPriceNull() {
                this[this.tableApplyBodyInfo.OriginalcurrPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalMoneyNull() {
                return this.IsNull(this.tableApplyBodyInfo.OriginalMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalMoneyNull() {
                this[this.tableApplyBodyInfo.OriginalMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscurrTypeCodeNull() {
                return this.IsNull(this.tableApplyBodyInfo.currTypeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcurrTypeCodeNull() {
                this[this.tableApplyBodyInfo.currTypeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExchangeRateNull() {
                return this.IsNull(this.tableApplyBodyInfo.ExchangeRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExchangeRateNull() {
                this[this.tableApplyBodyInfo.ExchangeRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRmbPriceNull() {
                return this.IsNull(this.tableApplyBodyInfo.RmbPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRmbPriceNull() {
                this[this.tableApplyBodyInfo.RmbPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRmbMoneyNull() {
                return this.IsNull(this.tableApplyBodyInfo.RmbMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRmbMoneyNull() {
                this[this.tableApplyBodyInfo.RmbMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckNumberNull() {
                return this.IsNull(this.tableApplyBodyInfo.CheckNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckNumberNull() {
                this[this.tableApplyBodyInfo.CheckNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCheckedNull() {
                return this.IsNull(this.tableApplyBodyInfo.IsCheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCheckedNull() {
                this[this.tableApplyBodyInfo.IsCheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsGiveupNull() {
                return this.IsNull(this.tableApplyBodyInfo.IsGiveupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsGiveupNull() {
                this[this.tableApplyBodyInfo.IsGiveupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiveupSignerNull() {
                return this.IsNull(this.tableApplyBodyInfo.GiveupSignerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiveupSignerNull() {
                this[this.tableApplyBodyInfo.GiveupSignerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiveupDatetimeNull() {
                return this.IsNull(this.tableApplyBodyInfo.GiveupDatetimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiveupDatetimeNull() {
                this[this.tableApplyBodyInfo.GiveupDatetimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ApplyRecordInfoRow : global::System.Data.DataRow {
            
            private ApplyRecordInfoDataTable tableApplyRecordInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplyRecordInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyRecordInfo = ((ApplyRecordInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApplySheetHead_pk {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.ApplySheetHead_pkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“ApplySheetHead_pk”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.ApplySheetHead_pkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsCheckInCompany {
                get {
                    try {
                        return ((int)(this[this.tableApplyRecordInfo.IsCheckInCompanyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“IsCheckInCompany”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.IsCheckInCompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckRole {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.CheckRoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“CheckRole”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckRoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckPersonCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.CheckPersonCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“CheckPersonCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckPersonCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsPass {
                get {
                    try {
                        return ((int)(this[this.tableApplyRecordInfo.IsPassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“IsPass”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.IsPassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApplySheetCheckRecord_pk {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.ApplySheetCheckRecord_pkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“ApplySheetCheckRecord_pk”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.ApplySheetCheckRecord_pkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CheckDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableApplyRecordInfo.CheckDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“CheckDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckComment {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.CheckCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“CheckComment”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsDisplays {
                get {
                    try {
                        return ((int)(this[this.tableApplyRecordInfo.IsDisplaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“IsDisplays”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.IsDisplaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisplaysPersonCode {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.DisplaysPersonCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“DisplaysPersonCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.DisplaysPersonCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckSetp {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.CheckSetpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“CheckSetp”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckSetpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApplyTypeName {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.ApplyTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“ApplyTypeName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.ApplyTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“Name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisplaysName {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.DisplaysNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“DisplaysName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.DisplaysNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckRoleName {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.CheckRoleNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“CheckRoleName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.CheckRoleNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsAgree {
                get {
                    try {
                        return ((string)(this[this.tableApplyRecordInfo.IsAgreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ApplyRecordInfo”中列“IsAgree”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyRecordInfo.IsAgreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplySheetHead_pkNull() {
                return this.IsNull(this.tableApplyRecordInfo.ApplySheetHead_pkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplySheetHead_pkNull() {
                this[this.tableApplyRecordInfo.ApplySheetHead_pkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCheckInCompanyNull() {
                return this.IsNull(this.tableApplyRecordInfo.IsCheckInCompanyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCheckInCompanyNull() {
                this[this.tableApplyRecordInfo.IsCheckInCompanyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckRoleNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckRoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckRoleNull() {
                this[this.tableApplyRecordInfo.CheckRoleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckPersonCodeNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckPersonCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckPersonCodeNull() {
                this[this.tableApplyRecordInfo.CheckPersonCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPassNull() {
                return this.IsNull(this.tableApplyRecordInfo.IsPassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPassNull() {
                this[this.tableApplyRecordInfo.IsPassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplySheetCheckRecord_pkNull() {
                return this.IsNull(this.tableApplyRecordInfo.ApplySheetCheckRecord_pkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplySheetCheckRecord_pkNull() {
                this[this.tableApplyRecordInfo.ApplySheetCheckRecord_pkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckDateNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckDateNull() {
                this[this.tableApplyRecordInfo.CheckDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckCommentNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckCommentNull() {
                this[this.tableApplyRecordInfo.CheckCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDisplaysNull() {
                return this.IsNull(this.tableApplyRecordInfo.IsDisplaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDisplaysNull() {
                this[this.tableApplyRecordInfo.IsDisplaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisplaysPersonCodeNull() {
                return this.IsNull(this.tableApplyRecordInfo.DisplaysPersonCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisplaysPersonCodeNull() {
                this[this.tableApplyRecordInfo.DisplaysPersonCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckSetpNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckSetpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckSetpNull() {
                this[this.tableApplyRecordInfo.CheckSetpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplyTypeNameNull() {
                return this.IsNull(this.tableApplyRecordInfo.ApplyTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplyTypeNameNull() {
                this[this.tableApplyRecordInfo.ApplyTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableApplyRecordInfo.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableApplyRecordInfo.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisplaysNameNull() {
                return this.IsNull(this.tableApplyRecordInfo.DisplaysNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisplaysNameNull() {
                this[this.tableApplyRecordInfo.DisplaysNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckRoleNameNull() {
                return this.IsNull(this.tableApplyRecordInfo.CheckRoleNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckRoleNameNull() {
                this[this.tableApplyRecordInfo.CheckRoleNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAgreeNull() {
                return this.IsNull(this.tableApplyRecordInfo.IsAgreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAgreeNull() {
                this[this.tableApplyRecordInfo.IsAgreeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ApplyHeadInfoRowChangeEvent : global::System.EventArgs {
            
            private ApplyHeadInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyHeadInfoRowChangeEvent(ApplyHeadInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyHeadInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ApplyBudgetInfoRowChangeEvent : global::System.EventArgs {
            
            private ApplyBudgetInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBudgetInfoRowChangeEvent(ApplyBudgetInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBudgetInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ApplyBodyInfoRowChangeEvent : global::System.EventArgs {
            
            private ApplyBodyInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBodyInfoRowChangeEvent(ApplyBodyInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyBodyInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ApplyRecordInfoRowChangeEvent : global::System.EventArgs {
            
            private ApplyRecordInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyRecordInfoRowChangeEvent(ApplyRecordInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplyRecordInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
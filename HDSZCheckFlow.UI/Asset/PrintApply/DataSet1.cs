//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HDSZCheckFlow.UI.Asset.PrintApply {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private ApplyHeadInfoDataTable tableApplyHeadInfo;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ApplyHeadInfo"] != null)) {
                    this.Tables.Add(new ApplyHeadInfoDataTable(ds.Tables["ApplyHeadInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplyHeadInfoDataTable ApplyHeadInfo {
            get {
                return this.tableApplyHeadInfo;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ApplyHeadInfo"] != null)) {
                this.Tables.Add(new ApplyHeadInfoDataTable(ds.Tables["ApplyHeadInfo"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableApplyHeadInfo = ((ApplyHeadInfoDataTable)(this.Tables["ApplyHeadInfo"]));
            if ((this.tableApplyHeadInfo != null)) {
                this.tableApplyHeadInfo.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableApplyHeadInfo = new ApplyHeadInfoDataTable();
            this.Tables.Add(this.tableApplyHeadInfo);
        }
        
        private bool ShouldSerializeApplyHeadInfo() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ApplyHeadInfoRowChangeEventHandler(object sender, ApplyHeadInfoRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyHeadInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnApplySheetHead_pk;
            
            private DataColumn columnApplySheetNo;
            
            private DataColumn columnItemName;
            
            private DataColumn columnDeptName;
            
            private DataColumn columnApplyDate;
            
            private DataColumn columnApplyPersonName;
            
            private DataColumn columnApplyTypeName;
            
            internal ApplyHeadInfoDataTable() : 
                    base("ApplyHeadInfo") {
                this.InitClass();
            }
            
            internal ApplyHeadInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ApplySheetHead_pkColumn {
                get {
                    return this.columnApplySheetHead_pk;
                }
            }
            
            internal DataColumn ApplySheetNoColumn {
                get {
                    return this.columnApplySheetNo;
                }
            }
            
            internal DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            internal DataColumn DeptNameColumn {
                get {
                    return this.columnDeptName;
                }
            }
            
            internal DataColumn ApplyDateColumn {
                get {
                    return this.columnApplyDate;
                }
            }
            
            internal DataColumn ApplyPersonNameColumn {
                get {
                    return this.columnApplyPersonName;
                }
            }
            
            internal DataColumn ApplyTypeNameColumn {
                get {
                    return this.columnApplyTypeName;
                }
            }
            
            public ApplyHeadInfoRow this[int index] {
                get {
                    return ((ApplyHeadInfoRow)(this.Rows[index]));
                }
            }
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowChanged;
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowChanging;
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowDeleted;
            
            public event ApplyHeadInfoRowChangeEventHandler ApplyHeadInfoRowDeleting;
            
            public void AddApplyHeadInfoRow(ApplyHeadInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ApplyHeadInfoRow AddApplyHeadInfoRow(int ApplySheetHead_pk, string ApplySheetNo, string ItemName, string DeptName, System.DateTime ApplyDate, string ApplyPersonName, string ApplyTypeName) {
                ApplyHeadInfoRow rowApplyHeadInfoRow = ((ApplyHeadInfoRow)(this.NewRow()));
                rowApplyHeadInfoRow.ItemArray = new object[] {
                        ApplySheetHead_pk,
                        ApplySheetNo,
                        ItemName,
                        DeptName,
                        ApplyDate,
                        ApplyPersonName,
                        ApplyTypeName};
                this.Rows.Add(rowApplyHeadInfoRow);
                return rowApplyHeadInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplyHeadInfoDataTable cln = ((ApplyHeadInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplyHeadInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnApplySheetHead_pk = this.Columns["ApplySheetHead_pk"];
                this.columnApplySheetNo = this.Columns["ApplySheetNo"];
                this.columnItemName = this.Columns["ItemName"];
                this.columnDeptName = this.Columns["DeptName"];
                this.columnApplyDate = this.Columns["ApplyDate"];
                this.columnApplyPersonName = this.Columns["ApplyPersonName"];
                this.columnApplyTypeName = this.Columns["ApplyTypeName"];
            }
            
            private void InitClass() {
                this.columnApplySheetHead_pk = new DataColumn("ApplySheetHead_pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetHead_pk);
                this.columnApplySheetNo = new DataColumn("ApplySheetNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplySheetNo);
                this.columnItemName = new DataColumn("ItemName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemName);
                this.columnDeptName = new DataColumn("DeptName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeptName);
                this.columnApplyDate = new DataColumn("ApplyDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyDate);
                this.columnApplyPersonName = new DataColumn("ApplyPersonName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyPersonName);
                this.columnApplyTypeName = new DataColumn("ApplyTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplyTypeName);
            }
            
            public ApplyHeadInfoRow NewApplyHeadInfoRow() {
                return ((ApplyHeadInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplyHeadInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplyHeadInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplyHeadInfoRowChanged != null)) {
                    this.ApplyHeadInfoRowChanged(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplyHeadInfoRowChanging != null)) {
                    this.ApplyHeadInfoRowChanging(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplyHeadInfoRowDeleted != null)) {
                    this.ApplyHeadInfoRowDeleted(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplyHeadInfoRowDeleting != null)) {
                    this.ApplyHeadInfoRowDeleting(this, new ApplyHeadInfoRowChangeEvent(((ApplyHeadInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplyHeadInfoRow(ApplyHeadInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyHeadInfoRow : DataRow {
            
            private ApplyHeadInfoDataTable tableApplyHeadInfo;
            
            internal ApplyHeadInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplyHeadInfo = ((ApplyHeadInfoDataTable)(this.Table));
            }
            
            public int ApplySheetHead_pk {
                get {
                    try {
                        return ((int)(this[this.tableApplyHeadInfo.ApplySheetHead_pkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplySheetHead_pkColumn] = value;
                }
            }
            
            public string ApplySheetNo {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ApplySheetNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplySheetNoColumn] = value;
                }
            }
            
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ItemNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ItemNameColumn] = value;
                }
            }
            
            public string DeptName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.DeptNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.DeptNameColumn] = value;
                }
            }
            
            public System.DateTime ApplyDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableApplyHeadInfo.ApplyDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplyDateColumn] = value;
                }
            }
            
            public string ApplyPersonName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ApplyPersonNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplyPersonNameColumn] = value;
                }
            }
            
            public string ApplyTypeName {
                get {
                    try {
                        return ((string)(this[this.tableApplyHeadInfo.ApplyTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableApplyHeadInfo.ApplyTypeNameColumn] = value;
                }
            }
            
            public bool IsApplySheetHead_pkNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplySheetHead_pkColumn);
            }
            
            public void SetApplySheetHead_pkNull() {
                this[this.tableApplyHeadInfo.ApplySheetHead_pkColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplySheetNoNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplySheetNoColumn);
            }
            
            public void SetApplySheetNoNull() {
                this[this.tableApplyHeadInfo.ApplySheetNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.ItemNameColumn);
            }
            
            public void SetItemNameNull() {
                this[this.tableApplyHeadInfo.ItemNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeptNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.DeptNameColumn);
            }
            
            public void SetDeptNameNull() {
                this[this.tableApplyHeadInfo.DeptNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyDateNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplyDateColumn);
            }
            
            public void SetApplyDateNull() {
                this[this.tableApplyHeadInfo.ApplyDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyPersonNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplyPersonNameColumn);
            }
            
            public void SetApplyPersonNameNull() {
                this[this.tableApplyHeadInfo.ApplyPersonNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplyTypeNameNull() {
                return this.IsNull(this.tableApplyHeadInfo.ApplyTypeNameColumn);
            }
            
            public void SetApplyTypeNameNull() {
                this[this.tableApplyHeadInfo.ApplyTypeNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplyHeadInfoRowChangeEvent : EventArgs {
            
            private ApplyHeadInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplyHeadInfoRowChangeEvent(ApplyHeadInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplyHeadInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
